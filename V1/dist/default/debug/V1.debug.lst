

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Wed Jul 12 23:53:38 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F25K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	text13,global,reloc=2,class=CODE,delta=1
    22                           	psect	text14,global,reloc=2,class=CODE,delta=1
    23                           	psect	text15,global,reloc=2,class=CODE,delta=1
    24                           	psect	text16,global,reloc=2,class=CODE,delta=1
    25                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    27                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    28  0000                     
    29                           ; Version 1.42
    30                           ; Generated 13/04/2017 GMT
    31                           ; 
    32                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC18F25K80 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     _RCREG1	set	4014
    64  0000                     _PIR1bits	set	3998
    65  0000                     _TXREG1	set	4013
    66  0000                     _TXSTA1bits	set	4012
    67  0000                     _PIE1bits	set	3997
    68  0000                     _SSPCON1bits	set	4038
    69  0000                     _RCSTA1bits	set	4011
    70  0000                     _BAUDCON1	set	4007
    71  0000                     _SPBRG1	set	4015
    72  0000                     _TXSTA1	set	4012
    73  0000                     _TRISC	set	3988
    74  0000                     _TRISB	set	3987
    75  0000                     _SSPSTATbits	set	4039
    76  0000                     _SSPBUF	set	4041
    77  0000                     _LATCbits	set	3979
    78  0000                     _RC1IF	set	31989
    79                           
    80                           ; #config settings
    81  0000                     
    82                           	psect	cinit
    83  0075F8                     __pcinit:
    84                           	opt stack 0
    85  0075F8                     start_initialization:
    86                           	opt stack 0
    87  0075F8                     __initialization:
    88                           	opt stack 0
    89                           
    90                           ; Clear objects allocated to BANK0 (24 bytes)
    91  0075F8  EE00  F060         	lfsr	0,__pbssBANK0
    92  0075FC  0E18               	movlw	24
    93  0075FE                     clear_0:
    94  0075FE  6AEE               	clrf	postinc0,c
    95  007600  06E8               	decf	wreg,f,c
    96  007602  E1FD               	bnz	clear_0
    97  007604                     end_of_initialization:
    98                           	opt stack 0
    99  007604                     __end_of__initialization:
   100                           	opt stack 0
   101  007604  0100               	movlb	0
   102  007606  EF17  F03D         	goto	_main	;jump to C main() function
   103                           postinc0	equ	0xFEE
   104                           wreg	equ	0xFE8
   105                           
   106                           	psect	bssBANK0
   107  000060                     __pbssBANK0:
   108                           	opt stack 0
   109  000060                     _CDC_RESULT:
   110                           	opt stack 0
   111  000060                     	ds	24
   112                           postinc0	equ	0xFEE
   113                           wreg	equ	0xFE8
   114                           
   115                           	psect	cstackCOMRAM
   116  000001                     __pcstackCOMRAM:
   117                           	opt stack 0
   118  000001                     ?_w16_r16_spi:
   119                           	opt stack 0
   120  000001                     ?___awdiv:
   121                           	opt stack 0
   122  000001                     uart_write_char@data:
   123                           	opt stack 0
   124  000001                     get_CDC@cdc:
   125                           	opt stack 0
   126  000001                     w32_spi@address:
   127                           	opt stack 0
   128  000001                     w16_r16_spi@address:
   129                           	opt stack 0
   130  000001                     uart_write_unsigned_int@number:
   131                           	opt stack 0
   132  000001                     ___awdiv@dividend:
   133                           	opt stack 0
   134                           
   135                           ; 2 bytes @ 0x0
   136  000001                     	ds	2
   137  000003                     ??_w16_r16_spi:
   138  000003                     uart_write_unsigned_int@char1:
   139                           	opt stack 0
   140  000003                     get_CDC@state:
   141                           	opt stack 0
   142  000003                     w32_spi@data:
   143                           	opt stack 0
   144  000003                     ___awdiv@divisor:
   145                           	opt stack 0
   146                           
   147                           ; 2 bytes @ 0x2
   148  000003                     	ds	1
   149  000004                     uart_write_unsigned_int@char2:
   150                           	opt stack 0
   151                           
   152                           ; 1 bytes @ 0x3
   153  000004                     	ds	1
   154  000005                     ??_w32_spi:
   155  000005                     ___awdiv@counter:
   156                           	opt stack 0
   157  000005                     sensor_cdc@sensor:
   158                           	opt stack 0
   159  000005                     w16_r16_spi@p1:
   160                           	opt stack 0
   161                           
   162                           ; 2 bytes @ 0x4
   163  000005                     	ds	1
   164  000006                     ___awdiv@sign:
   165                           	opt stack 0
   166                           
   167                           ; 1 bytes @ 0x5
   168  000006                     	ds	1
   169  000007                     sensor_cdc@state:
   170                           	opt stack 0
   171  000007                     w32_spi@p1:
   172                           	opt stack 0
   173  000007                     w16_r16_spi@p2:
   174                           	opt stack 0
   175  000007                     ___awdiv@quotient:
   176                           	opt stack 0
   177                           
   178                           ; 2 bytes @ 0x6
   179  000007                     	ds	2
   180  000009                     delay_ms@n:
   181                           	opt stack 0
   182  000009                     w32_spi@p2:
   183                           	opt stack 0
   184  000009                     w16_r16_spi@address_low:
   185                           	opt stack 0
   186                           
   187                           ; 2 bytes @ 0x8
   188  000009                     	ds	2
   189  00000B                     ??_delay_ms:
   190  00000B                     w32_spi@p3:
   191                           	opt stack 0
   192  00000B                     w16_r16_spi@address_high:
   193                           	opt stack 0
   194                           
   195                           ; 2 bytes @ 0xA
   196  00000B                     	ds	1
   197  00000C                     delay_ms@j:
   198                           	opt stack 0
   199                           
   200                           ; 2 bytes @ 0xB
   201  00000C                     	ds	1
   202  00000D                     w32_spi@p4:
   203                           	opt stack 0
   204  00000D                     w16_r16_spi@result:
   205                           	opt stack 0
   206                           
   207                           ; 2 bytes @ 0xC
   208  00000D                     	ds	2
   209  00000F                     w32_spi@address_low:
   210                           	opt stack 0
   211  00000F                     w16_r16_spi@blank_low:
   212                           	opt stack 0
   213                           
   214                           ; 2 bytes @ 0xE
   215  00000F                     	ds	2
   216  000011                     w32_spi@address_high:
   217                           	opt stack 0
   218  000011                     w16_r16_spi@blank_high:
   219                           	opt stack 0
   220                           
   221                           ; 2 bytes @ 0x10
   222  000011                     	ds	2
   223  000013                     w32_spi@data_low:
   224                           	opt stack 0
   225  000013                     w16_r16_spi@p3:
   226                           	opt stack 0
   227                           
   228                           ; 2 bytes @ 0x12
   229  000013                     	ds	2
   230  000015                     w32_spi@data_high:
   231                           	opt stack 0
   232  000015                     w16_r16_spi@p4:
   233                           	opt stack 0
   234                           
   235                           ; 2 bytes @ 0x14
   236  000015                     	ds	2
   237  000017                     ?_read_sensor:
   238                           	opt stack 0
   239  000017                     ?_get_ID:
   240                           	opt stack 0
   241  000017                     write_AD7147@RegisterAddress:
   242                           	opt stack 0
   243  000017                     read_sensor@sensor:
   244                           	opt stack 0
   245  000017                     get_ID@cdc:
   246                           	opt stack 0
   247  000017                     blink_LED@cdc:
   248                           	opt stack 0
   249                           
   250                           ; 2 bytes @ 0x16
   251  000017                     	ds	2
   252  000019                     ??_get_ID:
   253  000019                     write_AD7147@NumberOfRegisters:
   254                           	opt stack 0
   255  000019                     read_sensor@register1:
   256                           	opt stack 0
   257  000019                     blink_LED@message:
   258                           	opt stack 0
   259                           
   260                           ; 2 bytes @ 0x18
   261  000019                     	ds	1
   262  00001A                     get_ID@result:
   263                           	opt stack 0
   264                           
   265                           ; 2 bytes @ 0x19
   266  00001A                     	ds	1
   267  00001B                     write_AD7147@DataBuffer:
   268                           	opt stack 0
   269  00001B                     read_sensor@sensor_value:
   270                           	opt stack 0
   271                           
   272                           ; 2 bytes @ 0x1A
   273  00001B                     	ds	2
   274  00001D                     write_AD7147@Register_Values:
   275                           	opt stack 0
   276                           
   277                           ; 2 bytes @ 0x1C
   278  00001D                     	ds	2
   279  00001F                     write_AD7147@i:
   280                           	opt stack 0
   281                           
   282                           ; 2 bytes @ 0x1E
   283  00001F                     	ds	2
   284  000021                     setup_AD7147@cdc:
   285                           	opt stack 0
   286                           
   287                           ; 2 bytes @ 0x20
   288  000021                     	ds	2
   289  000023                     setup_AD7147@AD7147Registers:
   290                           	opt stack 0
   291                           
   292                           ; 16 bytes @ 0x22
   293  000023                     	ds	16
   294  000033                     setup_AD7147@StageBuffer:
   295                           	opt stack 0
   296                           
   297                           ; 16 bytes @ 0x32
   298  000033                     	ds	16
   299  000043                     main@bb:
   300                           	opt stack 0
   301                           
   302                           ; 2 bytes @ 0x42
   303  000043                     	ds	2
   304  000045                     main@device_ID:
   305                           	opt stack 0
   306                           
   307                           ; 2 bytes @ 0x44
   308  000045                     	ds	2
   309  000047                     main@sensor_1:
   310                           	opt stack 0
   311                           
   312                           ; 2 bytes @ 0x46
   313  000047                     	ds	2
   314  000049                     main@indicator:
   315                           	opt stack 0
   316                           
   317                           ; 1 bytes @ 0x48
   318  000049                     	ds	1
   319                           postinc0	equ	0xFEE
   320                           wreg	equ	0xFE8
   321                           
   322 ;;
   323 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   324 ;;
   325 ;; *************** function _main *****************
   326 ;; Defined at:
   327 ;;		line 6 in file "main.c"
   328 ;; Parameters:    Size  Location     Type
   329 ;;		None
   330 ;; Auto vars:     Size  Location     Type
   331 ;;  sensor_1        2   70[COMRAM] unsigned int 
   332 ;;  device_ID       2   68[COMRAM] unsigned int 
   333 ;;  bb              2   66[COMRAM] unsigned int 
   334 ;;  indicator       1   72[COMRAM] unsigned char 
   335 ;; Return value:  Size  Location     Type
   336 ;;                  1    wreg      void 
   337 ;; Registers used:
   338 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   339 ;; Tracked objects:
   340 ;;		On entry : 0/0
   341 ;;		On exit  : 0/0
   342 ;;		Unchanged: 0/0
   343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   345 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   347 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   348 ;;Total ram usage:        7 bytes
   349 ;; Hardware stack levels required when called:    3
   350 ;; This function calls:
   351 ;;		_blink_LED
   352 ;;		_delay_ms
   353 ;;		_get_ID
   354 ;;		_read_sensor
   355 ;;		_setup_AD7147
   356 ;;		_setup_mcu
   357 ;;		_setup_spi
   358 ;;		_uart_write_char
   359 ;;		_uart_write_unsigned_int
   360 ;; This function is called by:
   361 ;;		Startup code after reset
   362 ;; This function uses a non-reentrant model
   363 ;;
   364                           
   365                           	psect	text0
   366  007A2E                     __ptext0:
   367                           	opt stack 0
   368  007A2E                     _main:
   369                           	opt stack 28
   370                           
   371                           ;main.c: 8: delay_ms(500);
   372                           
   373                           ;incstack = 0
   374  007A2E  0E01               	movlw	1
   375  007A30  6E0A               	movwf	delay_ms@n+1,c
   376  007A32  0EF4               	movlw	244
   377  007A34  6E09               	movwf	delay_ms@n,c
   378  007A36  EC38  F03B         	call	_delay_ms	;wreg free
   379                           
   380                           ;main.c: 9: setup_mcu();
   381  007A3A  ECE9  F03A         	call	_setup_mcu	;wreg free
   382                           
   383                           ;main.c: 10: setup_spi();
   384  007A3E  EC0F  F03B         	call	_setup_spi	;wreg free
   385                           
   386                           ;main.c: 11: setup_AD7147(1);
   387  007A42  0E00               	movlw	0
   388  007A44  6E22               	movwf	setup_AD7147@cdc+1,c
   389  007A46  0E01               	movlw	1
   390  007A48  6E21               	movwf	setup_AD7147@cdc,c
   391  007A4A  EC81  F03D         	call	_setup_AD7147	;wreg free
   392                           
   393                           ;main.c: 12: setup_AD7147(2);
   394  007A4E  0E00               	movlw	0
   395  007A50  6E22               	movwf	setup_AD7147@cdc+1,c
   396  007A52  0E02               	movlw	2
   397  007A54  6E21               	movwf	setup_AD7147@cdc,c
   398  007A56  EC81  F03D         	call	_setup_AD7147	;wreg free
   399                           
   400                           ;main.c: 14: blink_LED(2);
   401  007A5A  0E00               	movlw	0
   402  007A5C  6E18               	movwf	blink_LED@cdc+1,c
   403  007A5E  0E02               	movlw	2
   404  007A60  6E17               	movwf	blink_LED@cdc,c
   405  007A62  ECC0  F03C         	call	_blink_LED	;wreg free
   406                           
   407                           ;main.c: 15: blink_LED(1);
   408  007A66  0E00               	movlw	0
   409  007A68  6E18               	movwf	blink_LED@cdc+1,c
   410  007A6A  0E01               	movlw	1
   411  007A6C  6E17               	movwf	blink_LED@cdc,c
   412  007A6E  ECC0  F03C         	call	_blink_LED	;wreg free
   413                           
   414                           ;main.c: 16: char indicator = 's';
   415  007A72  0E73               	movlw	115
   416  007A74  6E49               	movwf	main@indicator,c
   417                           
   418                           ;main.c: 17: unsigned int bb = 1020;
   419  007A76  0E03               	movlw	3
   420  007A78  6E44               	movwf	main@bb+1,c
   421  007A7A  0EFC               	movlw	252
   422  007A7C  6E43               	movwf	main@bb,c
   423  007A7E                     l1937:
   424                           
   425                           ;main.c: 19: {
   426                           ;main.c: 21: if (indicator == 'i')
   427  007A7E  0E69               	movlw	105
   428  007A80  1849               	xorwf	main@indicator,w,c
   429  007A82  A4D8               	btfss	status,2,c
   430  007A84  D013               	goto	l1945
   431                           
   432                           ;main.c: 22: {
   433                           ;main.c: 23: uart_write_char('i');
   434  007A86  0E69               	movlw	105
   435  007A88  ECEE  F03A         	call	_uart_write_char
   436                           
   437                           ;main.c: 24: unsigned int device_ID = get_ID(1);
   438  007A8C  0E00               	movlw	0
   439  007A8E  6E18               	movwf	get_ID@cdc+1,c
   440  007A90  0E01               	movlw	1
   441  007A92  6E17               	movwf	get_ID@cdc,c
   442  007A94  ECA2  F03B         	call	_get_ID	;wreg free
   443  007A98  C017  F045         	movff	?_get_ID,main@device_ID
   444  007A9C  C018  F046         	movff	?_get_ID+1,main@device_ID+1
   445                           
   446                           ;main.c: 25: uart_write_unsigned_int(device_ID);
   447  007AA0  C045  F001         	movff	main@device_ID,uart_write_unsigned_int@number
   448  007AA4  C046  F002         	movff	main@device_ID+1,uart_write_unsigned_int@number+1
   449  007AA8  EC1A  F03B         	call	_uart_write_unsigned_int	;wreg free
   450  007AAC                     l1945:
   451                           
   452                           ;main.c: 26: }
   453                           ;main.c: 27: if (indicator == 's')
   454  007AAC  0E73               	movlw	115
   455  007AAE  1849               	xorwf	main@indicator,w,c
   456  007AB0  A4D8               	btfss	status,2,c
   457  007AB2  D013               	goto	l1953
   458                           
   459                           ;main.c: 28: {
   460                           ;main.c: 29: uart_write_char('s');
   461  007AB4  0E73               	movlw	115
   462  007AB6  ECEE  F03A         	call	_uart_write_char
   463                           
   464                           ;main.c: 30: unsigned int sensor_1 = read_sensor(13);
   465  007ABA  0E00               	movlw	0
   466  007ABC  6E18               	movwf	read_sensor@sensor+1,c
   467  007ABE  0E0D               	movlw	13
   468  007AC0  6E17               	movwf	read_sensor@sensor,c
   469  007AC2  EC05  F03C         	call	_read_sensor	;wreg free
   470  007AC6  C017  F047         	movff	?_read_sensor,main@sensor_1
   471  007ACA  C018  F048         	movff	?_read_sensor+1,main@sensor_1+1
   472                           
   473                           ;main.c: 31: uart_write_unsigned_int(sensor_1);
   474  007ACE  C047  F001         	movff	main@sensor_1,uart_write_unsigned_int@number
   475  007AD2  C048  F002         	movff	main@sensor_1+1,uart_write_unsigned_int@number+1
   476  007AD6  EC1A  F03B         	call	_uart_write_unsigned_int	;wreg free
   477  007ADA                     l1953:
   478                           
   479                           ;main.c: 32: }
   480                           ;main.c: 33: if (indicator == 'f')
   481  007ADA  0E66               	movlw	102
   482  007ADC  1849               	xorwf	main@indicator,w,c
   483  007ADE  A4D8               	btfss	status,2,c
   484  007AE0  D009               	goto	l1959
   485                           
   486                           ;main.c: 34: {
   487                           ;main.c: 35: uart_write_char('f');
   488  007AE2  0E66               	movlw	102
   489  007AE4  ECEE  F03A         	call	_uart_write_char
   490                           
   491                           ;main.c: 37: uart_write_unsigned_int(bb);
   492  007AE8  C043  F001         	movff	main@bb,uart_write_unsigned_int@number
   493  007AEC  C044  F002         	movff	main@bb+1,uart_write_unsigned_int@number+1
   494  007AF0  EC1A  F03B         	call	_uart_write_unsigned_int	;wreg free
   495  007AF4                     l1959:
   496                           
   497                           ;main.c: 38: }
   498                           ;main.c: 39: delay_ms(500);
   499  007AF4  0E01               	movlw	1
   500  007AF6  6E0A               	movwf	delay_ms@n+1,c
   501  007AF8  0EF4               	movlw	244
   502  007AFA  6E09               	movwf	delay_ms@n,c
   503  007AFC  EC38  F03B         	call	_delay_ms	;wreg free
   504  007B00  D7BE               	goto	l1937
   505  007B02                     __end_of_main:
   506                           	opt stack 0
   507                           postinc0	equ	0xFEE
   508                           wreg	equ	0xFE8
   509                           status	equ	0xFD8
   510                           
   511 ;; *************** function _uart_write_unsigned_int *****************
   512 ;; Defined at:
   513 ;;		line 39 in file "uart.c"
   514 ;; Parameters:    Size  Location     Type
   515 ;;  number          2    0[COMRAM] unsigned int 
   516 ;; Auto vars:     Size  Location     Type
   517 ;;  char2           1    3[COMRAM] unsigned char 
   518 ;;  char1           1    2[COMRAM] unsigned char 
   519 ;; Return value:  Size  Location     Type
   520 ;;                  1    wreg      void 
   521 ;; Registers used:
   522 ;;		wreg, status,2
   523 ;; Tracked objects:
   524 ;;		On entry : 0/0
   525 ;;		On exit  : 0/0
   526 ;;		Unchanged: 0/0
   527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   528 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   529 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   531 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   532 ;;Total ram usage:        4 bytes
   533 ;; Hardware stack levels used:    1
   534 ;; This function calls:
   535 ;;		Nothing
   536 ;; This function is called by:
   537 ;;		_main
   538 ;; This function uses a non-reentrant model
   539 ;;
   540                           
   541                           	psect	text1
   542  007634                     __ptext1:
   543                           	opt stack 0
   544  007634                     _uart_write_unsigned_int:
   545                           	opt stack 30
   546                           
   547                           ;uart.c: 41: char char1 = number & 0xFF;
   548                           
   549                           ;incstack = 0
   550  007634  C001  F003         	movff	uart_write_unsigned_int@number,uart_write_unsigned_int@char1
   551                           
   552                           ;uart.c: 42: char char2 = number >> 8;
   553  007638  5002               	movf	uart_write_unsigned_int@number+1,w,c
   554  00763A  6E04               	movwf	uart_write_unsigned_int@char2,c
   555  00763C                     l244:
   556  00763C  A2AC               	btfss	4012,1,c	;volatile
   557  00763E  D7FE               	goto	l244
   558                           
   559                           ;uart.c: 45: TXREG1 = char1;
   560  007640  C003  FFAD         	movff	uart_write_unsigned_int@char1,4013	;volatile
   561  007644                     l247:
   562  007644  A2AC               	btfss	4012,1,c	;volatile
   563  007646  D7FE               	goto	l247
   564                           
   565                           ;uart.c: 47: TXREG1 = char2;
   566  007648  C004  FFAD         	movff	uart_write_unsigned_int@char2,4013	;volatile
   567  00764C  0012               	return		;funcret
   568  00764E                     __end_of_uart_write_unsigned_int:
   569                           	opt stack 0
   570                           postinc0	equ	0xFEE
   571                           wreg	equ	0xFE8
   572                           status	equ	0xFD8
   573                           
   574 ;; *************** function _uart_write_char *****************
   575 ;; Defined at:
   576 ;;		line 24 in file "uart.c"
   577 ;; Parameters:    Size  Location     Type
   578 ;;  data            1    wreg     unsigned char 
   579 ;; Auto vars:     Size  Location     Type
   580 ;;  data            1    0[COMRAM] unsigned char 
   581 ;; Return value:  Size  Location     Type
   582 ;;                  1    wreg      void 
   583 ;; Registers used:
   584 ;;		wreg
   585 ;; Tracked objects:
   586 ;;		On entry : 0/0
   587 ;;		On exit  : 0/0
   588 ;;		Unchanged: 0/0
   589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   591 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   593 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   594 ;;Total ram usage:        1 bytes
   595 ;; Hardware stack levels used:    1
   596 ;; This function calls:
   597 ;;		Nothing
   598 ;; This function is called by:
   599 ;;		_main
   600 ;;		_uart_write_string
   601 ;; This function uses a non-reentrant model
   602 ;;
   603                           
   604                           	psect	text2
   605  0075DC                     __ptext2:
   606                           	opt stack 0
   607  0075DC                     _uart_write_char:
   608                           	opt stack 30
   609                           
   610                           ;incstack = 0
   611                           ;uart_write_char@data stored from wreg
   612  0075DC  6E01               	movwf	uart_write_char@data,c
   613  0075DE                     l232:
   614  0075DE  A2AC               	btfss	4012,1,c	;volatile
   615  0075E0  D7FE               	goto	l232
   616                           
   617                           ;uart.c: 28: TXREG1 = data;
   618  0075E2  C001  FFAD         	movff	uart_write_char@data,4013	;volatile
   619  0075E6  0012               	return		;funcret
   620  0075E8                     __end_of_uart_write_char:
   621                           	opt stack 0
   622                           postinc0	equ	0xFEE
   623                           wreg	equ	0xFE8
   624                           status	equ	0xFD8
   625                           
   626 ;; *************** function _setup_spi *****************
   627 ;; Defined at:
   628 ;;		line 4 in file "spi.c"
   629 ;; Parameters:    Size  Location     Type
   630 ;;		None
   631 ;; Auto vars:     Size  Location     Type
   632 ;;		None
   633 ;; Return value:  Size  Location     Type
   634 ;;                  1    wreg      void 
   635 ;; Registers used:
   636 ;;		None
   637 ;; Tracked objects:
   638 ;;		On entry : 0/0
   639 ;;		On exit  : 0/0
   640 ;;		Unchanged: 0/0
   641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   645 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   646 ;;Total ram usage:        0 bytes
   647 ;; Hardware stack levels used:    1
   648 ;; This function calls:
   649 ;;		Nothing
   650 ;; This function is called by:
   651 ;;		_main
   652 ;; This function uses a non-reentrant model
   653 ;;
   654                           
   655                           	psect	text3
   656  00761E                     __ptext3:
   657                           	opt stack 0
   658  00761E                     _setup_spi:
   659                           	opt stack 30
   660                           
   661                           ;spi.c: 6: SSPSTATbits.SMP = 0;
   662                           
   663                           ;incstack = 0
   664  00761E  9EC7               	bcf	4039,7,c	;volatile
   665                           
   666                           ;spi.c: 7: SSPSTATbits.CKE = 0;
   667  007620  9CC7               	bcf	4039,6,c	;volatile
   668                           
   669                           ;spi.c: 9: SSPCON1bits.WCOL = 0;
   670  007622  9EC6               	bcf	4038,7,c	;volatile
   671                           
   672                           ;spi.c: 10: SSPCON1bits.CKP = 1;
   673  007624  88C6               	bsf	4038,4,c	;volatile
   674                           
   675                           ;spi.c: 12: SSPCON1bits.SSPM3 = 0;
   676  007626  96C6               	bcf	4038,3,c	;volatile
   677                           
   678                           ;spi.c: 13: SSPCON1bits.SSPM2 = 0;
   679  007628  94C6               	bcf	4038,2,c	;volatile
   680                           
   681                           ;spi.c: 14: SSPCON1bits.SSPM1 = 1;
   682  00762A  82C6               	bsf	4038,1,c	;volatile
   683                           
   684                           ;spi.c: 15: SSPCON1bits.SSPM0 = 0;
   685  00762C  90C6               	bcf	4038,0,c	;volatile
   686                           
   687                           ;spi.c: 17: PIE1bits.SSPIE = 0;
   688  00762E  969D               	bcf	3997,3,c	;volatile
   689                           
   690                           ;spi.c: 19: SSPCON1bits.SSPEN = 1;
   691  007630  8AC6               	bsf	4038,5,c	;volatile
   692  007632  0012               	return		;funcret
   693  007634                     __end_of_setup_spi:
   694                           	opt stack 0
   695                           postinc0	equ	0xFEE
   696                           wreg	equ	0xFE8
   697                           status	equ	0xFD8
   698                           
   699 ;; *************** function _setup_mcu *****************
   700 ;; Defined at:
   701 ;;		line 6 in file "micro_setup.c"
   702 ;; Parameters:    Size  Location     Type
   703 ;;		None
   704 ;; Auto vars:     Size  Location     Type
   705 ;;		None
   706 ;; Return value:  Size  Location     Type
   707 ;;                  1    wreg      void 
   708 ;; Registers used:
   709 ;;		wreg, status,2, cstack
   710 ;; Tracked objects:
   711 ;;		On entry : 0/0
   712 ;;		On exit  : 0/0
   713 ;;		Unchanged: 0/0
   714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   718 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   719 ;;Total ram usage:        0 bytes
   720 ;; Hardware stack levels used:    1
   721 ;; Hardware stack levels required when called:    1
   722 ;; This function calls:
   723 ;;		_init_uart
   724 ;;		_setup_port
   725 ;; This function is called by:
   726 ;;		_main
   727 ;; This function uses a non-reentrant model
   728 ;;
   729                           
   730                           	psect	text4
   731  0075D2                     __ptext4:
   732                           	opt stack 0
   733  0075D2                     _setup_mcu:
   734                           	opt stack 29
   735                           
   736                           ;micro_setup.c: 8: setup_port();
   737                           
   738                           ;incstack = 0
   739  0075D2  ECF4  F03A         	call	_setup_port	;wreg free
   740                           
   741                           ;micro_setup.c: 9: init_uart();
   742  0075D6  EC05  F03B         	call	_init_uart	;wreg free
   743  0075DA  0012               	return		;funcret
   744  0075DC                     __end_of_setup_mcu:
   745                           	opt stack 0
   746                           postinc0	equ	0xFEE
   747                           wreg	equ	0xFE8
   748                           status	equ	0xFD8
   749                           
   750 ;; *************** function _setup_port *****************
   751 ;; Defined at:
   752 ;;		line 12 in file "micro_setup.c"
   753 ;; Parameters:    Size  Location     Type
   754 ;;		None
   755 ;; Auto vars:     Size  Location     Type
   756 ;;		None
   757 ;; Return value:  Size  Location     Type
   758 ;;                  1    wreg      void 
   759 ;; Registers used:
   760 ;;		wreg, status,2
   761 ;; Tracked objects:
   762 ;;		On entry : 0/0
   763 ;;		On exit  : 0/0
   764 ;;		Unchanged: 0/0
   765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   769 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   770 ;;Total ram usage:        0 bytes
   771 ;; Hardware stack levels used:    1
   772 ;; This function calls:
   773 ;;		Nothing
   774 ;; This function is called by:
   775 ;;		_setup_mcu
   776 ;; This function uses a non-reentrant model
   777 ;;
   778                           
   779                           	psect	text5
   780  0075E8                     __ptext5:
   781                           	opt stack 0
   782  0075E8                     _setup_port:
   783                           	opt stack 29
   784                           
   785                           ;micro_setup.c: 15: TRISB = 0b00000000;
   786                           
   787                           ;incstack = 0
   788  0075E8  0E00               	movlw	0
   789  0075EA  6E93               	movwf	3987,c	;volatile
   790                           
   791                           ;micro_setup.c: 16: TRISC = 0b10010000;
   792  0075EC  0E90               	movlw	144
   793  0075EE  6E94               	movwf	3988,c	;volatile
   794                           
   795                           ;micro_setup.c: 17: LATCbits.LATC1=1;
   796  0075F0  828B               	bsf	3979,1,c	;volatile
   797                           
   798                           ;micro_setup.c: 18: LATCbits.LATC0=1;
   799  0075F2  808B               	bsf	3979,0,c	;volatile
   800                           
   801                           ;micro_setup.c: 19: LATCbits.LATC2=1;
   802  0075F4  848B               	bsf	3979,2,c	;volatile
   803  0075F6  0012               	return		;funcret
   804  0075F8                     __end_of_setup_port:
   805                           	opt stack 0
   806                           postinc0	equ	0xFEE
   807                           wreg	equ	0xFE8
   808                           status	equ	0xFD8
   809                           
   810 ;; *************** function _init_uart *****************
   811 ;; Defined at:
   812 ;;		line 22 in file "micro_setup.c"
   813 ;; Parameters:    Size  Location     Type
   814 ;;		None
   815 ;; Auto vars:     Size  Location     Type
   816 ;;		None
   817 ;; Return value:  Size  Location     Type
   818 ;;                  1    wreg      void 
   819 ;; Registers used:
   820 ;;		wreg, status,2
   821 ;; Tracked objects:
   822 ;;		On entry : 0/0
   823 ;;		On exit  : 0/0
   824 ;;		Unchanged: 0/0
   825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   829 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   830 ;;Total ram usage:        0 bytes
   831 ;; Hardware stack levels used:    1
   832 ;; This function calls:
   833 ;;		Nothing
   834 ;; This function is called by:
   835 ;;		_setup_mcu
   836 ;; This function uses a non-reentrant model
   837 ;;
   838                           
   839                           	psect	text6
   840  00760A                     __ptext6:
   841                           	opt stack 0
   842  00760A                     _init_uart:
   843                           	opt stack 29
   844                           
   845                           ;micro_setup.c: 24: TXSTA1 = 0b00100000;
   846                           
   847                           ;incstack = 0
   848  00760A  0E20               	movlw	32
   849  00760C  6EAC               	movwf	4012,c	;volatile
   850                           
   851                           ;micro_setup.c: 36: SPBRG1 = 12;
   852  00760E  0E0C               	movlw	12
   853  007610  6EAF               	movwf	4015,c	;volatile
   854                           
   855                           ;micro_setup.c: 38: BAUDCON1 = 0b00000000;
   856  007612  0E00               	movlw	0
   857  007614  6EA7               	movwf	4007,c	;volatile
   858                           
   859                           ;micro_setup.c: 58: RCSTA1bits.SPEN=1;
   860  007616  8EAB               	bsf	4011,7,c	;volatile
   861                           
   862                           ;micro_setup.c: 59: RCSTA1bits.RX9=0;
   863  007618  9CAB               	bcf	4011,6,c	;volatile
   864                           
   865                           ;micro_setup.c: 60: RCSTA1bits.CREN=1;
   866  00761A  88AB               	bsf	4011,4,c	;volatile
   867  00761C  0012               	return		;funcret
   868  00761E                     __end_of_init_uart:
   869                           	opt stack 0
   870                           postinc0	equ	0xFEE
   871                           wreg	equ	0xFE8
   872                           status	equ	0xFD8
   873                           
   874 ;; *************** function _setup_AD7147 *****************
   875 ;; Defined at:
   876 ;;		line 6 in file "AD7147.c"
   877 ;; Parameters:    Size  Location     Type
   878 ;;  cdc             2   32[COMRAM] unsigned int 
   879 ;; Auto vars:     Size  Location     Type
   880 ;;  StageBuffer    16   50[COMRAM] unsigned int [8]
   881 ;;  AD7147Regist   16   34[COMRAM] unsigned int [8]
   882 ;; Return value:  Size  Location     Type
   883 ;;                  1    wreg      void 
   884 ;; Registers used:
   885 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   886 ;; Tracked objects:
   887 ;;		On entry : 0/0
   888 ;;		On exit  : 0/0
   889 ;;		Unchanged: 0/0
   890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   891 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   892 ;;      Locals:        32       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   894 ;;      Totals:        34       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   895 ;;Total ram usage:       34 bytes
   896 ;; Hardware stack levels used:    1
   897 ;; Hardware stack levels required when called:    2
   898 ;; This function calls:
   899 ;;		_get_CDC
   900 ;;		_write_AD7147
   901 ;; This function is called by:
   902 ;;		_main
   903 ;; This function uses a non-reentrant model
   904 ;;
   905                           
   906                           	psect	text7
   907  007B02                     __ptext7:
   908                           	opt stack 0
   909  007B02                     _setup_AD7147:
   910                           	opt stack 28
   911                           
   912                           ;AD7147.c: 8: get_CDC(cdc,0);
   913                           
   914                           ;incstack = 0
   915  007B02  C021  F001         	movff	setup_AD7147@cdc,get_CDC@cdc
   916  007B06  C022  F002         	movff	setup_AD7147@cdc+1,get_CDC@cdc+1
   917  007B0A  0E00               	movlw	0
   918  007B0C  6E04               	movwf	get_CDC@state+1,c
   919  007B0E  0E00               	movlw	0
   920  007B10  6E03               	movwf	get_CDC@state,c
   921  007B12  EC27  F03B         	call	_get_CDC	;wreg free
   922                           
   923                           ;AD7147.c: 9: unsigned int StageBuffer[8];
   924                           ;AD7147.c: 24: StageBuffer[0] = 0x0001;
   925  007B16  0E00               	movlw	0
   926  007B18  6E34               	movwf	setup_AD7147@StageBuffer+1,c
   927  007B1A  0E01               	movlw	1
   928  007B1C  6E33               	movwf	setup_AD7147@StageBuffer,c
   929                           
   930                           ;AD7147.c: 25: StageBuffer[1] = 0x0000;
   931  007B1E  0E00               	movlw	0
   932  007B20  6E36               	movwf	setup_AD7147@StageBuffer+3,c
   933  007B22  0E00               	movlw	0
   934  007B24  6E35               	movwf	setup_AD7147@StageBuffer+2,c
   935                           
   936                           ;AD7147.c: 26: StageBuffer[2] = 0x0100;
   937  007B26  0E01               	movlw	1
   938  007B28  6E38               	movwf	setup_AD7147@StageBuffer+5,c
   939  007B2A  0E00               	movlw	0
   940  007B2C  6E37               	movwf	setup_AD7147@StageBuffer+4,c
   941                           
   942                           ;AD7147.c: 27: StageBuffer[3] = 0x2121;
   943  007B2E  0E21               	movlw	33
   944  007B30  6E3A               	movwf	setup_AD7147@StageBuffer+7,c
   945  007B32  0E21               	movlw	33
   946  007B34  6E39               	movwf	setup_AD7147@StageBuffer+6,c
   947                           
   948                           ;AD7147.c: 28: StageBuffer[4] = 4000;
   949  007B36  0E0F               	movlw	15
   950  007B38  6E3C               	movwf	setup_AD7147@StageBuffer+9,c
   951  007B3A  0EA0               	movlw	160
   952  007B3C  6E3B               	movwf	setup_AD7147@StageBuffer+8,c
   953                           
   954                           ;AD7147.c: 29: StageBuffer[5] = 4000;
   955  007B3E  0E0F               	movlw	15
   956  007B40  6E3E               	movwf	setup_AD7147@StageBuffer+11,c
   957  007B42  0EA0               	movlw	160
   958  007B44  6E3D               	movwf	setup_AD7147@StageBuffer+10,c
   959                           
   960                           ;AD7147.c: 30: StageBuffer[6] = 4250;
   961  007B46  0E10               	movlw	16
   962  007B48  6E40               	movwf	setup_AD7147@StageBuffer+13,c
   963  007B4A  0E9A               	movlw	154
   964  007B4C  6E3F               	movwf	setup_AD7147@StageBuffer+12,c
   965                           
   966                           ;AD7147.c: 31: StageBuffer[7] = 4250;
   967  007B4E  0E10               	movlw	16
   968  007B50  6E42               	movwf	setup_AD7147@StageBuffer+15,c
   969  007B52  0E9A               	movlw	154
   970  007B54  6E41               	movwf	setup_AD7147@StageBuffer+14,c
   971                           
   972                           ;AD7147.c: 32: write_AD7147(0x080, 8, StageBuffer);
   973  007B56  0E00               	movlw	0
   974  007B58  6E18               	movwf	write_AD7147@RegisterAddress+1,c
   975  007B5A  0E80               	movlw	128
   976  007B5C  6E17               	movwf	write_AD7147@RegisterAddress,c
   977  007B5E  0E00               	movlw	0
   978  007B60  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
   979  007B62  0E08               	movlw	8
   980  007B64  6E19               	movwf	write_AD7147@NumberOfRegisters,c
   981  007B66  0E33               	movlw	low setup_AD7147@StageBuffer
   982  007B68  6E1B               	movwf	write_AD7147@DataBuffer,c
   983  007B6A  0E00               	movlw	high setup_AD7147@StageBuffer
   984  007B6C  6E1C               	movwf	write_AD7147@DataBuffer+1,c
   985  007B6E  EC79  F03B         	call	_write_AD7147	;wreg free
   986                           
   987                           ;AD7147.c: 37: StageBuffer[0]=0x3FFB;
   988  007B72  0E3F               	movlw	63
   989  007B74  6E34               	movwf	setup_AD7147@StageBuffer+1,c
   990  007B76  0EFB               	movlw	251
   991  007B78  6E33               	movwf	setup_AD7147@StageBuffer,c
   992                           
   993                           ;AD7147.c: 38: StageBuffer[1]=0x1FFF;
   994  007B7A  0E1F               	movlw	31
   995  007B7C  6E36               	movwf	setup_AD7147@StageBuffer+3,c
   996  007B7E  6835               	setf	setup_AD7147@StageBuffer+2,c
   997                           
   998                           ;AD7147.c: 39: StageBuffer[2]=0x0100;
   999  007B80  0E01               	movlw	1
  1000  007B82  6E38               	movwf	setup_AD7147@StageBuffer+5,c
  1001  007B84  0E00               	movlw	0
  1002  007B86  6E37               	movwf	setup_AD7147@StageBuffer+4,c
  1003                           
  1004                           ;AD7147.c: 40: StageBuffer[3]=0x2121;
  1005  007B88  0E21               	movlw	33
  1006  007B8A  6E3A               	movwf	setup_AD7147@StageBuffer+7,c
  1007  007B8C  0E21               	movlw	33
  1008  007B8E  6E39               	movwf	setup_AD7147@StageBuffer+6,c
  1009                           
  1010                           ;AD7147.c: 41: StageBuffer[4]=4000;
  1011  007B90  0E0F               	movlw	15
  1012  007B92  6E3C               	movwf	setup_AD7147@StageBuffer+9,c
  1013  007B94  0EA0               	movlw	160
  1014  007B96  6E3B               	movwf	setup_AD7147@StageBuffer+8,c
  1015                           
  1016                           ;AD7147.c: 42: StageBuffer[5]=4000;
  1017  007B98  0E0F               	movlw	15
  1018  007B9A  6E3E               	movwf	setup_AD7147@StageBuffer+11,c
  1019  007B9C  0EA0               	movlw	160
  1020  007B9E  6E3D               	movwf	setup_AD7147@StageBuffer+10,c
  1021                           
  1022                           ;AD7147.c: 43: StageBuffer[6]=4250;
  1023  007BA0  0E10               	movlw	16
  1024  007BA2  6E40               	movwf	setup_AD7147@StageBuffer+13,c
  1025  007BA4  0E9A               	movlw	154
  1026  007BA6  6E3F               	movwf	setup_AD7147@StageBuffer+12,c
  1027                           
  1028                           ;AD7147.c: 44: StageBuffer[7]=4250;
  1029  007BA8  0E10               	movlw	16
  1030  007BAA  6E42               	movwf	setup_AD7147@StageBuffer+15,c
  1031  007BAC  0E9A               	movlw	154
  1032  007BAE  6E41               	movwf	setup_AD7147@StageBuffer+14,c
  1033                           
  1034                           ;AD7147.c: 45: write_AD7147(0x088, 8, StageBuffer);
  1035  007BB0  0E00               	movlw	0
  1036  007BB2  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1037  007BB4  0E88               	movlw	136
  1038  007BB6  6E17               	movwf	write_AD7147@RegisterAddress,c
  1039  007BB8  0E00               	movlw	0
  1040  007BBA  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1041  007BBC  0E08               	movlw	8
  1042  007BBE  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1043  007BC0  0E33               	movlw	low setup_AD7147@StageBuffer
  1044  007BC2  6E1B               	movwf	write_AD7147@DataBuffer,c
  1045  007BC4  0E00               	movlw	high setup_AD7147@StageBuffer
  1046  007BC6  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1047  007BC8  EC79  F03B         	call	_write_AD7147	;wreg free
  1048                           
  1049                           ;AD7147.c: 50: StageBuffer[0]=0x3FEF;
  1050  007BCC  0E3F               	movlw	63
  1051  007BCE  6E34               	movwf	setup_AD7147@StageBuffer+1,c
  1052  007BD0  0EEF               	movlw	239
  1053  007BD2  6E33               	movwf	setup_AD7147@StageBuffer,c
  1054                           
  1055                           ;AD7147.c: 51: StageBuffer[1]=0x1FFF;
  1056  007BD4  0E1F               	movlw	31
  1057  007BD6  6E36               	movwf	setup_AD7147@StageBuffer+3,c
  1058  007BD8  6835               	setf	setup_AD7147@StageBuffer+2,c
  1059                           
  1060                           ;AD7147.c: 52: StageBuffer[2]=0x0100;
  1061  007BDA  0E01               	movlw	1
  1062  007BDC  6E38               	movwf	setup_AD7147@StageBuffer+5,c
  1063  007BDE  0E00               	movlw	0
  1064  007BE0  6E37               	movwf	setup_AD7147@StageBuffer+4,c
  1065                           
  1066                           ;AD7147.c: 53: StageBuffer[3]=0x2121;
  1067  007BE2  0E21               	movlw	33
  1068  007BE4  6E3A               	movwf	setup_AD7147@StageBuffer+7,c
  1069  007BE6  0E21               	movlw	33
  1070  007BE8  6E39               	movwf	setup_AD7147@StageBuffer+6,c
  1071                           
  1072                           ;AD7147.c: 54: StageBuffer[4]=4000;
  1073  007BEA  0E0F               	movlw	15
  1074  007BEC  6E3C               	movwf	setup_AD7147@StageBuffer+9,c
  1075  007BEE  0EA0               	movlw	160
  1076  007BF0  6E3B               	movwf	setup_AD7147@StageBuffer+8,c
  1077                           
  1078                           ;AD7147.c: 55: StageBuffer[5]=4000;
  1079  007BF2  0E0F               	movlw	15
  1080  007BF4  6E3E               	movwf	setup_AD7147@StageBuffer+11,c
  1081  007BF6  0EA0               	movlw	160
  1082  007BF8  6E3D               	movwf	setup_AD7147@StageBuffer+10,c
  1083                           
  1084                           ;AD7147.c: 56: StageBuffer[6]=4250;
  1085  007BFA  0E10               	movlw	16
  1086  007BFC  6E40               	movwf	setup_AD7147@StageBuffer+13,c
  1087  007BFE  0E9A               	movlw	154
  1088  007C00  6E3F               	movwf	setup_AD7147@StageBuffer+12,c
  1089                           
  1090                           ;AD7147.c: 57: StageBuffer[7]=4250;
  1091  007C02  0E10               	movlw	16
  1092  007C04  6E42               	movwf	setup_AD7147@StageBuffer+15,c
  1093  007C06  0E9A               	movlw	154
  1094  007C08  6E41               	movwf	setup_AD7147@StageBuffer+14,c
  1095                           
  1096                           ;AD7147.c: 58: write_AD7147(0x090, 8, StageBuffer);
  1097  007C0A  0E00               	movlw	0
  1098  007C0C  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1099  007C0E  0E90               	movlw	144
  1100  007C10  6E17               	movwf	write_AD7147@RegisterAddress,c
  1101  007C12  0E00               	movlw	0
  1102  007C14  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1103  007C16  0E08               	movlw	8
  1104  007C18  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1105  007C1A  0E33               	movlw	low setup_AD7147@StageBuffer
  1106  007C1C  6E1B               	movwf	write_AD7147@DataBuffer,c
  1107  007C1E  0E00               	movlw	high setup_AD7147@StageBuffer
  1108  007C20  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1109  007C22  EC79  F03B         	call	_write_AD7147	;wreg free
  1110                           
  1111                           ;AD7147.c: 63: StageBuffer[0]=0x3FBF;
  1112  007C26  0E3F               	movlw	63
  1113  007C28  6E34               	movwf	setup_AD7147@StageBuffer+1,c
  1114  007C2A  0EBF               	movlw	191
  1115  007C2C  6E33               	movwf	setup_AD7147@StageBuffer,c
  1116                           
  1117                           ;AD7147.c: 64: StageBuffer[1]=0x1FFF;
  1118  007C2E  0E1F               	movlw	31
  1119  007C30  6E36               	movwf	setup_AD7147@StageBuffer+3,c
  1120  007C32  6835               	setf	setup_AD7147@StageBuffer+2,c
  1121                           
  1122                           ;AD7147.c: 65: StageBuffer[2]=0x0100;
  1123  007C34  0E01               	movlw	1
  1124  007C36  6E38               	movwf	setup_AD7147@StageBuffer+5,c
  1125  007C38  0E00               	movlw	0
  1126  007C3A  6E37               	movwf	setup_AD7147@StageBuffer+4,c
  1127                           
  1128                           ;AD7147.c: 66: StageBuffer[3]=0x2121;
  1129  007C3C  0E21               	movlw	33
  1130  007C3E  6E3A               	movwf	setup_AD7147@StageBuffer+7,c
  1131  007C40  0E21               	movlw	33
  1132  007C42  6E39               	movwf	setup_AD7147@StageBuffer+6,c
  1133                           
  1134                           ;AD7147.c: 67: StageBuffer[4]=4000;
  1135  007C44  0E0F               	movlw	15
  1136  007C46  6E3C               	movwf	setup_AD7147@StageBuffer+9,c
  1137  007C48  0EA0               	movlw	160
  1138  007C4A  6E3B               	movwf	setup_AD7147@StageBuffer+8,c
  1139                           
  1140                           ;AD7147.c: 68: StageBuffer[5]=4000;
  1141  007C4C  0E0F               	movlw	15
  1142  007C4E  6E3E               	movwf	setup_AD7147@StageBuffer+11,c
  1143  007C50  0EA0               	movlw	160
  1144  007C52  6E3D               	movwf	setup_AD7147@StageBuffer+10,c
  1145                           
  1146                           ;AD7147.c: 69: StageBuffer[6]=4250;
  1147  007C54  0E10               	movlw	16
  1148  007C56  6E40               	movwf	setup_AD7147@StageBuffer+13,c
  1149  007C58  0E9A               	movlw	154
  1150  007C5A  6E3F               	movwf	setup_AD7147@StageBuffer+12,c
  1151                           
  1152                           ;AD7147.c: 70: StageBuffer[7]=4250;
  1153  007C5C  0E10               	movlw	16
  1154  007C5E  6E42               	movwf	setup_AD7147@StageBuffer+15,c
  1155  007C60  0E9A               	movlw	154
  1156  007C62  6E41               	movwf	setup_AD7147@StageBuffer+14,c
  1157                           
  1158                           ;AD7147.c: 71: write_AD7147(0x098, 8, StageBuffer);
  1159  007C64  0E00               	movlw	0
  1160  007C66  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1161  007C68  0E98               	movlw	152
  1162  007C6A  6E17               	movwf	write_AD7147@RegisterAddress,c
  1163  007C6C  0E00               	movlw	0
  1164  007C6E  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1165  007C70  0E08               	movlw	8
  1166  007C72  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1167  007C74  0E33               	movlw	low setup_AD7147@StageBuffer
  1168  007C76  6E1B               	movwf	write_AD7147@DataBuffer,c
  1169  007C78  0E00               	movlw	high setup_AD7147@StageBuffer
  1170  007C7A  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1171  007C7C  EC79  F03B         	call	_write_AD7147	;wreg free
  1172                           
  1173                           ;AD7147.c: 76: StageBuffer[0]=0x3EFF;
  1174  007C80  0E3E               	movlw	62
  1175  007C82  6E34               	movwf	setup_AD7147@StageBuffer+1,c
  1176  007C84  6833               	setf	setup_AD7147@StageBuffer,c
  1177                           
  1178                           ;AD7147.c: 77: StageBuffer[1]=0x1FFF;
  1179  007C86  0E1F               	movlw	31
  1180  007C88  6E36               	movwf	setup_AD7147@StageBuffer+3,c
  1181  007C8A  6835               	setf	setup_AD7147@StageBuffer+2,c
  1182                           
  1183                           ;AD7147.c: 78: StageBuffer[2]=0x0100;
  1184  007C8C  0E01               	movlw	1
  1185  007C8E  6E38               	movwf	setup_AD7147@StageBuffer+5,c
  1186  007C90  0E00               	movlw	0
  1187  007C92  6E37               	movwf	setup_AD7147@StageBuffer+4,c
  1188                           
  1189                           ;AD7147.c: 79: StageBuffer[3]=0x2121;
  1190  007C94  0E21               	movlw	33
  1191  007C96  6E3A               	movwf	setup_AD7147@StageBuffer+7,c
  1192  007C98  0E21               	movlw	33
  1193  007C9A  6E39               	movwf	setup_AD7147@StageBuffer+6,c
  1194                           
  1195                           ;AD7147.c: 80: StageBuffer[4]=4000;
  1196  007C9C  0E0F               	movlw	15
  1197  007C9E  6E3C               	movwf	setup_AD7147@StageBuffer+9,c
  1198  007CA0  0EA0               	movlw	160
  1199  007CA2  6E3B               	movwf	setup_AD7147@StageBuffer+8,c
  1200                           
  1201                           ;AD7147.c: 81: StageBuffer[5]=4000;
  1202  007CA4  0E0F               	movlw	15
  1203  007CA6  6E3E               	movwf	setup_AD7147@StageBuffer+11,c
  1204  007CA8  0EA0               	movlw	160
  1205  007CAA  6E3D               	movwf	setup_AD7147@StageBuffer+10,c
  1206                           
  1207                           ;AD7147.c: 82: StageBuffer[6]=4250;
  1208  007CAC  0E10               	movlw	16
  1209  007CAE  6E40               	movwf	setup_AD7147@StageBuffer+13,c
  1210  007CB0  0E9A               	movlw	154
  1211  007CB2  6E3F               	movwf	setup_AD7147@StageBuffer+12,c
  1212                           
  1213                           ;AD7147.c: 83: StageBuffer[7]=4250;
  1214  007CB4  0E10               	movlw	16
  1215  007CB6  6E42               	movwf	setup_AD7147@StageBuffer+15,c
  1216  007CB8  0E9A               	movlw	154
  1217  007CBA  6E41               	movwf	setup_AD7147@StageBuffer+14,c
  1218                           
  1219                           ;AD7147.c: 84: write_AD7147(0x0A0, 8, StageBuffer);
  1220  007CBC  0E00               	movlw	0
  1221  007CBE  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1222  007CC0  0EA0               	movlw	160
  1223  007CC2  6E17               	movwf	write_AD7147@RegisterAddress,c
  1224  007CC4  0E00               	movlw	0
  1225  007CC6  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1226  007CC8  0E08               	movlw	8
  1227  007CCA  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1228  007CCC  0E33               	movlw	low setup_AD7147@StageBuffer
  1229  007CCE  6E1B               	movwf	write_AD7147@DataBuffer,c
  1230  007CD0  0E00               	movlw	high setup_AD7147@StageBuffer
  1231  007CD2  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1232  007CD4  EC79  F03B         	call	_write_AD7147	;wreg free
  1233                           
  1234                           ;AD7147.c: 89: StageBuffer[0]=0x3BFF;
  1235  007CD8  0E3B               	movlw	59
  1236  007CDA  6E34               	movwf	setup_AD7147@StageBuffer+1,c
  1237  007CDC  6833               	setf	setup_AD7147@StageBuffer,c
  1238                           
  1239                           ;AD7147.c: 90: StageBuffer[1]=0x1FFF;
  1240  007CDE  0E1F               	movlw	31
  1241  007CE0  6E36               	movwf	setup_AD7147@StageBuffer+3,c
  1242  007CE2  6835               	setf	setup_AD7147@StageBuffer+2,c
  1243                           
  1244                           ;AD7147.c: 91: StageBuffer[2]=0x0100;
  1245  007CE4  0E01               	movlw	1
  1246  007CE6  6E38               	movwf	setup_AD7147@StageBuffer+5,c
  1247  007CE8  0E00               	movlw	0
  1248  007CEA  6E37               	movwf	setup_AD7147@StageBuffer+4,c
  1249                           
  1250                           ;AD7147.c: 92: StageBuffer[3]=0x2121;
  1251  007CEC  0E21               	movlw	33
  1252  007CEE  6E3A               	movwf	setup_AD7147@StageBuffer+7,c
  1253  007CF0  0E21               	movlw	33
  1254  007CF2  6E39               	movwf	setup_AD7147@StageBuffer+6,c
  1255                           
  1256                           ;AD7147.c: 93: StageBuffer[4]=4000;
  1257  007CF4  0E0F               	movlw	15
  1258  007CF6  6E3C               	movwf	setup_AD7147@StageBuffer+9,c
  1259  007CF8  0EA0               	movlw	160
  1260  007CFA  6E3B               	movwf	setup_AD7147@StageBuffer+8,c
  1261                           
  1262                           ;AD7147.c: 94: StageBuffer[5]=4000;
  1263  007CFC  0E0F               	movlw	15
  1264  007CFE  6E3E               	movwf	setup_AD7147@StageBuffer+11,c
  1265  007D00  0EA0               	movlw	160
  1266  007D02  6E3D               	movwf	setup_AD7147@StageBuffer+10,c
  1267                           
  1268                           ;AD7147.c: 95: StageBuffer[6]=4250;
  1269  007D04  0E10               	movlw	16
  1270  007D06  6E40               	movwf	setup_AD7147@StageBuffer+13,c
  1271  007D08  0E9A               	movlw	154
  1272  007D0A  6E3F               	movwf	setup_AD7147@StageBuffer+12,c
  1273                           
  1274                           ;AD7147.c: 96: StageBuffer[7]=4250;
  1275  007D0C  0E10               	movlw	16
  1276  007D0E  6E42               	movwf	setup_AD7147@StageBuffer+15,c
  1277  007D10  0E9A               	movlw	154
  1278  007D12  6E41               	movwf	setup_AD7147@StageBuffer+14,c
  1279                           
  1280                           ;AD7147.c: 97: write_AD7147(0x0A8, 8, StageBuffer);
  1281  007D14  0E00               	movlw	0
  1282  007D16  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1283  007D18  0EA8               	movlw	168
  1284  007D1A  6E17               	movwf	write_AD7147@RegisterAddress,c
  1285  007D1C  0E00               	movlw	0
  1286  007D1E  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1287  007D20  0E08               	movlw	8
  1288  007D22  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1289  007D24  0E33               	movlw	low setup_AD7147@StageBuffer
  1290  007D26  6E1B               	movwf	write_AD7147@DataBuffer,c
  1291  007D28  0E00               	movlw	high setup_AD7147@StageBuffer
  1292  007D2A  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1293  007D2C  EC79  F03B         	call	_write_AD7147	;wreg free
  1294                           
  1295                           ;AD7147.c: 102: StageBuffer[0]=0x2FFF;
  1296  007D30  0E2F               	movlw	47
  1297  007D32  6E34               	movwf	setup_AD7147@StageBuffer+1,c
  1298  007D34  6833               	setf	setup_AD7147@StageBuffer,c
  1299                           
  1300                           ;AD7147.c: 103: StageBuffer[1]=0x1FFF;
  1301  007D36  0E1F               	movlw	31
  1302  007D38  6E36               	movwf	setup_AD7147@StageBuffer+3,c
  1303  007D3A  6835               	setf	setup_AD7147@StageBuffer+2,c
  1304                           
  1305                           ;AD7147.c: 104: StageBuffer[2]=0x0100;
  1306  007D3C  0E01               	movlw	1
  1307  007D3E  6E38               	movwf	setup_AD7147@StageBuffer+5,c
  1308  007D40  0E00               	movlw	0
  1309  007D42  6E37               	movwf	setup_AD7147@StageBuffer+4,c
  1310                           
  1311                           ;AD7147.c: 105: StageBuffer[3]=0x2121;
  1312  007D44  0E21               	movlw	33
  1313  007D46  6E3A               	movwf	setup_AD7147@StageBuffer+7,c
  1314  007D48  0E21               	movlw	33
  1315  007D4A  6E39               	movwf	setup_AD7147@StageBuffer+6,c
  1316                           
  1317                           ;AD7147.c: 106: StageBuffer[4]=4000;
  1318  007D4C  0E0F               	movlw	15
  1319  007D4E  6E3C               	movwf	setup_AD7147@StageBuffer+9,c
  1320  007D50  0EA0               	movlw	160
  1321  007D52  6E3B               	movwf	setup_AD7147@StageBuffer+8,c
  1322                           
  1323                           ;AD7147.c: 107: StageBuffer[5]=4000;
  1324  007D54  0E0F               	movlw	15
  1325  007D56  6E3E               	movwf	setup_AD7147@StageBuffer+11,c
  1326  007D58  0EA0               	movlw	160
  1327  007D5A  6E3D               	movwf	setup_AD7147@StageBuffer+10,c
  1328                           
  1329                           ;AD7147.c: 108: StageBuffer[6]=4250;
  1330  007D5C  0E10               	movlw	16
  1331  007D5E  6E40               	movwf	setup_AD7147@StageBuffer+13,c
  1332  007D60  0E9A               	movlw	154
  1333  007D62  6E3F               	movwf	setup_AD7147@StageBuffer+12,c
  1334                           
  1335                           ;AD7147.c: 109: StageBuffer[7]=4250;
  1336  007D64  0E10               	movlw	16
  1337  007D66  6E42               	movwf	setup_AD7147@StageBuffer+15,c
  1338  007D68  0E9A               	movlw	154
  1339  007D6A  6E41               	movwf	setup_AD7147@StageBuffer+14,c
  1340                           
  1341                           ;AD7147.c: 110: write_AD7147(0x0B0, 8, StageBuffer);
  1342  007D6C  0E00               	movlw	0
  1343  007D6E  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1344  007D70  0EB0               	movlw	176
  1345  007D72  6E17               	movwf	write_AD7147@RegisterAddress,c
  1346  007D74  0E00               	movlw	0
  1347  007D76  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1348  007D78  0E08               	movlw	8
  1349  007D7A  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1350  007D7C  0E33               	movlw	low setup_AD7147@StageBuffer
  1351  007D7E  6E1B               	movwf	write_AD7147@DataBuffer,c
  1352  007D80  0E00               	movlw	high setup_AD7147@StageBuffer
  1353  007D82  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1354  007D84  EC79  F03B         	call	_write_AD7147	;wreg free
  1355                           
  1356                           ;AD7147.c: 115: StageBuffer[0]=0x3FFF;
  1357  007D88  0E3F               	movlw	63
  1358  007D8A  6E34               	movwf	setup_AD7147@StageBuffer+1,c
  1359  007D8C  6833               	setf	setup_AD7147@StageBuffer,c
  1360                           
  1361                           ;AD7147.c: 116: StageBuffer[1]=0x1FFE;
  1362  007D8E  0E1F               	movlw	31
  1363  007D90  6E36               	movwf	setup_AD7147@StageBuffer+3,c
  1364  007D92  0EFE               	movlw	254
  1365  007D94  6E35               	movwf	setup_AD7147@StageBuffer+2,c
  1366                           
  1367                           ;AD7147.c: 117: StageBuffer[2]=0x0100;
  1368  007D96  0E01               	movlw	1
  1369  007D98  6E38               	movwf	setup_AD7147@StageBuffer+5,c
  1370  007D9A  0E00               	movlw	0
  1371  007D9C  6E37               	movwf	setup_AD7147@StageBuffer+4,c
  1372                           
  1373                           ;AD7147.c: 118: StageBuffer[3]=0x2121;
  1374  007D9E  0E21               	movlw	33
  1375  007DA0  6E3A               	movwf	setup_AD7147@StageBuffer+7,c
  1376  007DA2  0E21               	movlw	33
  1377  007DA4  6E39               	movwf	setup_AD7147@StageBuffer+6,c
  1378                           
  1379                           ;AD7147.c: 119: StageBuffer[4]=4000;
  1380  007DA6  0E0F               	movlw	15
  1381  007DA8  6E3C               	movwf	setup_AD7147@StageBuffer+9,c
  1382  007DAA  0EA0               	movlw	160
  1383  007DAC  6E3B               	movwf	setup_AD7147@StageBuffer+8,c
  1384                           
  1385                           ;AD7147.c: 120: StageBuffer[5]=4000;
  1386  007DAE  0E0F               	movlw	15
  1387  007DB0  6E3E               	movwf	setup_AD7147@StageBuffer+11,c
  1388  007DB2  0EA0               	movlw	160
  1389  007DB4  6E3D               	movwf	setup_AD7147@StageBuffer+10,c
  1390                           
  1391                           ;AD7147.c: 121: StageBuffer[6]=4250;
  1392  007DB6  0E10               	movlw	16
  1393  007DB8  6E40               	movwf	setup_AD7147@StageBuffer+13,c
  1394  007DBA  0E9A               	movlw	154
  1395  007DBC  6E3F               	movwf	setup_AD7147@StageBuffer+12,c
  1396                           
  1397                           ;AD7147.c: 122: StageBuffer[7]=4250;
  1398  007DBE  0E10               	movlw	16
  1399  007DC0  6E42               	movwf	setup_AD7147@StageBuffer+15,c
  1400  007DC2  0E9A               	movlw	154
  1401  007DC4  6E41               	movwf	setup_AD7147@StageBuffer+14,c
  1402                           
  1403                           ;AD7147.c: 123: write_AD7147(0x0B8, 8, StageBuffer);
  1404  007DC6  0E00               	movlw	0
  1405  007DC8  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1406  007DCA  0EB8               	movlw	184
  1407  007DCC  6E17               	movwf	write_AD7147@RegisterAddress,c
  1408  007DCE  0E00               	movlw	0
  1409  007DD0  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1410  007DD2  0E08               	movlw	8
  1411  007DD4  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1412  007DD6  0E33               	movlw	low setup_AD7147@StageBuffer
  1413  007DD8  6E1B               	movwf	write_AD7147@DataBuffer,c
  1414  007DDA  0E00               	movlw	high setup_AD7147@StageBuffer
  1415  007DDC  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1416  007DDE  EC79  F03B         	call	_write_AD7147	;wreg free
  1417                           
  1418                           ;AD7147.c: 128: StageBuffer[0]=0x3FFF;
  1419  007DE2  0E3F               	movlw	63
  1420  007DE4  6E34               	movwf	setup_AD7147@StageBuffer+1,c
  1421  007DE6  6833               	setf	setup_AD7147@StageBuffer,c
  1422                           
  1423                           ;AD7147.c: 129: StageBuffer[1]=0x1FFB;
  1424  007DE8  0E1F               	movlw	31
  1425  007DEA  6E36               	movwf	setup_AD7147@StageBuffer+3,c
  1426  007DEC  0EFB               	movlw	251
  1427  007DEE  6E35               	movwf	setup_AD7147@StageBuffer+2,c
  1428                           
  1429                           ;AD7147.c: 130: StageBuffer[2]=0x0100;
  1430  007DF0  0E01               	movlw	1
  1431  007DF2  6E38               	movwf	setup_AD7147@StageBuffer+5,c
  1432  007DF4  0E00               	movlw	0
  1433  007DF6  6E37               	movwf	setup_AD7147@StageBuffer+4,c
  1434                           
  1435                           ;AD7147.c: 131: StageBuffer[3]=0x2121;
  1436  007DF8  0E21               	movlw	33
  1437  007DFA  6E3A               	movwf	setup_AD7147@StageBuffer+7,c
  1438  007DFC  0E21               	movlw	33
  1439  007DFE  6E39               	movwf	setup_AD7147@StageBuffer+6,c
  1440                           
  1441                           ;AD7147.c: 132: StageBuffer[4]=4000;
  1442  007E00  0E0F               	movlw	15
  1443  007E02  6E3C               	movwf	setup_AD7147@StageBuffer+9,c
  1444  007E04  0EA0               	movlw	160
  1445  007E06  6E3B               	movwf	setup_AD7147@StageBuffer+8,c
  1446                           
  1447                           ;AD7147.c: 133: StageBuffer[5]=4000;
  1448  007E08  0E0F               	movlw	15
  1449  007E0A  6E3E               	movwf	setup_AD7147@StageBuffer+11,c
  1450  007E0C  0EA0               	movlw	160
  1451  007E0E  6E3D               	movwf	setup_AD7147@StageBuffer+10,c
  1452                           
  1453                           ;AD7147.c: 134: StageBuffer[6]=4250;
  1454  007E10  0E10               	movlw	16
  1455  007E12  6E40               	movwf	setup_AD7147@StageBuffer+13,c
  1456  007E14  0E9A               	movlw	154
  1457  007E16  6E3F               	movwf	setup_AD7147@StageBuffer+12,c
  1458                           
  1459                           ;AD7147.c: 135: StageBuffer[7]=4250;
  1460  007E18  0E10               	movlw	16
  1461  007E1A  6E42               	movwf	setup_AD7147@StageBuffer+15,c
  1462  007E1C  0E9A               	movlw	154
  1463  007E1E  6E41               	movwf	setup_AD7147@StageBuffer+14,c
  1464                           
  1465                           ;AD7147.c: 136: write_AD7147(0x0C0, 8, StageBuffer);
  1466  007E20  0E00               	movlw	0
  1467  007E22  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1468  007E24  0EC0               	movlw	192
  1469  007E26  6E17               	movwf	write_AD7147@RegisterAddress,c
  1470  007E28  0E00               	movlw	0
  1471  007E2A  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1472  007E2C  0E08               	movlw	8
  1473  007E2E  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1474  007E30  0E33               	movlw	low setup_AD7147@StageBuffer
  1475  007E32  6E1B               	movwf	write_AD7147@DataBuffer,c
  1476  007E34  0E00               	movlw	high setup_AD7147@StageBuffer
  1477  007E36  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1478  007E38  EC79  F03B         	call	_write_AD7147	;wreg free
  1479                           
  1480                           ;AD7147.c: 141: StageBuffer[0]=0x3FFF;
  1481  007E3C  0E3F               	movlw	63
  1482  007E3E  6E34               	movwf	setup_AD7147@StageBuffer+1,c
  1483  007E40  6833               	setf	setup_AD7147@StageBuffer,c
  1484                           
  1485                           ;AD7147.c: 142: StageBuffer[1]=0x1FEF;
  1486  007E42  0E1F               	movlw	31
  1487  007E44  6E36               	movwf	setup_AD7147@StageBuffer+3,c
  1488  007E46  0EEF               	movlw	239
  1489  007E48  6E35               	movwf	setup_AD7147@StageBuffer+2,c
  1490                           
  1491                           ;AD7147.c: 143: StageBuffer[2]=0x0100;
  1492  007E4A  0E01               	movlw	1
  1493  007E4C  6E38               	movwf	setup_AD7147@StageBuffer+5,c
  1494  007E4E  0E00               	movlw	0
  1495  007E50  6E37               	movwf	setup_AD7147@StageBuffer+4,c
  1496                           
  1497                           ;AD7147.c: 144: StageBuffer[3]=0x2121;
  1498  007E52  0E21               	movlw	33
  1499  007E54  6E3A               	movwf	setup_AD7147@StageBuffer+7,c
  1500  007E56  0E21               	movlw	33
  1501  007E58  6E39               	movwf	setup_AD7147@StageBuffer+6,c
  1502                           
  1503                           ;AD7147.c: 145: StageBuffer[4]=4000;
  1504  007E5A  0E0F               	movlw	15
  1505  007E5C  6E3C               	movwf	setup_AD7147@StageBuffer+9,c
  1506  007E5E  0EA0               	movlw	160
  1507  007E60  6E3B               	movwf	setup_AD7147@StageBuffer+8,c
  1508                           
  1509                           ;AD7147.c: 146: StageBuffer[5]=4000;
  1510  007E62  0E0F               	movlw	15
  1511  007E64  6E3E               	movwf	setup_AD7147@StageBuffer+11,c
  1512  007E66  0EA0               	movlw	160
  1513  007E68  6E3D               	movwf	setup_AD7147@StageBuffer+10,c
  1514                           
  1515                           ;AD7147.c: 147: StageBuffer[6]=4250;
  1516  007E6A  0E10               	movlw	16
  1517  007E6C  6E40               	movwf	setup_AD7147@StageBuffer+13,c
  1518  007E6E  0E9A               	movlw	154
  1519  007E70  6E3F               	movwf	setup_AD7147@StageBuffer+12,c
  1520                           
  1521                           ;AD7147.c: 148: StageBuffer[7]=4250;
  1522  007E72  0E10               	movlw	16
  1523  007E74  6E42               	movwf	setup_AD7147@StageBuffer+15,c
  1524  007E76  0E9A               	movlw	154
  1525  007E78  6E41               	movwf	setup_AD7147@StageBuffer+14,c
  1526                           
  1527                           ;AD7147.c: 149: write_AD7147(0x0C8, 8, StageBuffer);
  1528  007E7A  0E00               	movlw	0
  1529  007E7C  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1530  007E7E  0EC8               	movlw	200
  1531  007E80  6E17               	movwf	write_AD7147@RegisterAddress,c
  1532  007E82  0E00               	movlw	0
  1533  007E84  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1534  007E86  0E08               	movlw	8
  1535  007E88  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1536  007E8A  0E33               	movlw	low setup_AD7147@StageBuffer
  1537  007E8C  6E1B               	movwf	write_AD7147@DataBuffer,c
  1538  007E8E  0E00               	movlw	high setup_AD7147@StageBuffer
  1539  007E90  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1540  007E92  EC79  F03B         	call	_write_AD7147	;wreg free
  1541                           
  1542                           ;AD7147.c: 154: StageBuffer[0]=0x3FFF;
  1543  007E96  0E3F               	movlw	63
  1544  007E98  6E34               	movwf	setup_AD7147@StageBuffer+1,c
  1545  007E9A  6833               	setf	setup_AD7147@StageBuffer,c
  1546                           
  1547                           ;AD7147.c: 155: StageBuffer[1]=0x1FBF;
  1548  007E9C  0E1F               	movlw	31
  1549  007E9E  6E36               	movwf	setup_AD7147@StageBuffer+3,c
  1550  007EA0  0EBF               	movlw	191
  1551  007EA2  6E35               	movwf	setup_AD7147@StageBuffer+2,c
  1552                           
  1553                           ;AD7147.c: 156: StageBuffer[2]=0x0100;
  1554  007EA4  0E01               	movlw	1
  1555  007EA6  6E38               	movwf	setup_AD7147@StageBuffer+5,c
  1556  007EA8  0E00               	movlw	0
  1557  007EAA  6E37               	movwf	setup_AD7147@StageBuffer+4,c
  1558                           
  1559                           ;AD7147.c: 157: StageBuffer[3]=0x2121;
  1560  007EAC  0E21               	movlw	33
  1561  007EAE  6E3A               	movwf	setup_AD7147@StageBuffer+7,c
  1562  007EB0  0E21               	movlw	33
  1563  007EB2  6E39               	movwf	setup_AD7147@StageBuffer+6,c
  1564                           
  1565                           ;AD7147.c: 158: StageBuffer[4]=4000;
  1566  007EB4  0E0F               	movlw	15
  1567  007EB6  6E3C               	movwf	setup_AD7147@StageBuffer+9,c
  1568  007EB8  0EA0               	movlw	160
  1569  007EBA  6E3B               	movwf	setup_AD7147@StageBuffer+8,c
  1570                           
  1571                           ;AD7147.c: 159: StageBuffer[5]=4000;
  1572  007EBC  0E0F               	movlw	15
  1573  007EBE  6E3E               	movwf	setup_AD7147@StageBuffer+11,c
  1574  007EC0  0EA0               	movlw	160
  1575  007EC2  6E3D               	movwf	setup_AD7147@StageBuffer+10,c
  1576                           
  1577                           ;AD7147.c: 160: StageBuffer[6]=4250;
  1578  007EC4  0E10               	movlw	16
  1579  007EC6  6E40               	movwf	setup_AD7147@StageBuffer+13,c
  1580  007EC8  0E9A               	movlw	154
  1581  007ECA  6E3F               	movwf	setup_AD7147@StageBuffer+12,c
  1582                           
  1583                           ;AD7147.c: 161: StageBuffer[7]=4250;
  1584  007ECC  0E10               	movlw	16
  1585  007ECE  6E42               	movwf	setup_AD7147@StageBuffer+15,c
  1586  007ED0  0E9A               	movlw	154
  1587  007ED2  6E41               	movwf	setup_AD7147@StageBuffer+14,c
  1588                           
  1589                           ;AD7147.c: 162: write_AD7147(0x0D0, 8, StageBuffer);
  1590  007ED4  0E00               	movlw	0
  1591  007ED6  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1592  007ED8  0ED0               	movlw	208
  1593  007EDA  6E17               	movwf	write_AD7147@RegisterAddress,c
  1594  007EDC  0E00               	movlw	0
  1595  007EDE  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1596  007EE0  0E08               	movlw	8
  1597  007EE2  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1598  007EE4  0E33               	movlw	low setup_AD7147@StageBuffer
  1599  007EE6  6E1B               	movwf	write_AD7147@DataBuffer,c
  1600  007EE8  0E00               	movlw	high setup_AD7147@StageBuffer
  1601  007EEA  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1602  007EEC  EC79  F03B         	call	_write_AD7147	;wreg free
  1603                           
  1604                           ;AD7147.c: 167: StageBuffer[0]=0x3FFF;
  1605  007EF0  0E3F               	movlw	63
  1606  007EF2  6E34               	movwf	setup_AD7147@StageBuffer+1,c
  1607  007EF4  6833               	setf	setup_AD7147@StageBuffer,c
  1608                           
  1609                           ;AD7147.c: 168: StageBuffer[1]=0x1EFF;
  1610  007EF6  0E1E               	movlw	30
  1611  007EF8  6E36               	movwf	setup_AD7147@StageBuffer+3,c
  1612  007EFA  6835               	setf	setup_AD7147@StageBuffer+2,c
  1613                           
  1614                           ;AD7147.c: 169: StageBuffer[2]=0x0100;
  1615  007EFC  0E01               	movlw	1
  1616  007EFE  6E38               	movwf	setup_AD7147@StageBuffer+5,c
  1617  007F00  0E00               	movlw	0
  1618  007F02  6E37               	movwf	setup_AD7147@StageBuffer+4,c
  1619                           
  1620                           ;AD7147.c: 170: StageBuffer[3]=0x2121;
  1621  007F04  0E21               	movlw	33
  1622  007F06  6E3A               	movwf	setup_AD7147@StageBuffer+7,c
  1623  007F08  0E21               	movlw	33
  1624  007F0A  6E39               	movwf	setup_AD7147@StageBuffer+6,c
  1625                           
  1626                           ;AD7147.c: 171: StageBuffer[4]=4000;
  1627  007F0C  0E0F               	movlw	15
  1628  007F0E  6E3C               	movwf	setup_AD7147@StageBuffer+9,c
  1629  007F10  0EA0               	movlw	160
  1630  007F12  6E3B               	movwf	setup_AD7147@StageBuffer+8,c
  1631                           
  1632                           ;AD7147.c: 172: StageBuffer[5]=4000;
  1633  007F14  0E0F               	movlw	15
  1634  007F16  6E3E               	movwf	setup_AD7147@StageBuffer+11,c
  1635  007F18  0EA0               	movlw	160
  1636  007F1A  6E3D               	movwf	setup_AD7147@StageBuffer+10,c
  1637                           
  1638                           ;AD7147.c: 173: StageBuffer[6]=4250;
  1639  007F1C  0E10               	movlw	16
  1640  007F1E  6E40               	movwf	setup_AD7147@StageBuffer+13,c
  1641  007F20  0E9A               	movlw	154
  1642  007F22  6E3F               	movwf	setup_AD7147@StageBuffer+12,c
  1643                           
  1644                           ;AD7147.c: 174: StageBuffer[7]=4250;
  1645  007F24  0E10               	movlw	16
  1646  007F26  6E42               	movwf	setup_AD7147@StageBuffer+15,c
  1647  007F28  0E9A               	movlw	154
  1648  007F2A  6E41               	movwf	setup_AD7147@StageBuffer+14,c
  1649                           
  1650                           ;AD7147.c: 175: write_AD7147(0x0D8, 8, StageBuffer);
  1651  007F2C  0E00               	movlw	0
  1652  007F2E  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1653  007F30  0ED8               	movlw	216
  1654  007F32  6E17               	movwf	write_AD7147@RegisterAddress,c
  1655  007F34  0E00               	movlw	0
  1656  007F36  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1657  007F38  0E08               	movlw	8
  1658  007F3A  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1659  007F3C  0E33               	movlw	low setup_AD7147@StageBuffer
  1660  007F3E  6E1B               	movwf	write_AD7147@DataBuffer,c
  1661  007F40  0E00               	movlw	high setup_AD7147@StageBuffer
  1662  007F42  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1663  007F44  EC79  F03B         	call	_write_AD7147	;wreg free
  1664                           
  1665                           ;AD7147.c: 181: unsigned int AD7147Registers[8];
  1666                           ;AD7147.c: 182: AD7147Registers[0] = 0x02B2;
  1667  007F48  0E02               	movlw	2
  1668  007F4A  6E24               	movwf	setup_AD7147@AD7147Registers+1,c
  1669  007F4C  0EB2               	movlw	178
  1670  007F4E  6E23               	movwf	setup_AD7147@AD7147Registers,c
  1671                           
  1672                           ;AD7147.c: 183: AD7147Registers[1] = 0x0000;
  1673  007F50  0E00               	movlw	0
  1674  007F52  6E26               	movwf	setup_AD7147@AD7147Registers+3,c
  1675  007F54  0E00               	movlw	0
  1676  007F56  6E25               	movwf	setup_AD7147@AD7147Registers+2,c
  1677                           
  1678                           ;AD7147.c: 184: AD7147Registers[2] = 0x3230;
  1679  007F58  0E32               	movlw	50
  1680  007F5A  6E28               	movwf	setup_AD7147@AD7147Registers+5,c
  1681  007F5C  0E30               	movlw	48
  1682  007F5E  6E27               	movwf	setup_AD7147@AD7147Registers+4,c
  1683                           
  1684                           ;AD7147.c: 185: AD7147Registers[3] = 0x0419;
  1685  007F60  0E04               	movlw	4
  1686  007F62  6E2A               	movwf	setup_AD7147@AD7147Registers+7,c
  1687  007F64  0E19               	movlw	25
  1688  007F66  6E29               	movwf	setup_AD7147@AD7147Registers+6,c
  1689                           
  1690                           ;AD7147.c: 186: AD7147Registers[4] = 0x0832;
  1691  007F68  0E08               	movlw	8
  1692  007F6A  6E2C               	movwf	setup_AD7147@AD7147Registers+9,c
  1693  007F6C  0E32               	movlw	50
  1694  007F6E  6E2B               	movwf	setup_AD7147@AD7147Registers+8,c
  1695                           
  1696                           ;AD7147.c: 187: AD7147Registers[5] = 0x0000;
  1697  007F70  0E00               	movlw	0
  1698  007F72  6E2E               	movwf	setup_AD7147@AD7147Registers+11,c
  1699  007F74  0E00               	movlw	0
  1700  007F76  6E2D               	movwf	setup_AD7147@AD7147Registers+10,c
  1701                           
  1702                           ;AD7147.c: 188: AD7147Registers[6] = 0x0000;
  1703  007F78  0E00               	movlw	0
  1704  007F7A  6E30               	movwf	setup_AD7147@AD7147Registers+13,c
  1705  007F7C  0E00               	movlw	0
  1706  007F7E  6E2F               	movwf	setup_AD7147@AD7147Registers+12,c
  1707                           
  1708                           ;AD7147.c: 189: AD7147Registers[7] = 0x0000;
  1709  007F80  0E00               	movlw	0
  1710  007F82  6E32               	movwf	setup_AD7147@AD7147Registers+15,c
  1711  007F84  0E00               	movlw	0
  1712  007F86  6E31               	movwf	setup_AD7147@AD7147Registers+14,c
  1713                           
  1714                           ;AD7147.c: 190: write_AD7147(0x000, 8, AD7147Registers);
  1715  007F88  0E00               	movlw	0
  1716  007F8A  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1717  007F8C  0E00               	movlw	0
  1718  007F8E  6E17               	movwf	write_AD7147@RegisterAddress,c
  1719  007F90  0E00               	movlw	0
  1720  007F92  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1721  007F94  0E08               	movlw	8
  1722  007F96  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1723  007F98  0E23               	movlw	low setup_AD7147@AD7147Registers
  1724  007F9A  6E1B               	movwf	write_AD7147@DataBuffer,c
  1725  007F9C  0E00               	movlw	high setup_AD7147@AD7147Registers
  1726  007F9E  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1727  007FA0  EC79  F03B         	call	_write_AD7147	;wreg free
  1728                           
  1729                           ;AD7147.c: 193: AD7147Registers[1] = 0x0FFF;
  1730  007FA4  0E0F               	movlw	15
  1731  007FA6  6E26               	movwf	setup_AD7147@AD7147Registers+3,c
  1732  007FA8  6825               	setf	setup_AD7147@AD7147Registers+2,c
  1733                           
  1734                           ;AD7147.c: 194: write_AD7147(0x001, 1, AD7147Registers[1]);
  1735  007FAA  0E00               	movlw	0
  1736  007FAC  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1737  007FAE  0E01               	movlw	1
  1738  007FB0  6E17               	movwf	write_AD7147@RegisterAddress,c
  1739  007FB2  0E00               	movlw	0
  1740  007FB4  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1741  007FB6  0E01               	movlw	1
  1742  007FB8  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1743  007FBA  C025  F01B         	movff	setup_AD7147@AD7147Registers+2,write_AD7147@DataBuffer
  1744  007FBE  C026  F01C         	movff	setup_AD7147@AD7147Registers+3,write_AD7147@DataBuffer+1
  1745  007FC2  EC79  F03B         	call	_write_AD7147	;wreg free
  1746                           
  1747                           ;AD7147.c: 196: AD7147Registers[0] = 0x0200;
  1748  007FC6  0E02               	movlw	2
  1749  007FC8  6E24               	movwf	setup_AD7147@AD7147Registers+1,c
  1750  007FCA  0E00               	movlw	0
  1751  007FCC  6E23               	movwf	setup_AD7147@AD7147Registers,c
  1752                           
  1753                           ;AD7147.c: 197: write_AD7147(0x000, 1, AD7147Registers[1]);
  1754  007FCE  0E00               	movlw	0
  1755  007FD0  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1756  007FD2  0E00               	movlw	0
  1757  007FD4  6E17               	movwf	write_AD7147@RegisterAddress,c
  1758  007FD6  0E00               	movlw	0
  1759  007FD8  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1760  007FDA  0E01               	movlw	1
  1761  007FDC  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1762  007FDE  C025  F01B         	movff	setup_AD7147@AD7147Registers+2,write_AD7147@DataBuffer
  1763  007FE2  C026  F01C         	movff	setup_AD7147@AD7147Registers+3,write_AD7147@DataBuffer+1
  1764  007FE6  EC79  F03B         	call	_write_AD7147	;wreg free
  1765                           
  1766                           ;AD7147.c: 202: get_CDC(cdc,1);
  1767  007FEA  C021  F001         	movff	setup_AD7147@cdc,get_CDC@cdc
  1768  007FEE  C022  F002         	movff	setup_AD7147@cdc+1,get_CDC@cdc+1
  1769  007FF2  0E00               	movlw	0
  1770  007FF4  6E04               	movwf	get_CDC@state+1,c
  1771  007FF6  0E01               	movlw	1
  1772  007FF8  6E03               	movwf	get_CDC@state,c
  1773  007FFA  EC27  F03B         	call	_get_CDC	;wreg free
  1774  007FFE  0012               	return		;funcret
  1775  008000                     __end_of_setup_AD7147:
  1776                           	opt stack 0
  1777                           postinc0	equ	0xFEE
  1778                           wreg	equ	0xFE8
  1779                           status	equ	0xFD8
  1780                           
  1781 ;; *************** function _write_AD7147 *****************
  1782 ;; Defined at:
  1783 ;;		line 205 in file "AD7147.c"
  1784 ;; Parameters:    Size  Location     Type
  1785 ;;  RegisterAddr    2   22[COMRAM] unsigned int 
  1786 ;;  NumberOfRegi    2   24[COMRAM] unsigned int 
  1787 ;;  DataBuffer      2   26[COMRAM] PTR unsigned int 
  1788 ;;		 -> RAM(3648), setup_AD7147@AD7147Registers(16), setup_AD7147@StageBuffer(16), 
  1789 ;; Auto vars:     Size  Location     Type
  1790 ;;  i               2   30[COMRAM] int 
  1791 ;;  Register_Val    2   28[COMRAM] unsigned int 
  1792 ;; Return value:  Size  Location     Type
  1793 ;;                  1    wreg      void 
  1794 ;; Registers used:
  1795 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1796 ;; Tracked objects:
  1797 ;;		On entry : 0/0
  1798 ;;		On exit  : 0/0
  1799 ;;		Unchanged: 0/0
  1800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1801 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1802 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1804 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1805 ;;Total ram usage:       10 bytes
  1806 ;; Hardware stack levels used:    1
  1807 ;; Hardware stack levels required when called:    1
  1808 ;; This function calls:
  1809 ;;		_w32_spi
  1810 ;; This function is called by:
  1811 ;;		_setup_AD7147
  1812 ;; This function uses a non-reentrant model
  1813 ;;
  1814                           
  1815                           	psect	text8
  1816  0076F2                     __ptext8:
  1817                           	opt stack 0
  1818  0076F2                     _write_AD7147:
  1819                           	opt stack 28
  1820                           
  1821                           ;AD7147.c: 207: unsigned int Register_Values= 0xE000 + RegisterAddress;
  1822                           
  1823                           ;incstack = 0
  1824  0076F2  0E00               	movlw	0
  1825  0076F4  2417               	addwf	write_AD7147@RegisterAddress,w,c
  1826  0076F6  6E1D               	movwf	write_AD7147@Register_Values,c
  1827  0076F8  0EE0               	movlw	224
  1828  0076FA  2018               	addwfc	write_AD7147@RegisterAddress+1,w,c
  1829  0076FC  6E1E               	movwf	write_AD7147@Register_Values+1,c
  1830                           
  1831                           ;AD7147.c: 209: for (int i=0; i<NumberOfRegisters; i++)
  1832  0076FE  0E00               	movlw	0
  1833  007700  6E20               	movwf	write_AD7147@i+1,c
  1834  007702  0E00               	movlw	0
  1835  007704  6E1F               	movwf	write_AD7147@i,c
  1836  007706  D017               	goto	l1547
  1837  007708                     l1543:
  1838                           
  1839                           ;AD7147.c: 210: {
  1840                           ;AD7147.c: 213: w32_spi((Register_Values+i),DataBuffer[i]);
  1841  007708  501D               	movf	write_AD7147@Register_Values,w,c
  1842  00770A  241F               	addwf	write_AD7147@i,w,c
  1843  00770C  6E01               	movwf	w32_spi@address,c
  1844  00770E  501E               	movf	write_AD7147@Register_Values+1,w,c
  1845  007710  2020               	addwfc	write_AD7147@i+1,w,c
  1846  007712  6E02               	movwf	w32_spi@address+1,c
  1847  007714  90D8               	bcf	status,0,c
  1848  007716  341F               	rlcf	write_AD7147@i,w,c
  1849  007718  6ED9               	movwf	fsr2l,c
  1850  00771A  3420               	rlcf	write_AD7147@i+1,w,c
  1851  00771C  6EDA               	movwf	fsr2h,c
  1852  00771E  501B               	movf	write_AD7147@DataBuffer,w,c
  1853  007720  26D9               	addwf	fsr2l,f,c
  1854  007722  501C               	movf	write_AD7147@DataBuffer+1,w,c
  1855  007724  22DA               	addwfc	fsr2h,f,c
  1856  007726  CFDE F003          	movff	postinc2,w32_spi@data
  1857  00772A  CFDD F004          	movff	postdec2,w32_spi@data+1
  1858  00772E  ECCE  F03B         	call	_w32_spi	;wreg free
  1859  007732  4A1F               	infsnz	write_AD7147@i,f,c
  1860  007734  2A20               	incf	write_AD7147@i+1,f,c
  1861  007736                     l1547:
  1862  007736  5019               	movf	write_AD7147@NumberOfRegisters,w,c
  1863  007738  5C1F               	subwf	write_AD7147@i,w,c
  1864  00773A  501A               	movf	write_AD7147@NumberOfRegisters+1,w,c
  1865  00773C  5820               	subwfb	write_AD7147@i+1,w,c
  1866  00773E  B0D8               	btfsc	status,0,c
  1867  007740  0012               	return	
  1868  007742  D7E2               	goto	l1543
  1869  007744                     __end_of_write_AD7147:
  1870                           	opt stack 0
  1871                           postinc0	equ	0xFEE
  1872                           wreg	equ	0xFE8
  1873                           postinc2	equ	0xFDE
  1874                           postdec2	equ	0xFDD
  1875                           fsr2h	equ	0xFDA
  1876                           fsr2l	equ	0xFD9
  1877                           status	equ	0xFD8
  1878                           
  1879 ;; *************** function _read_sensor *****************
  1880 ;; Defined at:
  1881 ;;		line 232 in file "AD7147.c"
  1882 ;; Parameters:    Size  Location     Type
  1883 ;;  sensor          2   22[COMRAM] unsigned int 
  1884 ;; Auto vars:     Size  Location     Type
  1885 ;;  sensor_value    2   26[COMRAM] unsigned int 
  1886 ;;  register1       2   24[COMRAM] unsigned int 
  1887 ;; Return value:  Size  Location     Type
  1888 ;;                  2   22[COMRAM] unsigned int 
  1889 ;; Registers used:
  1890 ;;		wreg, status,2, status,0, cstack
  1891 ;; Tracked objects:
  1892 ;;		On entry : 0/0
  1893 ;;		On exit  : 0/0
  1894 ;;		Unchanged: 0/0
  1895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1896 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1897 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1899 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1900 ;;Total ram usage:        6 bytes
  1901 ;; Hardware stack levels used:    1
  1902 ;; Hardware stack levels required when called:    2
  1903 ;; This function calls:
  1904 ;;		_sensor_cdc
  1905 ;;		_w16_r16_spi
  1906 ;; This function is called by:
  1907 ;;		_main
  1908 ;; This function uses a non-reentrant model
  1909 ;;
  1910                           
  1911                           	psect	text9
  1912  00780A                     __ptext9:
  1913                           	opt stack 0
  1914  00780A                     _read_sensor:
  1915                           	opt stack 28
  1916                           
  1917                           ;AD7147.c: 234: if ((sensor > 12) && (sensor != 25))
  1918                           
  1919                           ;incstack = 0
  1920  00780A  5018               	movf	read_sensor@sensor+1,w,c
  1921  00780C  E104               	bnz	u730
  1922  00780E  0E0D               	movlw	13
  1923  007810  5C17               	subwf	read_sensor@sensor,w,c
  1924  007812  A0D8               	btfss	status,0,c
  1925  007814  D00B               	goto	l38
  1926  007816                     u730:
  1927  007816  0E19               	movlw	25
  1928  007818  1817               	xorwf	read_sensor@sensor,w,c
  1929  00781A  1018               	iorwf	read_sensor@sensor+1,w,c
  1930  00781C  B4D8               	btfsc	status,2,c
  1931  00781E  D006               	goto	l38
  1932                           
  1933                           ;AD7147.c: 235: {
  1934                           ;AD7147.c: 236: sensor = sensor - 12;
  1935  007820  0EF4               	movlw	244
  1936  007822  2417               	addwf	read_sensor@sensor,w,c
  1937  007824  6E17               	movwf	read_sensor@sensor,c
  1938  007826  0EFF               	movlw	255
  1939  007828  2018               	addwfc	read_sensor@sensor+1,w,c
  1940  00782A  6E18               	movwf	read_sensor@sensor+1,c
  1941  00782C                     l38:
  1942                           
  1943                           ;AD7147.c: 237: }
  1944                           ;AD7147.c: 238: unsigned int register1 = 0xE400 + 0x00A + sensor;
  1945  00782C  0E0A               	movlw	10
  1946  00782E  2417               	addwf	read_sensor@sensor,w,c
  1947  007830  6E19               	movwf	read_sensor@register1,c
  1948  007832  0EE4               	movlw	228
  1949  007834  2018               	addwfc	read_sensor@sensor+1,w,c
  1950  007836  6E1A               	movwf	read_sensor@register1+1,c
  1951                           
  1952                           ;AD7147.c: 239: sensor_cdc(sensor, 0);
  1953  007838  C017  F005         	movff	read_sensor@sensor,sensor_cdc@sensor
  1954  00783C  C018  F006         	movff	read_sensor@sensor+1,sensor_cdc@sensor+1
  1955  007840  0E00               	movlw	0
  1956  007842  6E08               	movwf	sensor_cdc@state+1,c
  1957  007844  0E00               	movlw	0
  1958  007846  6E07               	movwf	sensor_cdc@state,c
  1959  007848  EC58  F03B         	call	_sensor_cdc	;wreg free
  1960                           
  1961                           ;AD7147.c: 240: unsigned int sensor_value = w16_r16_spi(register1);
  1962  00784C  C019  F001         	movff	read_sensor@register1,w16_r16_spi@address
  1963  007850  C01A  F002         	movff	read_sensor@register1+1,w16_r16_spi@address+1
  1964  007854  EC3F  F03C         	call	_w16_r16_spi	;wreg free
  1965  007858  C001  F01B         	movff	?_w16_r16_spi,read_sensor@sensor_value
  1966  00785C  C002  F01C         	movff	?_w16_r16_spi+1,read_sensor@sensor_value+1
  1967                           
  1968                           ;AD7147.c: 241: sensor_cdc(sensor, 1);
  1969  007860  C017  F005         	movff	read_sensor@sensor,sensor_cdc@sensor
  1970  007864  C018  F006         	movff	read_sensor@sensor+1,sensor_cdc@sensor+1
  1971  007868  0E00               	movlw	0
  1972  00786A  6E08               	movwf	sensor_cdc@state+1,c
  1973  00786C  0E01               	movlw	1
  1974  00786E  6E07               	movwf	sensor_cdc@state,c
  1975  007870  EC58  F03B         	call	_sensor_cdc	;wreg free
  1976                           
  1977                           ;AD7147.c: 249: return sensor_value;
  1978  007874  C01B  F017         	movff	read_sensor@sensor_value,?_read_sensor
  1979  007878  C01C  F018         	movff	read_sensor@sensor_value+1,?_read_sensor+1
  1980  00787C  0012               	return	
  1981  00787E                     __end_of_read_sensor:
  1982                           	opt stack 0
  1983                           postinc0	equ	0xFEE
  1984                           wreg	equ	0xFE8
  1985                           postinc2	equ	0xFDE
  1986                           postdec2	equ	0xFDD
  1987                           fsr2h	equ	0xFDA
  1988                           fsr2l	equ	0xFD9
  1989                           status	equ	0xFD8
  1990                           
  1991 ;; *************** function _sensor_cdc *****************
  1992 ;; Defined at:
  1993 ;;		line 257 in file "AD7147.c"
  1994 ;; Parameters:    Size  Location     Type
  1995 ;;  sensor          2    4[COMRAM] unsigned int 
  1996 ;;  state           2    6[COMRAM] unsigned int 
  1997 ;; Auto vars:     Size  Location     Type
  1998 ;;		None
  1999 ;; Return value:  Size  Location     Type
  2000 ;;                  1    wreg      void 
  2001 ;; Registers used:
  2002 ;;		wreg, status,2, status,0, cstack
  2003 ;; Tracked objects:
  2004 ;;		On entry : 0/0
  2005 ;;		On exit  : 0/0
  2006 ;;		Unchanged: 0/0
  2007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2008 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2011 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2012 ;;Total ram usage:        4 bytes
  2013 ;; Hardware stack levels used:    1
  2014 ;; Hardware stack levels required when called:    1
  2015 ;; This function calls:
  2016 ;;		_get_CDC
  2017 ;; This function is called by:
  2018 ;;		_read_sensor
  2019 ;; This function uses a non-reentrant model
  2020 ;;
  2021                           
  2022                           	psect	text10
  2023  0076B0                     __ptext10:
  2024                           	opt stack 0
  2025  0076B0                     _sensor_cdc:
  2026                           	opt stack 28
  2027                           
  2028                           ;AD7147.c: 261: if ((sensor <= 12) || (sensor == 25))
  2029                           
  2030                           ;incstack = 0
  2031  0076B0  5006               	movf	sensor_cdc@sensor+1,w,c
  2032  0076B2  E104               	bnz	u700
  2033  0076B4  0E0D               	movlw	13
  2034  0076B6  5C05               	subwf	sensor_cdc@sensor,w,c
  2035  0076B8  A0D8               	btfss	status,0,c
  2036  0076BA  D005               	goto	l1563
  2037  0076BC                     u700:
  2038  0076BC  0E19               	movlw	25
  2039  0076BE  1805               	xorwf	sensor_cdc@sensor,w,c
  2040  0076C0  1006               	iorwf	sensor_cdc@sensor+1,w,c
  2041  0076C2  A4D8               	btfss	status,2,c
  2042  0076C4  D00B               	goto	l1565
  2043  0076C6                     l1563:
  2044                           
  2045                           ;AD7147.c: 262: {
  2046                           ;AD7147.c: 263: get_CDC(1,state);
  2047  0076C6  0E00               	movlw	0
  2048  0076C8  6E02               	movwf	get_CDC@cdc+1,c
  2049  0076CA  0E01               	movlw	1
  2050  0076CC  6E01               	movwf	get_CDC@cdc,c
  2051  0076CE  C007  F003         	movff	sensor_cdc@state,get_CDC@state
  2052  0076D2  C008  F004         	movff	sensor_cdc@state+1,get_CDC@state+1
  2053  0076D6  EC27  F03B         	call	_get_CDC	;wreg free
  2054                           
  2055                           ;AD7147.c: 264: }
  2056  0076DA  0012               	return	
  2057  0076DC                     l1565:
  2058                           
  2059                           ;AD7147.c: 265: else
  2060                           ;AD7147.c: 266: {
  2061                           ;AD7147.c: 267: get_CDC(2,state);
  2062  0076DC  0E00               	movlw	0
  2063  0076DE  6E02               	movwf	get_CDC@cdc+1,c
  2064  0076E0  0E02               	movlw	2
  2065  0076E2  6E01               	movwf	get_CDC@cdc,c
  2066  0076E4  C007  F003         	movff	sensor_cdc@state,get_CDC@state
  2067  0076E8  C008  F004         	movff	sensor_cdc@state+1,get_CDC@state+1
  2068  0076EC  EC27  F03B         	call	_get_CDC	;wreg free
  2069  0076F0  0012               	return	
  2070  0076F2                     __end_of_sensor_cdc:
  2071                           	opt stack 0
  2072                           postinc0	equ	0xFEE
  2073                           wreg	equ	0xFE8
  2074                           postinc2	equ	0xFDE
  2075                           postdec2	equ	0xFDD
  2076                           fsr2h	equ	0xFDA
  2077                           fsr2l	equ	0xFD9
  2078                           status	equ	0xFD8
  2079                           
  2080 ;; *************** function _get_ID *****************
  2081 ;; Defined at:
  2082 ;;		line 317 in file "AD7147.c"
  2083 ;; Parameters:    Size  Location     Type
  2084 ;;  cdc             2   22[COMRAM] unsigned int 
  2085 ;; Auto vars:     Size  Location     Type
  2086 ;;  result          2   25[COMRAM] unsigned int 
  2087 ;; Return value:  Size  Location     Type
  2088 ;;                  2   22[COMRAM] unsigned int 
  2089 ;; Registers used:
  2090 ;;		wreg, status,2, status,0, cstack
  2091 ;; Tracked objects:
  2092 ;;		On entry : 0/0
  2093 ;;		On exit  : 0/0
  2094 ;;		Unchanged: 0/0
  2095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2096 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2097 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2098 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2099 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2100 ;;Total ram usage:        5 bytes
  2101 ;; Hardware stack levels used:    1
  2102 ;; Hardware stack levels required when called:    1
  2103 ;; This function calls:
  2104 ;;		_get_CDC
  2105 ;;		_w16_r16_spi
  2106 ;; This function is called by:
  2107 ;;		_main
  2108 ;; This function uses a non-reentrant model
  2109 ;;
  2110                           
  2111                           	psect	text11
  2112  007744                     __ptext11:
  2113                           	opt stack 0
  2114  007744                     _get_ID:
  2115                           	opt stack 29
  2116                           
  2117                           ;AD7147.c: 319: get_CDC(cdc,0);
  2118                           
  2119                           ;incstack = 0
  2120  007744  C017  F001         	movff	get_ID@cdc,get_CDC@cdc
  2121  007748  C018  F002         	movff	get_ID@cdc+1,get_CDC@cdc+1
  2122  00774C  0E00               	movlw	0
  2123  00774E  6E04               	movwf	get_CDC@state+1,c
  2124  007750  0E00               	movlw	0
  2125  007752  6E03               	movwf	get_CDC@state,c
  2126  007754  EC27  F03B         	call	_get_CDC	;wreg free
  2127                           
  2128                           ;AD7147.c: 320: unsigned int result = (w16_r16_spi(0xE400 + 0x017) & 0b1111111111110000)
      +                           >> 4;
  2129  007758  0EE4               	movlw	228
  2130  00775A  6E02               	movwf	w16_r16_spi@address+1,c
  2131  00775C  0E17               	movlw	23
  2132  00775E  6E01               	movwf	w16_r16_spi@address,c
  2133  007760  EC3F  F03C         	call	_w16_r16_spi	;wreg free
  2134  007764  0E04               	movlw	4
  2135  007766  6E19               	movwf	??_get_ID& (0+255),c
  2136  007768                     u755:
  2137  007768  90D8               	bcf	status,0,c
  2138  00776A  3202               	rrcf	?_w16_r16_spi+1,f,c
  2139  00776C  3201               	rrcf	?_w16_r16_spi,f,c
  2140  00776E  2E19               	decfsz	??_get_ID& (0+255),f,c
  2141  007770  D7FB               	goto	u755
  2142  007772  0EFF               	movlw	255
  2143  007774  1401               	andwf	?_w16_r16_spi,w,c
  2144  007776  6E1A               	movwf	get_ID@result,c
  2145  007778  0E0F               	movlw	15
  2146  00777A  1402               	andwf	?_w16_r16_spi+1,w,c
  2147  00777C  6E1B               	movwf	get_ID@result+1,c
  2148                           
  2149                           ;AD7147.c: 321: get_CDC(cdc,1);
  2150  00777E  C017  F001         	movff	get_ID@cdc,get_CDC@cdc
  2151  007782  C018  F002         	movff	get_ID@cdc+1,get_CDC@cdc+1
  2152  007786  0E00               	movlw	0
  2153  007788  6E04               	movwf	get_CDC@state+1,c
  2154  00778A  0E01               	movlw	1
  2155  00778C  6E03               	movwf	get_CDC@state,c
  2156  00778E  EC27  F03B         	call	_get_CDC	;wreg free
  2157                           
  2158                           ;AD7147.c: 322: return result;
  2159  007792  C01A  F017         	movff	get_ID@result,?_get_ID
  2160  007796  C01B  F018         	movff	get_ID@result+1,?_get_ID+1
  2161  00779A  0012               	return	
  2162  00779C                     __end_of_get_ID:
  2163                           	opt stack 0
  2164                           postinc0	equ	0xFEE
  2165                           wreg	equ	0xFE8
  2166                           postinc2	equ	0xFDE
  2167                           postdec2	equ	0xFDD
  2168                           fsr2h	equ	0xFDA
  2169                           fsr2l	equ	0xFD9
  2170                           status	equ	0xFD8
  2171                           
  2172 ;; *************** function _w16_r16_spi *****************
  2173 ;; Defined at:
  2174 ;;		line 92 in file "spi.c"
  2175 ;; Parameters:    Size  Location     Type
  2176 ;;  address         2    0[COMRAM] unsigned int 
  2177 ;; Auto vars:     Size  Location     Type
  2178 ;;  p4              2   20[COMRAM] unsigned int 
  2179 ;;  p3              2   18[COMRAM] unsigned int 
  2180 ;;  blank_high      2   16[COMRAM] unsigned int 
  2181 ;;  blank_low       2   14[COMRAM] unsigned int 
  2182 ;;  result          2   12[COMRAM] unsigned int 
  2183 ;;  address_high    2   10[COMRAM] unsigned int 
  2184 ;;  address_low     2    8[COMRAM] unsigned int 
  2185 ;;  p2              2    6[COMRAM] unsigned int 
  2186 ;;  p1              2    4[COMRAM] unsigned int 
  2187 ;; Return value:  Size  Location     Type
  2188 ;;                  2    0[COMRAM] unsigned int 
  2189 ;; Registers used:
  2190 ;;		wreg, status,2, status,0
  2191 ;; Tracked objects:
  2192 ;;		On entry : 0/0
  2193 ;;		On exit  : 0/0
  2194 ;;		Unchanged: 0/0
  2195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2196 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2197 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2198 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2199 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2200 ;;Total ram usage:       22 bytes
  2201 ;; Hardware stack levels used:    1
  2202 ;; This function calls:
  2203 ;;		Nothing
  2204 ;; This function is called by:
  2205 ;;		_read_sensor
  2206 ;;		_get_ID
  2207 ;;		_read_AD7147
  2208 ;; This function uses a non-reentrant model
  2209 ;;
  2210                           
  2211                           	psect	text12
  2212  00787E                     __ptext12:
  2213                           	opt stack 0
  2214  00787E                     _w16_r16_spi:
  2215                           	opt stack 29
  2216                           
  2217                           ;spi.c: 94: unsigned int address_low, address_high, result;
  2218                           ;spi.c: 95: unsigned int blank_low = 0x000;
  2219                           
  2220                           ;incstack = 0
  2221  00787E  0E00               	movlw	0
  2222  007880  6E10               	movwf	w16_r16_spi@blank_low+1,c
  2223  007882  0E00               	movlw	0
  2224  007884  6E0F               	movwf	w16_r16_spi@blank_low,c
  2225                           
  2226                           ;spi.c: 96: unsigned int blank_high = 0x000;
  2227  007886  0E00               	movlw	0
  2228  007888  6E12               	movwf	w16_r16_spi@blank_high+1,c
  2229  00788A  0E00               	movlw	0
  2230  00788C  6E11               	movwf	w16_r16_spi@blank_high,c
  2231                           
  2232                           ;spi.c: 97: unsigned int p1, p2, p3, p4;
  2233                           ;spi.c: 99: address_low = address & 0xFF;
  2234  00788E  5001               	movf	w16_r16_spi@address,w,c
  2235  007890  6E09               	movwf	w16_r16_spi@address_low,c
  2236  007892  6A0A               	clrf	w16_r16_spi@address_low+1,c
  2237                           
  2238                           ;spi.c: 100: address_high = (address >> 8) & 0xFF;
  2239  007894  C001  F003         	movff	w16_r16_spi@address,??_w16_r16_spi
  2240  007898  C002  F004         	movff	w16_r16_spi@address+1,??_w16_r16_spi+1
  2241  00789C  C004  F003         	movff	??_w16_r16_spi+1,??_w16_r16_spi
  2242  0078A0  6A04               	clrf	??_w16_r16_spi+1,c
  2243  0078A2  5003               	movf	??_w16_r16_spi,w,c
  2244  0078A4  6E0B               	movwf	w16_r16_spi@address_high,c
  2245  0078A6  6A0C               	clrf	w16_r16_spi@address_high+1,c
  2246                           
  2247                           ;spi.c: 102: SSPBUF = address_high;
  2248  0078A8  C00B  FFC9         	movff	w16_r16_spi@address_high,4041	;volatile
  2249  0078AC                     l198:
  2250  0078AC  A0C7               	btfss	4039,0,c	;volatile
  2251  0078AE  D7FE               	goto	l198
  2252                           
  2253                           ;spi.c: 104: p1 = SSPBUF;
  2254  0078B0  CFC9 F005          	movff	4041,w16_r16_spi@p1	;volatile
  2255  0078B4  6A06               	clrf	w16_r16_spi@p1+1,c
  2256                           
  2257                           ;spi.c: 106: SSPBUF = address_low;
  2258  0078B6  C009  FFC9         	movff	w16_r16_spi@address_low,4041	;volatile
  2259  0078BA                     l201:
  2260  0078BA  A0C7               	btfss	4039,0,c	;volatile
  2261  0078BC  D7FE               	goto	l201
  2262                           
  2263                           ;spi.c: 108: p2 = SSPBUF;
  2264  0078BE  CFC9 F007          	movff	4041,w16_r16_spi@p2	;volatile
  2265  0078C2  6A08               	clrf	w16_r16_spi@p2+1,c
  2266                           
  2267                           ;spi.c: 110: SSPBUF = blank_high;
  2268  0078C4  C011  FFC9         	movff	w16_r16_spi@blank_high,4041	;volatile
  2269  0078C8                     l204:
  2270  0078C8  A0C7               	btfss	4039,0,c	;volatile
  2271  0078CA  D7FE               	goto	l204
  2272                           
  2273                           ;spi.c: 112: p3 = SSPBUF;
  2274  0078CC  CFC9 F013          	movff	4041,w16_r16_spi@p3	;volatile
  2275  0078D0  6A14               	clrf	w16_r16_spi@p3+1,c
  2276                           
  2277                           ;spi.c: 114: SSPBUF = blank_low;
  2278  0078D2  C00F  FFC9         	movff	w16_r16_spi@blank_low,4041	;volatile
  2279  0078D6                     l207:
  2280  0078D6  A0C7               	btfss	4039,0,c	;volatile
  2281  0078D8  D7FE               	goto	l207
  2282                           
  2283                           ;spi.c: 116: p4 = SSPBUF;
  2284  0078DA  CFC9 F015          	movff	4041,w16_r16_spi@p4	;volatile
  2285  0078DE  6A16               	clrf	w16_r16_spi@p4+1,c
  2286                           
  2287                           ;spi.c: 118: result = (p3 << 8) + p4;
  2288  0078E0  5013               	movf	w16_r16_spi@p3,w,c
  2289  0078E2  6E04               	movwf	(??_w16_r16_spi+1)& (0+255),c
  2290  0078E4  6A03               	clrf	??_w16_r16_spi& (0+255),c
  2291  0078E6  5015               	movf	w16_r16_spi@p4,w,c
  2292  0078E8  2403               	addwf	??_w16_r16_spi,w,c
  2293  0078EA  6E0D               	movwf	w16_r16_spi@result,c
  2294  0078EC  5016               	movf	w16_r16_spi@p4+1,w,c
  2295  0078EE  2004               	addwfc	??_w16_r16_spi+1,w,c
  2296  0078F0  6E0E               	movwf	w16_r16_spi@result+1,c
  2297                           
  2298                           ;spi.c: 119: return result;
  2299  0078F2  C00D  F001         	movff	w16_r16_spi@result,?_w16_r16_spi
  2300  0078F6  C00E  F002         	movff	w16_r16_spi@result+1,?_w16_r16_spi+1
  2301  0078FA  0012               	return	
  2302  0078FC                     __end_of_w16_r16_spi:
  2303                           	opt stack 0
  2304                           postinc0	equ	0xFEE
  2305                           wreg	equ	0xFE8
  2306                           postinc2	equ	0xFDE
  2307                           postdec2	equ	0xFDD
  2308                           fsr2h	equ	0xFDA
  2309                           fsr2l	equ	0xFD9
  2310                           status	equ	0xFD8
  2311                           
  2312 ;; *************** function _blink_LED *****************
  2313 ;; Defined at:
  2314 ;;		line 341 in file "AD7147.c"
  2315 ;; Parameters:    Size  Location     Type
  2316 ;;  cdc             2   22[COMRAM] unsigned int 
  2317 ;; Auto vars:     Size  Location     Type
  2318 ;;  message         2   24[COMRAM] unsigned int 
  2319 ;; Return value:  Size  Location     Type
  2320 ;;                  1    wreg      void 
  2321 ;; Registers used:
  2322 ;;		wreg, status,2, status,0, cstack
  2323 ;; Tracked objects:
  2324 ;;		On entry : 0/0
  2325 ;;		On exit  : 0/0
  2326 ;;		Unchanged: 0/0
  2327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2328 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2329 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2331 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2332 ;;Total ram usage:        4 bytes
  2333 ;; Hardware stack levels used:    1
  2334 ;; Hardware stack levels required when called:    2
  2335 ;; This function calls:
  2336 ;;		_delay_ms
  2337 ;;		_get_CDC
  2338 ;;		_w32_spi
  2339 ;; This function is called by:
  2340 ;;		_main
  2341 ;; This function uses a non-reentrant model
  2342 ;;
  2343                           
  2344                           	psect	text13
  2345  007980                     __ptext13:
  2346                           	opt stack 0
  2347  007980                     _blink_LED:
  2348                           	opt stack 28
  2349                           
  2350                           ;AD7147.c: 343: get_CDC(cdc,0);
  2351                           
  2352                           ;incstack = 0
  2353  007980  C017  F001         	movff	blink_LED@cdc,get_CDC@cdc
  2354  007984  C018  F002         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  2355  007988  0E00               	movlw	0
  2356  00798A  6E04               	movwf	get_CDC@state+1,c
  2357  00798C  0E00               	movlw	0
  2358  00798E  6E03               	movwf	get_CDC@state,c
  2359  007990  EC27  F03B         	call	_get_CDC	;wreg free
  2360                           
  2361                           ;AD7147.c: 344: unsigned int message = 0b0010000000000000;
  2362  007994  0E20               	movlw	32
  2363  007996  6E1A               	movwf	blink_LED@message+1,c
  2364  007998  0E00               	movlw	0
  2365  00799A  6E19               	movwf	blink_LED@message,c
  2366                           
  2367                           ;AD7147.c: 345: w32_spi((0xE000 + 0x005),message);
  2368  00799C  0EE0               	movlw	224
  2369  00799E  6E02               	movwf	w32_spi@address+1,c
  2370  0079A0  0E05               	movlw	5
  2371  0079A2  6E01               	movwf	w32_spi@address,c
  2372  0079A4  C019  F003         	movff	blink_LED@message,w32_spi@data
  2373  0079A8  C01A  F004         	movff	blink_LED@message+1,w32_spi@data+1
  2374  0079AC  ECCE  F03B         	call	_w32_spi	;wreg free
  2375                           
  2376                           ;AD7147.c: 346: delay_ms(10);
  2377  0079B0  0E00               	movlw	0
  2378  0079B2  6E0A               	movwf	delay_ms@n+1,c
  2379  0079B4  0E0A               	movlw	10
  2380  0079B6  6E09               	movwf	delay_ms@n,c
  2381  0079B8  EC38  F03B         	call	_delay_ms	;wreg free
  2382                           
  2383                           ;AD7147.c: 347: get_CDC(cdc,1);
  2384  0079BC  C017  F001         	movff	blink_LED@cdc,get_CDC@cdc
  2385  0079C0  C018  F002         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  2386  0079C4  0E00               	movlw	0
  2387  0079C6  6E04               	movwf	get_CDC@state+1,c
  2388  0079C8  0E01               	movlw	1
  2389  0079CA  6E03               	movwf	get_CDC@state,c
  2390  0079CC  EC27  F03B         	call	_get_CDC	;wreg free
  2391                           
  2392                           ;AD7147.c: 348: delay_ms(1000);
  2393  0079D0  0E03               	movlw	3
  2394  0079D2  6E0A               	movwf	delay_ms@n+1,c
  2395  0079D4  0EE8               	movlw	232
  2396  0079D6  6E09               	movwf	delay_ms@n,c
  2397  0079D8  EC38  F03B         	call	_delay_ms	;wreg free
  2398                           
  2399                           ;AD7147.c: 349: get_CDC(cdc,0);
  2400  0079DC  C017  F001         	movff	blink_LED@cdc,get_CDC@cdc
  2401  0079E0  C018  F002         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  2402  0079E4  0E00               	movlw	0
  2403  0079E6  6E04               	movwf	get_CDC@state+1,c
  2404  0079E8  0E00               	movlw	0
  2405  0079EA  6E03               	movwf	get_CDC@state,c
  2406  0079EC  EC27  F03B         	call	_get_CDC	;wreg free
  2407                           
  2408                           ;AD7147.c: 350: unsigned int message = 0b0011000000000000;
  2409  0079F0  0E30               	movlw	48
  2410  0079F2  6E1A               	movwf	blink_LED@message+1,c
  2411  0079F4  0E00               	movlw	0
  2412  0079F6  6E19               	movwf	blink_LED@message,c
  2413                           
  2414                           ;AD7147.c: 351: w32_spi((0xE000 + 0x005),message);
  2415  0079F8  0EE0               	movlw	224
  2416  0079FA  6E02               	movwf	w32_spi@address+1,c
  2417  0079FC  0E05               	movlw	5
  2418  0079FE  6E01               	movwf	w32_spi@address,c
  2419  007A00  C019  F003         	movff	blink_LED@message,w32_spi@data
  2420  007A04  C01A  F004         	movff	blink_LED@message+1,w32_spi@data+1
  2421  007A08  ECCE  F03B         	call	_w32_spi	;wreg free
  2422                           
  2423                           ;AD7147.c: 352: delay_ms(10);
  2424  007A0C  0E00               	movlw	0
  2425  007A0E  6E0A               	movwf	delay_ms@n+1,c
  2426  007A10  0E0A               	movlw	10
  2427  007A12  6E09               	movwf	delay_ms@n,c
  2428  007A14  EC38  F03B         	call	_delay_ms	;wreg free
  2429                           
  2430                           ;AD7147.c: 353: get_CDC(cdc,1);
  2431  007A18  C017  F001         	movff	blink_LED@cdc,get_CDC@cdc
  2432  007A1C  C018  F002         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  2433  007A20  0E00               	movlw	0
  2434  007A22  6E04               	movwf	get_CDC@state+1,c
  2435  007A24  0E01               	movlw	1
  2436  007A26  6E03               	movwf	get_CDC@state,c
  2437  007A28  EC27  F03B         	call	_get_CDC	;wreg free
  2438  007A2C  0012               	return		;funcret
  2439  007A2E                     __end_of_blink_LED:
  2440                           	opt stack 0
  2441                           postinc0	equ	0xFEE
  2442                           wreg	equ	0xFE8
  2443                           postinc2	equ	0xFDE
  2444                           postdec2	equ	0xFDD
  2445                           fsr2h	equ	0xFDA
  2446                           fsr2l	equ	0xFD9
  2447                           status	equ	0xFD8
  2448                           
  2449 ;; *************** function _w32_spi *****************
  2450 ;; Defined at:
  2451 ;;		line 26 in file "spi.c"
  2452 ;; Parameters:    Size  Location     Type
  2453 ;;  address         2    0[COMRAM] unsigned int 
  2454 ;;  data            2    2[COMRAM] unsigned int 
  2455 ;; Auto vars:     Size  Location     Type
  2456 ;;  data_high       2   20[COMRAM] unsigned int 
  2457 ;;  data_low        2   18[COMRAM] unsigned int 
  2458 ;;  address_high    2   16[COMRAM] unsigned int 
  2459 ;;  address_low     2   14[COMRAM] unsigned int 
  2460 ;;  p4              2   12[COMRAM] unsigned int 
  2461 ;;  p3              2   10[COMRAM] unsigned int 
  2462 ;;  p2              2    8[COMRAM] unsigned int 
  2463 ;;  p1              2    6[COMRAM] unsigned int 
  2464 ;; Return value:  Size  Location     Type
  2465 ;;                  1    wreg      void 
  2466 ;; Registers used:
  2467 ;;		wreg, status,2
  2468 ;; Tracked objects:
  2469 ;;		On entry : 0/0
  2470 ;;		On exit  : 0/0
  2471 ;;		Unchanged: 0/0
  2472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2473 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2474 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2475 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2476 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2477 ;;Total ram usage:       22 bytes
  2478 ;; Hardware stack levels used:    1
  2479 ;; This function calls:
  2480 ;;		Nothing
  2481 ;; This function is called by:
  2482 ;;		_write_AD7147
  2483 ;;		_blink_LED
  2484 ;;		_switch_LED
  2485 ;; This function uses a non-reentrant model
  2486 ;;
  2487                           
  2488                           	psect	text14
  2489  00779C                     __ptext14:
  2490                           	opt stack 0
  2491  00779C                     _w32_spi:
  2492                           	opt stack 28
  2493                           
  2494                           ;spi.c: 28: unsigned int address_low, address_high, data_low, data_high;
  2495                           ;spi.c: 30: address_low = address & 0xFF;
  2496                           
  2497                           ;incstack = 0
  2498  00779C  5001               	movf	w32_spi@address,w,c
  2499  00779E  6E0F               	movwf	w32_spi@address_low,c
  2500  0077A0  6A10               	clrf	w32_spi@address_low+1,c
  2501                           
  2502                           ;spi.c: 31: address_high = (address >> 8) & 0xFF;
  2503  0077A2  C001  F005         	movff	w32_spi@address,??_w32_spi
  2504  0077A6  C002  F006         	movff	w32_spi@address+1,??_w32_spi+1
  2505  0077AA  C006  F005         	movff	??_w32_spi+1,??_w32_spi
  2506  0077AE  6A06               	clrf	??_w32_spi+1,c
  2507  0077B0  5005               	movf	??_w32_spi,w,c
  2508  0077B2  6E11               	movwf	w32_spi@address_high,c
  2509  0077B4  6A12               	clrf	w32_spi@address_high+1,c
  2510                           
  2511                           ;spi.c: 33: data_low = data & 0xFF;
  2512  0077B6  5003               	movf	w32_spi@data,w,c
  2513  0077B8  6E13               	movwf	w32_spi@data_low,c
  2514  0077BA  6A14               	clrf	w32_spi@data_low+1,c
  2515                           
  2516                           ;spi.c: 34: data_high = (data >> 8) & 0xFF;
  2517  0077BC  C003  F005         	movff	w32_spi@data,??_w32_spi
  2518  0077C0  C004  F006         	movff	w32_spi@data+1,??_w32_spi+1
  2519  0077C4  C006  F005         	movff	??_w32_spi+1,??_w32_spi
  2520  0077C8  6A06               	clrf	??_w32_spi+1,c
  2521  0077CA  5005               	movf	??_w32_spi,w,c
  2522  0077CC  6E15               	movwf	w32_spi@data_high,c
  2523  0077CE  6A16               	clrf	w32_spi@data_high+1,c
  2524                           
  2525                           ;spi.c: 36: SSPBUF = address_high;
  2526  0077D0  C011  FFC9         	movff	w32_spi@address_high,4041	;volatile
  2527  0077D4                     l165:
  2528  0077D4  A0C7               	btfss	4039,0,c	;volatile
  2529  0077D6  D7FE               	goto	l165
  2530                           
  2531                           ;spi.c: 38: unsigned int p1 = SSPBUF;
  2532  0077D8  CFC9 F007          	movff	4041,w32_spi@p1	;volatile
  2533  0077DC  6A08               	clrf	w32_spi@p1+1,c
  2534                           
  2535                           ;spi.c: 40: SSPBUF = address_low;
  2536  0077DE  C00F  FFC9         	movff	w32_spi@address_low,4041	;volatile
  2537  0077E2                     l168:
  2538  0077E2  A0C7               	btfss	4039,0,c	;volatile
  2539  0077E4  D7FE               	goto	l168
  2540                           
  2541                           ;spi.c: 42: unsigned int p2 = SSPBUF;
  2542  0077E6  CFC9 F009          	movff	4041,w32_spi@p2	;volatile
  2543  0077EA  6A0A               	clrf	w32_spi@p2+1,c
  2544                           
  2545                           ;spi.c: 44: SSPBUF = data_high;
  2546  0077EC  C015  FFC9         	movff	w32_spi@data_high,4041	;volatile
  2547  0077F0                     l171:
  2548  0077F0  A0C7               	btfss	4039,0,c	;volatile
  2549  0077F2  D7FE               	goto	l171
  2550                           
  2551                           ;spi.c: 46: unsigned int p3 = SSPBUF;
  2552  0077F4  CFC9 F00B          	movff	4041,w32_spi@p3	;volatile
  2553  0077F8  6A0C               	clrf	w32_spi@p3+1,c
  2554                           
  2555                           ;spi.c: 48: SSPBUF = data_low;
  2556  0077FA  C013  FFC9         	movff	w32_spi@data_low,4041	;volatile
  2557  0077FE                     l174:
  2558  0077FE  A0C7               	btfss	4039,0,c	;volatile
  2559  007800  D7FE               	goto	l174
  2560                           
  2561                           ;spi.c: 50: unsigned int p4 = SSPBUF;
  2562  007802  CFC9 F00D          	movff	4041,w32_spi@p4	;volatile
  2563  007806  6A0E               	clrf	w32_spi@p4+1,c
  2564  007808  0012               	return		;funcret
  2565  00780A                     __end_of_w32_spi:
  2566                           	opt stack 0
  2567                           postinc0	equ	0xFEE
  2568                           wreg	equ	0xFE8
  2569                           postinc2	equ	0xFDE
  2570                           postdec2	equ	0xFDD
  2571                           fsr2h	equ	0xFDA
  2572                           fsr2l	equ	0xFD9
  2573                           status	equ	0xFD8
  2574                           
  2575 ;; *************** function _get_CDC *****************
  2576 ;; Defined at:
  2577 ;;		line 355 in file "AD7147.c"
  2578 ;; Parameters:    Size  Location     Type
  2579 ;;  cdc             2    0[COMRAM] unsigned int 
  2580 ;;  state           2    2[COMRAM] unsigned int 
  2581 ;; Auto vars:     Size  Location     Type
  2582 ;;		None
  2583 ;; Return value:  Size  Location     Type
  2584 ;;                  1    wreg      void 
  2585 ;; Registers used:
  2586 ;;		wreg, status,2, status,0
  2587 ;; Tracked objects:
  2588 ;;		On entry : 0/0
  2589 ;;		On exit  : 0/0
  2590 ;;		Unchanged: 0/0
  2591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2592 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2595 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2596 ;;Total ram usage:        4 bytes
  2597 ;; Hardware stack levels used:    1
  2598 ;; This function calls:
  2599 ;;		Nothing
  2600 ;; This function is called by:
  2601 ;;		_setup_AD7147
  2602 ;;		_sensor_cdc
  2603 ;;		_get_ID
  2604 ;;		_blink_LED
  2605 ;;		_switch_LED
  2606 ;; This function uses a non-reentrant model
  2607 ;;
  2608                           
  2609                           	psect	text15
  2610  00764E                     __ptext15:
  2611                           	opt stack 0
  2612  00764E                     _get_CDC:
  2613                           	opt stack 29
  2614                           
  2615                           ;AD7147.c: 357: if (state == 1)
  2616                           
  2617                           ;incstack = 0
  2618  00764E  0403               	decf	get_CDC@state,w,c
  2619  007650  1004               	iorwf	get_CDC@state+1,w,c
  2620  007652  A4D8               	btfss	status,2,c
  2621  007654  D003               	goto	l1487
  2622                           
  2623                           ;AD7147.c: 358: {
  2624                           ;AD7147.c: 359: LATCbits.LATC1 = 1;
  2625  007656  828B               	bsf	3979,1,c	;volatile
  2626                           
  2627                           ;AD7147.c: 360: LATCbits.LATC0 = 1;
  2628  007658  808B               	bsf	3979,0,c	;volatile
  2629                           
  2630                           ;AD7147.c: 361: }
  2631  00765A  0012               	return	
  2632  00765C                     l1487:
  2633                           
  2634                           ;AD7147.c: 362: else
  2635                           ;AD7147.c: 363: {
  2636                           ;AD7147.c: 364: if (cdc == 1)
  2637  00765C  0401               	decf	get_CDC@cdc,w,c
  2638  00765E  1002               	iorwf	get_CDC@cdc+1,w,c
  2639  007660  A4D8               	btfss	status,2,c
  2640  007662  D003               	goto	l81
  2641                           
  2642                           ;AD7147.c: 365: {
  2643                           ;AD7147.c: 366: LATCbits.LATC1 = 0;
  2644  007664  928B               	bcf	3979,1,c	;volatile
  2645                           
  2646                           ;AD7147.c: 367: LATCbits.LATC0 = 1;
  2647  007666  808B               	bsf	3979,0,c	;volatile
  2648                           
  2649                           ;AD7147.c: 368: }
  2650  007668  0012               	return	
  2651  00766A                     l81:
  2652                           
  2653                           ;AD7147.c: 369: else
  2654                           ;AD7147.c: 370: {
  2655                           ;AD7147.c: 371: LATCbits.LATC0 = 0;
  2656  00766A  908B               	bcf	3979,0,c	;volatile
  2657                           
  2658                           ;AD7147.c: 372: LATCbits.LATC1 = 1;
  2659  00766C  828B               	bsf	3979,1,c	;volatile
  2660  00766E  0012               	return	
  2661  007670                     __end_of_get_CDC:
  2662                           	opt stack 0
  2663                           postinc0	equ	0xFEE
  2664                           wreg	equ	0xFE8
  2665                           postinc2	equ	0xFDE
  2666                           postdec2	equ	0xFDD
  2667                           fsr2h	equ	0xFDA
  2668                           fsr2l	equ	0xFD9
  2669                           status	equ	0xFD8
  2670                           
  2671 ;; *************** function _delay_ms *****************
  2672 ;; Defined at:
  2673 ;;		line 67 in file "micro_setup.c"
  2674 ;; Parameters:    Size  Location     Type
  2675 ;;  n               2    8[COMRAM] int 
  2676 ;; Auto vars:     Size  Location     Type
  2677 ;;  j               2   11[COMRAM] int 
  2678 ;; Return value:  Size  Location     Type
  2679 ;;                  1    wreg      void 
  2680 ;; Registers used:
  2681 ;;		wreg, status,2, status,0, cstack
  2682 ;; Tracked objects:
  2683 ;;		On entry : 0/0
  2684 ;;		On exit  : 0/0
  2685 ;;		Unchanged: 0/0
  2686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2687 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2688 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2689 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2690 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2691 ;;Total ram usage:        5 bytes
  2692 ;; Hardware stack levels used:    1
  2693 ;; Hardware stack levels required when called:    1
  2694 ;; This function calls:
  2695 ;;		___awdiv
  2696 ;; This function is called by:
  2697 ;;		_blink_LED
  2698 ;;		_main
  2699 ;;		_switch_LED
  2700 ;; This function uses a non-reentrant model
  2701 ;;
  2702                           
  2703                           	psect	text16
  2704  007670                     __ptext16:
  2705                           	opt stack 0
  2706  007670                     _delay_ms:
  2707                           	opt stack 29
  2708                           
  2709                           ;micro_setup.c: 69: int j = n/10;
  2710                           
  2711                           ;incstack = 0
  2712  007670  C009  F001         	movff	delay_ms@n,___awdiv@dividend
  2713  007674  C00A  F002         	movff	delay_ms@n+1,___awdiv@dividend+1
  2714  007678  0E00               	movlw	0
  2715  00767A  6E04               	movwf	___awdiv@divisor+1,c
  2716  00767C  0E0A               	movlw	10
  2717  00767E  6E03               	movwf	___awdiv@divisor,c
  2718  007680  EC7E  F03C         	call	___awdiv	;wreg free
  2719  007684  C001  F00C         	movff	?___awdiv,delay_ms@j
  2720  007688  C002  F00D         	movff	?___awdiv+1,delay_ms@j+1
  2721                           
  2722                           ;micro_setup.c: 70: while(j--)
  2723  00768C  D008               	goto	l1571
  2724  00768E                     l1569:
  2725                           
  2726                           ;micro_setup.c: 71: {
  2727                           ;micro_setup.c: 72: _delay((unsigned long)((10)*(8000000/4000.0)));
  2728  00768E  0E1A               	movlw	26
  2729  007690  6E0B               	movwf	??_delay_ms& (0+255),c
  2730  007692  0EF8               	movlw	248
  2731  007694                     u917:
  2732  007694  2EE8               	decfsz	wreg,f,c
  2733  007696  D7FE               	bra	u917
  2734  007698  2E0B               	decfsz	??_delay_ms& (0+255),f,c
  2735  00769A  D7FC               	bra	u917
  2736  00769C  D000               	nop2	
  2737  00769E                     l1571:
  2738  00769E  060C               	decf	delay_ms@j,f,c
  2739  0076A0  A0D8               	btfss	status,0,c
  2740  0076A2  060D               	decf	delay_ms@j+1,f,c
  2741  0076A4  280C               	incf	delay_ms@j,w,c
  2742  0076A6  E1F3               	bnz	l1569
  2743  0076A8  280D               	incf	delay_ms@j+1,w,c
  2744  0076AA  B4D8               	btfsc	status,2,c
  2745  0076AC  0012               	return	
  2746  0076AE  D7EF               	goto	l1569
  2747  0076B0                     __end_of_delay_ms:
  2748                           	opt stack 0
  2749                           postinc0	equ	0xFEE
  2750                           wreg	equ	0xFE8
  2751                           postinc2	equ	0xFDE
  2752                           postdec2	equ	0xFDD
  2753                           fsr2h	equ	0xFDA
  2754                           fsr2l	equ	0xFD9
  2755                           status	equ	0xFD8
  2756                           
  2757 ;; *************** function ___awdiv *****************
  2758 ;; Defined at:
  2759 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  2760 ;; Parameters:    Size  Location     Type
  2761 ;;  dividend        2    0[COMRAM] int 
  2762 ;;  divisor         2    2[COMRAM] int 
  2763 ;; Auto vars:     Size  Location     Type
  2764 ;;  quotient        2    6[COMRAM] int 
  2765 ;;  sign            1    5[COMRAM] unsigned char 
  2766 ;;  counter         1    4[COMRAM] unsigned char 
  2767 ;; Return value:  Size  Location     Type
  2768 ;;                  2    0[COMRAM] int 
  2769 ;; Registers used:
  2770 ;;		wreg, status,2, status,0
  2771 ;; Tracked objects:
  2772 ;;		On entry : 0/0
  2773 ;;		On exit  : 0/0
  2774 ;;		Unchanged: 0/0
  2775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2776 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2777 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2779 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2780 ;;Total ram usage:        8 bytes
  2781 ;; Hardware stack levels used:    1
  2782 ;; This function calls:
  2783 ;;		Nothing
  2784 ;; This function is called by:
  2785 ;;		_delay_ms
  2786 ;; This function uses a non-reentrant model
  2787 ;;
  2788                           
  2789                           	psect	text17
  2790  0078FC                     __ptext17:
  2791                           	opt stack 0
  2792  0078FC                     ___awdiv:
  2793                           	opt stack 29
  2794                           
  2795                           ;incstack = 0
  2796  0078FC  0E00               	movlw	0
  2797  0078FE  6E06               	movwf	___awdiv@sign,c
  2798  007900  AE04               	btfss	___awdiv@divisor+1,7,c
  2799  007902  D006               	goto	l1503
  2800  007904  6C03               	negf	___awdiv@divisor,c
  2801  007906  1E04               	comf	___awdiv@divisor+1,f,c
  2802  007908  B0D8               	btfsc	status,0,c
  2803  00790A  2A04               	incf	___awdiv@divisor+1,f,c
  2804  00790C  0E01               	movlw	1
  2805  00790E  6E06               	movwf	___awdiv@sign,c
  2806  007910                     l1503:
  2807  007910  AE02               	btfss	___awdiv@dividend+1,7,c
  2808  007912  D006               	goto	l1509
  2809  007914  6C01               	negf	___awdiv@dividend,c
  2810  007916  1E02               	comf	___awdiv@dividend+1,f,c
  2811  007918  B0D8               	btfsc	status,0,c
  2812  00791A  2A02               	incf	___awdiv@dividend+1,f,c
  2813  00791C  0E01               	movlw	1
  2814  00791E  1A06               	xorwf	___awdiv@sign,f,c
  2815  007920                     l1509:
  2816  007920  0E00               	movlw	0
  2817  007922  6E08               	movwf	___awdiv@quotient+1,c
  2818  007924  0E00               	movlw	0
  2819  007926  6E07               	movwf	___awdiv@quotient,c
  2820  007928  5003               	movf	___awdiv@divisor,w,c
  2821  00792A  1004               	iorwf	___awdiv@divisor+1,w,c
  2822  00792C  B4D8               	btfsc	status,2,c
  2823  00792E  D01C               	goto	l1531
  2824  007930  0E01               	movlw	1
  2825  007932  6E05               	movwf	___awdiv@counter,c
  2826  007934  D004               	goto	l1517
  2827  007936                     l1515:
  2828  007936  90D8               	bcf	status,0,c
  2829  007938  3603               	rlcf	___awdiv@divisor,f,c
  2830  00793A  3604               	rlcf	___awdiv@divisor+1,f,c
  2831  00793C  2A05               	incf	___awdiv@counter,f,c
  2832  00793E                     l1517:
  2833  00793E  AE04               	btfss	___awdiv@divisor+1,7,c
  2834  007940  D7FA               	goto	l1515
  2835  007942                     l1519:
  2836  007942  90D8               	bcf	status,0,c
  2837  007944  3607               	rlcf	___awdiv@quotient,f,c
  2838  007946  3608               	rlcf	___awdiv@quotient+1,f,c
  2839  007948  5003               	movf	___awdiv@divisor,w,c
  2840  00794A  5C01               	subwf	___awdiv@dividend,w,c
  2841  00794C  5004               	movf	___awdiv@divisor+1,w,c
  2842  00794E  5802               	subwfb	___awdiv@dividend+1,w,c
  2843  007950  A0D8               	btfss	status,0,c
  2844  007952  D005               	goto	l1527
  2845  007954  5003               	movf	___awdiv@divisor,w,c
  2846  007956  5E01               	subwf	___awdiv@dividend,f,c
  2847  007958  5004               	movf	___awdiv@divisor+1,w,c
  2848  00795A  5A02               	subwfb	___awdiv@dividend+1,f,c
  2849  00795C  8007               	bsf	___awdiv@quotient,0,c
  2850  00795E                     l1527:
  2851  00795E  90D8               	bcf	status,0,c
  2852  007960  3204               	rrcf	___awdiv@divisor+1,f,c
  2853  007962  3203               	rrcf	___awdiv@divisor,f,c
  2854  007964  2E05               	decfsz	___awdiv@counter,f,c
  2855  007966  D7ED               	goto	l1519
  2856  007968                     l1531:
  2857  007968  5006               	movf	___awdiv@sign,w,c
  2858  00796A  B4D8               	btfsc	status,2,c
  2859  00796C  D004               	goto	l1535
  2860  00796E  6C07               	negf	___awdiv@quotient,c
  2861  007970  1E08               	comf	___awdiv@quotient+1,f,c
  2862  007972  B0D8               	btfsc	status,0,c
  2863  007974  2A08               	incf	___awdiv@quotient+1,f,c
  2864  007976                     l1535:
  2865  007976  C007  F001         	movff	___awdiv@quotient,?___awdiv
  2866  00797A  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  2867  00797E  0012               	return	
  2868  007980                     __end_of___awdiv:
  2869                           	opt stack 0
  2870  0000                     postinc0	equ	0xFEE
  2871                           wreg	equ	0xFE8
  2872                           postinc2	equ	0xFDE
  2873                           postdec2	equ	0xFDD
  2874                           fsr2h	equ	0xFDA
  2875                           fsr2l	equ	0xFD9
  2876                           status	equ	0xFD8
  2877                           postinc0	equ	0xFEE
  2878                           wreg	equ	0xFE8
  2879                           postinc2	equ	0xFDE
  2880                           postdec2	equ	0xFDD
  2881                           fsr2h	equ	0xFDA
  2882                           fsr2l	equ	0xFD9
  2883                           status	equ	0xFD8
  2884                           
  2885                           	psect	rparam
  2886  0000                     postinc0	equ	0xFEE
  2887                           wreg	equ	0xFE8
  2888                           postinc2	equ	0xFDE
  2889                           postdec2	equ	0xFDD
  2890                           fsr2h	equ	0xFDA
  2891                           fsr2l	equ	0xFD9
  2892                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         24
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     73      73
    BANK0           160      0      24
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    CDC_RESULT	PTR unsigned int [12] size(2) Largest target is 3648
		 -> NULL(NULL[0]), RAM(DATA[3648]), 

    write_AD7147@DataBuffer	PTR unsigned int  size(2) Largest target is 3648
		 -> RAM(DATA[3648]), setup_AD7147@AD7147Registers(COMRAM[16]), setup_AD7147@StageBuffer(COMRAM[16]), 


Critical Paths under _main in COMRAM

    _main->_setup_AD7147
    _setup_AD7147->_write_AD7147
    _write_AD7147->_w32_spi
    _read_sensor->_w16_r16_spi
    _sensor_cdc->_get_CDC
    _get_ID->_w16_r16_spi
    _blink_LED->_w32_spi
    _delay_ms->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0   20010
                                             66 COMRAM     7     7      0
                          _blink_LED
                           _delay_ms
                             _get_ID
                        _read_sensor
                       _setup_AD7147
                          _setup_mcu
                          _setup_spi
                    _uart_write_char
            _uart_write_unsigned_int
 ---------------------------------------------------------------------------------
 (1) _uart_write_unsigned_int                              4     2      2     318
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _uart_write_char                                      1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setup_spi                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_mcu                                            0     0      0       0
                          _init_uart
                         _setup_port
 ---------------------------------------------------------------------------------
 (2) _setup_port                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_uart                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_AD7147                                        34    32      2    9141
                                             32 COMRAM    34    32      2
                            _get_CDC
                       _write_AD7147
 ---------------------------------------------------------------------------------
 (2) _write_AD7147                                        10     4      6    4521
                                             22 COMRAM    10     4      6
                            _w32_spi
 ---------------------------------------------------------------------------------
 (1) _read_sensor                                          6     4      2    2950
                                             22 COMRAM     6     4      2
                         _sensor_cdc
                        _w16_r16_spi
 ---------------------------------------------------------------------------------
 (2) _sensor_cdc                                           4     0      4    2260
                                              4 COMRAM     4     0      4
                            _get_CDC
 ---------------------------------------------------------------------------------
 (1) _get_ID                                               5     3      2    2446
                                             22 COMRAM     5     3      2
                            _get_CDC
                        _w16_r16_spi
 ---------------------------------------------------------------------------------
 (2) _w16_r16_spi                                         22    20      2     435
                                              0 COMRAM    22    20      2
 ---------------------------------------------------------------------------------
 (1) _blink_LED                                            4     2      2    4051
                                             22 COMRAM     4     2      2
                           _delay_ms
                            _get_CDC
                            _w32_spi
 ---------------------------------------------------------------------------------
 (3) _w32_spi                                             22    18      4     944
                                              0 COMRAM    22    18      4
 ---------------------------------------------------------------------------------
 (2) _get_CDC                                              4     0      4    1868
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             5     3      2     953
                                              8 COMRAM     5     3      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _blink_LED
     _delay_ms
       ___awdiv
     _get_CDC
     _w32_spi
   _delay_ms
     ___awdiv
   _get_ID
     _get_CDC
     _w16_r16_spi
   _read_sensor
     _sensor_cdc
       _get_CDC
     _w16_r16_spi
   _setup_AD7147
     _get_CDC
     _write_AD7147
       _w32_spi
   _setup_mcu
     _init_uart
     _setup_port
   _setup_spi
   _uart_write_char
   _uart_write_unsigned_int

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      18       5       15.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     49      49       1       76.8%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      61       6        0.0%
DATA                 0      0      61       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Wed Jul 12 23:53:38 2017

                     _SSPSTATbits 000FC7                                l38 782C  
                              l81 766A                      ___awdiv@sign 0006  
                    __CFG_CP0$OFF 000000                               l201 78BA  
                             l204 78C8                               l207 78D6  
                             l232 75DE                               l171 77F0  
                             l244 763C                               l165 77D4  
                             l174 77FE                               l247 7644  
                             l168 77E2                               l198 78AC  
                             u700 76BC                               u730 7816  
                             u755 7768                               u917 7694  
                             wreg 000FE8                        _TXSTA1bits 000FAC  
     write_AD7147@RegisterAddress 0017                              l1503 7910  
                            l1515 7936                              l1531 7968  
                            l1517 793E                              l1509 7920  
                            l1535 7976                              l1527 795E  
                            l1519 7942                              l1543 7708  
                            l1571 769E                              l1563 76C6  
                            l1547 7736                              l1565 76DC  
                            l1487 765C                              l1569 768E  
                            l1953 7ADA                              l1945 7AAC  
                            l1937 7A7E                              l1959 7AF4  
                            _main 7A2E                              fsr2h 000FDA  
     write_AD7147@Register_Values 001D                              fsr2l 000FD9  
__size_of_uart_write_unsigned_int 001A                              start 0002  
                   ??_w16_r16_spi 0003                     __CFG_IESO$OFF 000000  
                   __CFG_FOSC$HS1 000000                      ___param_bank 000000  
                 __end_of_w32_spi 780A          __size_of_uart_write_char 000C  
                           ?_main 0001                   __end_of___awdiv 7980  
                 ___awdiv@divisor 0003                             _RC1IF 007CF5  
           w16_r16_spi@blank_high 0011                   ___awdiv@counter 0005  
                           _TRISB 000F93                             _TRISC 000F94  
                 __end_of_get_CDC 7670                    __CFG_FCMEN$OFF 000000  
           __size_of_write_AD7147 0052                      ?_read_sensor 0017  
                    main@sensor_1 0047                             status 000FD8  
          w16_r16_spi@address_low 0009       setup_AD7147@AD7147Registers 0023  
                 __initialization 75F8                      __end_of_main 7B02  
             __end_of_w16_r16_spi 78FC                      _write_AD7147 76F2  
                          ??_main 0043                     main@device_ID 0045  
                   __activetblptr 000000                  ___awdiv@dividend 0001  
                     w32_spi@data 0003                     main@indicator 0049  
                  __CFG_WDTEN$OFF 000000                            _RCREG1 000FAE  
                          _SPBRG1 000FAF                            _SSPBUF 000FC9  
                          _TXREG1 000FAD                            _TXSTA1 000FAC  
                __end_of_delay_ms 76B0                         ??_w32_spi 0005  
                  __CFG_XINST$OFF 000000                         ??___awdiv 0005  
                  __CFG_STVREN$ON 000000                            _get_ID 7744  
                          clear_0 75FE                  ___awdiv@quotient 0007  
                       ??_get_CDC 0005                            main@bb 0043  
               ??_uart_write_char 0001           w16_r16_spi@address_high 000B  
         _uart_write_unsigned_int 7634                        __accesstop 0060  
         __end_of__initialization 7604                     ___rparam_used 000001  
                     _w16_r16_spi 787E                    __pcstackCOMRAM 0001  
              __size_of_blink_LED 00AE                  sensor_cdc@sensor 0005  
                      __pbssBANK0 0060              __size_of_read_sensor 0074  
              __size_of_init_uart 0014                           ?_get_ID 0017  
                __CFG_CANMX$PORTB 000000                __size_of_setup_mcu 000A  
              __size_of_setup_spi 0016                         ?_delay_ms 0009  
                   w16_r16_spi@p1 0005                     w16_r16_spi@p2 0007  
                   w16_r16_spi@p3 0013                     w16_r16_spi@p4 0015  
       ??_uart_write_unsigned_int 0003                 __end_of_blink_LED 7A2E  
                         _w32_spi 779C                           __Hparam 0000  
                         __Lparam 0000                           ___awdiv 78FC  
                 __size_of_get_ID 0058                           __pcinit 75F8  
                         _get_CDC 764E                           __ramtop 0F00  
                         __ptext0 7A2E                           __ptext1 7634  
                         __ptext2 75DC                           __ptext3 761E  
                         __ptext4 75D2                           __ptext5 75E8  
                         __ptext6 760A                           __ptext7 7B02  
                         __ptext8 76F2                           __ptext9 780A  
                  w32_spi@address 0001                 __end_of_init_uart 761E  
                      ??_delay_ms 000B                        get_CDC@cdc 0001  
            end_of_initialization 7604                     ?_setup_AD7147 0021  
               __end_of_setup_mcu 75DC                 __end_of_setup_spi 7634  
                         postdec2 000FDD   __end_of_uart_write_unsigned_int 764E  
                         postinc0 000FEE                           postinc2 000FDE  
                      _sensor_cdc 76B0                   _uart_write_char 75DC  
                      _setup_port 75E8                    ??_setup_AD7147 0023  
                    ?_w16_r16_spi 0001                         w32_spi@p1 0007  
                       w32_spi@p2 0009                         w32_spi@p3 000B  
                       w32_spi@p4 000D              w16_r16_spi@blank_low 000F  
                  __end_of_get_ID 779C               w32_spi@address_high 0011  
             start_initialization 75F8               uart_write_char@data 0001  
         __end_of_uart_write_char 75E8           setup_AD7147@StageBuffer 0033  
                        ??_get_ID 0019                       ?_sensor_cdc 0005  
                     ?_setup_port 0001            write_AD7147@DataBuffer 001B  
                   ??_read_sensor 0019                 __size_of_delay_ms 0040  
                 sensor_cdc@state 0007                          ?_w32_spi 0001  
                       _blink_LED 7980                          ?___awdiv 0001  
            __end_of_setup_AD7147 8000                          ?_get_CDC 0001  
                   ?_write_AD7147 0017                          _BAUDCON1 000FA7  
    uart_write_unsigned_int@char1 0003      uart_write_unsigned_int@char2 0004  
                w32_spi@data_high 0015                         _init_uart 760A  
             __size_of_sensor_cdc 0042                          _LATCbits 000F8B  
                       delay_ms@j 000C                         delay_ms@n 0009  
             __end_of_read_sensor 787E     write_AD7147@NumberOfRegisters 0019  
                       get_ID@cdc 0017                          _PIE1bits 000F9D  
             __size_of_setup_port 0010                  ?_uart_write_char 0001  
                        _PIR1bits 000F9E                        ?_blink_LED 0017  
            __size_of_w16_r16_spi 007E                         _setup_mcu 75D2  
                       _setup_spi 761E                    ??_write_AD7147 001D  
                 setup_AD7147@cdc 0021                      get_CDC@state 0003  
                __CFG_SOSCSEL$DIG 000000          ?_uart_write_unsigned_int 0001  
                      ?_init_uart 0001                w32_spi@address_low 000F  
                      _CDC_RESULT 0060                          __Hrparam 0000  
                    get_ID@result 001A                  __size_of_w32_spi 006E  
                        __Lrparam 0000                      blink_LED@cdc 0017  
         read_sensor@sensor_value 001B                  __size_of___awdiv 0084  
                      ?_setup_mcu 0001                        ?_setup_spi 0001  
                __size_of_get_CDC 0022                          _delay_ms 7670  
            read_sensor@register1 0019                          __ptext10 76B0  
                        __ptext11 7744                          __ptext12 787E  
                        __ptext13 7980                          __ptext14 779C  
                        __ptext15 764E                          __ptext16 7670  
                        __ptext17 78FC                       _read_sensor 780A  
                   __size_of_main 00D4                   w32_spi@data_low 0013  
               read_sensor@sensor 0017                       ??_blink_LED 0019  
           __size_of_setup_AD7147 04FE                      ??_sensor_cdc 0009  
                   write_AD7147@i 001F                w16_r16_spi@address 0001  
                    ??_setup_port 0001                       ??_init_uart 0001  
            __end_of_write_AD7147 7744                      _setup_AD7147 7B02  
              __end_of_sensor_cdc 76F2                        _RCSTA1bits 000FAB  
              __end_of_setup_port 75F8                       ??_setup_mcu 0001  
                     ??_setup_spi 0001                 w16_r16_spi@result 000D  
                     _SSPCON1bits 000FC6                  blink_LED@message 0019  
   uart_write_unsigned_int@number 0001  
