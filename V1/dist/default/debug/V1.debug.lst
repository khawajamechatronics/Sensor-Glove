

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Thu Jun 29 11:53:38 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F25K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	text13,global,reloc=2,class=CODE,delta=1
    22                           	psect	text14,global,reloc=2,class=CODE,delta=1
    23                           	psect	text15,global,reloc=2,class=CODE,delta=1
    24                           	psect	text16,global,reloc=2,class=CODE,delta=1
    25                           	psect	text17,global,reloc=2,class=CODE,delta=1
    26                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    27                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    28  0000                     _BAUDCON1	set	4007
    29  0000                     _LATCbits	set	3979
    30  0000                     _PIE1bits	set	3997
    31  0000                     _PIR1bits	set	3998
    32  0000                     _RCREG1	set	4014
    33  0000                     _RCSTA1bits	set	4011
    34  0000                     _SPBRG1	set	4015
    35  0000                     _SSPBUF	set	4041
    36  0000                     _SSPCON1bits	set	4038
    37  0000                     _SSPSTATbits	set	4039
    38  0000                     _TRISB	set	3987
    39  0000                     _TRISC	set	3988
    40  0000                     _TXREG1	set	4013
    41  0000                     _TXSTA1	set	4012
    42  0000                     _TXSTA1bits	set	4012
    43  0000                     _RC1IF	set	31989
    44                           
    45                           ; #config settings
    46  0000                     
    47                           	psect	cinit
    48  0075F8                     __pcinit:
    49                           	opt stack 0
    50  0075F8                     start_initialization:
    51                           	opt stack 0
    52  0075F8                     __initialization:
    53                           	opt stack 0
    54                           
    55                           ; Clear objects allocated to BANK0 (24 bytes)
    56  0075F8  EE00  F060         	lfsr	0,__pbssBANK0
    57  0075FC  0E18               	movlw	24
    58  0075FE                     clear_0:
    59  0075FE  6AEE               	clrf	postinc0,c
    60  007600  06E8               	decf	wreg,f,c
    61  007602  E1FD               	bnz	clear_0
    62  007604                     end_of_initialization:
    63                           	opt stack 0
    64  007604                     __end_of__initialization:
    65                           	opt stack 0
    66  007604  0100               	movlb	0
    67  007606  EF17  F03D         	goto	_main	;jump to C main() function
    68                           postinc0	equ	0xFEE
    69                           wreg	equ	0xFE8
    70                           
    71                           	psect	bssBANK0
    72  000060                     __pbssBANK0:
    73                           	opt stack 0
    74  000060                     _CDC_RESULT:
    75                           	opt stack 0
    76  000060                     	ds	24
    77                           postinc0	equ	0xFEE
    78                           wreg	equ	0xFE8
    79                           
    80                           	psect	cstackCOMRAM
    81  000001                     __pcstackCOMRAM:
    82                           	opt stack 0
    83  000001                     ?_w16_r16_spi:
    84                           	opt stack 0
    85  000001                     ?___awdiv:
    86                           	opt stack 0
    87  000001                     uart_write_char@data:
    88                           	opt stack 0
    89  000001                     get_CDC@cdc:
    90                           	opt stack 0
    91  000001                     w32_spi@address:
    92                           	opt stack 0
    93  000001                     w16_r16_spi@address:
    94                           	opt stack 0
    95  000001                     uart_write_unsigned_int@number:
    96                           	opt stack 0
    97  000001                     ___awdiv@dividend:
    98                           	opt stack 0
    99                           
   100                           ; 2 bytes @ 0x0
   101  000001                     	ds	2
   102  000003                     ??_w16_r16_spi:
   103  000003                     uart_write_unsigned_int@char1:
   104                           	opt stack 0
   105  000003                     get_CDC@state:
   106                           	opt stack 0
   107  000003                     w32_spi@data:
   108                           	opt stack 0
   109  000003                     ___awdiv@divisor:
   110                           	opt stack 0
   111                           
   112                           ; 2 bytes @ 0x2
   113  000003                     	ds	1
   114  000004                     uart_write_unsigned_int@char2:
   115                           	opt stack 0
   116                           
   117                           ; 1 bytes @ 0x3
   118  000004                     	ds	1
   119  000005                     ??_w32_spi:
   120  000005                     ___awdiv@counter:
   121                           	opt stack 0
   122  000005                     sensor_cdc@sensor:
   123                           	opt stack 0
   124  000005                     w16_r16_spi@p1:
   125                           	opt stack 0
   126                           
   127                           ; 2 bytes @ 0x4
   128  000005                     	ds	1
   129  000006                     ___awdiv@sign:
   130                           	opt stack 0
   131                           
   132                           ; 1 bytes @ 0x5
   133  000006                     	ds	1
   134  000007                     sensor_cdc@state:
   135                           	opt stack 0
   136  000007                     w32_spi@p1:
   137                           	opt stack 0
   138  000007                     w16_r16_spi@p2:
   139                           	opt stack 0
   140  000007                     ___awdiv@quotient:
   141                           	opt stack 0
   142                           
   143                           ; 2 bytes @ 0x6
   144  000007                     	ds	2
   145  000009                     delay_ms@n:
   146                           	opt stack 0
   147  000009                     w32_spi@p2:
   148                           	opt stack 0
   149  000009                     w16_r16_spi@address_low:
   150                           	opt stack 0
   151                           
   152                           ; 2 bytes @ 0x8
   153  000009                     	ds	2
   154  00000B                     ??_delay_ms:
   155  00000B                     w32_spi@p3:
   156                           	opt stack 0
   157  00000B                     w16_r16_spi@address_high:
   158                           	opt stack 0
   159                           
   160                           ; 2 bytes @ 0xA
   161  00000B                     	ds	1
   162  00000C                     delay_ms@j:
   163                           	opt stack 0
   164                           
   165                           ; 2 bytes @ 0xB
   166  00000C                     	ds	1
   167  00000D                     w32_spi@p4:
   168                           	opt stack 0
   169  00000D                     w16_r16_spi@result:
   170                           	opt stack 0
   171                           
   172                           ; 2 bytes @ 0xC
   173  00000D                     	ds	2
   174  00000F                     w32_spi@address_low:
   175                           	opt stack 0
   176  00000F                     w16_r16_spi@blank_low:
   177                           	opt stack 0
   178                           
   179                           ; 2 bytes @ 0xE
   180  00000F                     	ds	2
   181  000011                     w32_spi@address_high:
   182                           	opt stack 0
   183  000011                     w16_r16_spi@blank_high:
   184                           	opt stack 0
   185                           
   186                           ; 2 bytes @ 0x10
   187  000011                     	ds	2
   188  000013                     w32_spi@data_low:
   189                           	opt stack 0
   190  000013                     w16_r16_spi@p3:
   191                           	opt stack 0
   192                           
   193                           ; 2 bytes @ 0x12
   194  000013                     	ds	2
   195  000015                     w32_spi@data_high:
   196                           	opt stack 0
   197  000015                     w16_r16_spi@p4:
   198                           	opt stack 0
   199                           
   200                           ; 2 bytes @ 0x14
   201  000015                     	ds	2
   202  000017                     ?_read_sensor:
   203                           	opt stack 0
   204  000017                     ?_get_ID:
   205                           	opt stack 0
   206  000017                     write_AD7147@RegisterAddress:
   207                           	opt stack 0
   208  000017                     read_sensor@sensor:
   209                           	opt stack 0
   210  000017                     get_ID@cdc:
   211                           	opt stack 0
   212  000017                     blink_LED@cdc:
   213                           	opt stack 0
   214                           
   215                           ; 2 bytes @ 0x16
   216  000017                     	ds	2
   217  000019                     ??_get_ID:
   218  000019                     write_AD7147@NumberOfRegisters:
   219                           	opt stack 0
   220  000019                     read_sensor@register1:
   221                           	opt stack 0
   222  000019                     blink_LED@message:
   223                           	opt stack 0
   224                           
   225                           ; 2 bytes @ 0x18
   226  000019                     	ds	1
   227  00001A                     get_ID@result:
   228                           	opt stack 0
   229                           
   230                           ; 2 bytes @ 0x19
   231  00001A                     	ds	1
   232  00001B                     write_AD7147@DataBuffer:
   233                           	opt stack 0
   234  00001B                     read_sensor@sensor_value:
   235                           	opt stack 0
   236                           
   237                           ; 2 bytes @ 0x1A
   238  00001B                     	ds	2
   239  00001D                     write_AD7147@Register_Values:
   240                           	opt stack 0
   241                           
   242                           ; 2 bytes @ 0x1C
   243  00001D                     	ds	2
   244  00001F                     write_AD7147@i:
   245                           	opt stack 0
   246                           
   247                           ; 2 bytes @ 0x1E
   248  00001F                     	ds	2
   249  000021                     setup_AD7147@cdc:
   250                           	opt stack 0
   251                           
   252                           ; 2 bytes @ 0x20
   253  000021                     	ds	2
   254  000023                     setup_AD7147@AD7147Registers:
   255                           	opt stack 0
   256                           
   257                           ; 16 bytes @ 0x22
   258  000023                     	ds	16
   259  000033                     setup_AD7147@StageBuffer:
   260                           	opt stack 0
   261                           
   262                           ; 16 bytes @ 0x32
   263  000033                     	ds	16
   264  000043                     main@bb:
   265                           	opt stack 0
   266                           
   267                           ; 2 bytes @ 0x42
   268  000043                     	ds	2
   269  000045                     main@device_ID:
   270                           	opt stack 0
   271                           
   272                           ; 2 bytes @ 0x44
   273  000045                     	ds	2
   274  000047                     main@sensor_1:
   275                           	opt stack 0
   276                           
   277                           ; 2 bytes @ 0x46
   278  000047                     	ds	2
   279  000049                     main@indicator:
   280                           	opt stack 0
   281                           
   282                           ; 1 bytes @ 0x48
   283  000049                     	ds	1
   284                           postinc0	equ	0xFEE
   285                           wreg	equ	0xFE8
   286                           
   287 ;;
   288 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   289 ;;
   290 ;; *************** function _main *****************
   291 ;; Defined at:
   292 ;;		line 6 in file "main.c"
   293 ;; Parameters:    Size  Location     Type
   294 ;;		None
   295 ;; Auto vars:     Size  Location     Type
   296 ;;  sensor_1        2   70[COMRAM] unsigned int 
   297 ;;  device_ID       2   68[COMRAM] unsigned int 
   298 ;;  bb              2   66[COMRAM] unsigned int 
   299 ;;  indicator       1   72[COMRAM] unsigned char 
   300 ;; Return value:  Size  Location     Type
   301 ;;                  1    wreg      void 
   302 ;; Registers used:
   303 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   304 ;; Tracked objects:
   305 ;;		On entry : 0/0
   306 ;;		On exit  : 0/0
   307 ;;		Unchanged: 0/0
   308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   310 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   312 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   313 ;;Total ram usage:        7 bytes
   314 ;; Hardware stack levels required when called:    3
   315 ;; This function calls:
   316 ;;		_blink_LED
   317 ;;		_delay_ms
   318 ;;		_get_ID
   319 ;;		_read_sensor
   320 ;;		_setup_AD7147
   321 ;;		_setup_mcu
   322 ;;		_setup_spi
   323 ;;		_uart_write_char
   324 ;;		_uart_write_unsigned_int
   325 ;; This function is called by:
   326 ;;		Startup code after reset
   327 ;; This function uses a non-reentrant model
   328 ;;
   329                           
   330                           	psect	text0
   331  007A2E                     __ptext0:
   332                           	opt stack 0
   333  007A2E                     _main:
   334                           	opt stack 28
   335                           
   336                           ;main.c: 8: delay_ms(500);
   337                           
   338                           ;incstack = 0
   339  007A2E  0E01               	movlw	1
   340  007A30  6E0A               	movwf	delay_ms@n+1,c
   341  007A32  0EF4               	movlw	244
   342  007A34  6E09               	movwf	delay_ms@n,c
   343  007A36  EC38  F03B         	call	_delay_ms	;wreg free
   344                           
   345                           ;main.c: 9: setup_mcu();
   346  007A3A  ECE9  F03A         	call	_setup_mcu	;wreg free
   347                           
   348                           ;main.c: 10: setup_spi();
   349  007A3E  EC0F  F03B         	call	_setup_spi	;wreg free
   350                           
   351                           ;main.c: 11: setup_AD7147(1);
   352  007A42  0E00               	movlw	0
   353  007A44  6E22               	movwf	setup_AD7147@cdc+1,c
   354  007A46  0E01               	movlw	1
   355  007A48  6E21               	movwf	setup_AD7147@cdc,c
   356  007A4A  EC81  F03D         	call	_setup_AD7147	;wreg free
   357                           
   358                           ;main.c: 12: setup_AD7147(2);
   359  007A4E  0E00               	movlw	0
   360  007A50  6E22               	movwf	setup_AD7147@cdc+1,c
   361  007A52  0E02               	movlw	2
   362  007A54  6E21               	movwf	setup_AD7147@cdc,c
   363  007A56  EC81  F03D         	call	_setup_AD7147	;wreg free
   364                           
   365                           ;main.c: 14: blink_LED(2);
   366  007A5A  0E00               	movlw	0
   367  007A5C  6E18               	movwf	blink_LED@cdc+1,c
   368  007A5E  0E02               	movlw	2
   369  007A60  6E17               	movwf	blink_LED@cdc,c
   370  007A62  ECC0  F03C         	call	_blink_LED	;wreg free
   371                           
   372                           ;main.c: 15: blink_LED(1);
   373  007A66  0E00               	movlw	0
   374  007A68  6E18               	movwf	blink_LED@cdc+1,c
   375  007A6A  0E01               	movlw	1
   376  007A6C  6E17               	movwf	blink_LED@cdc,c
   377  007A6E  ECC0  F03C         	call	_blink_LED	;wreg free
   378                           
   379                           ;main.c: 16: char indicator = 's';
   380  007A72  0E73               	movlw	115
   381  007A74  6E49               	movwf	main@indicator,c
   382                           
   383                           ;main.c: 17: unsigned int bb = 1020;
   384  007A76  0E03               	movlw	3
   385  007A78  6E44               	movwf	main@bb+1,c
   386  007A7A  0EFC               	movlw	252
   387  007A7C  6E43               	movwf	main@bb,c
   388  007A7E                     l1927:
   389                           
   390                           ;main.c: 19: {
   391                           ;main.c: 20: if (indicator == 'i')
   392  007A7E  0E69               	movlw	105
   393  007A80  1849               	xorwf	main@indicator,w,c
   394  007A82  A4D8               	btfss	status,2,c
   395  007A84  D013               	goto	l1935
   396                           
   397                           ;main.c: 21: {
   398                           ;main.c: 22: uart_write_char('i');
   399  007A86  0E69               	movlw	105
   400  007A88  ECEE  F03A         	call	_uart_write_char
   401                           
   402                           ;main.c: 23: unsigned int device_ID = get_ID(1);
   403  007A8C  0E00               	movlw	0
   404  007A8E  6E18               	movwf	get_ID@cdc+1,c
   405  007A90  0E01               	movlw	1
   406  007A92  6E17               	movwf	get_ID@cdc,c
   407  007A94  ECA2  F03B         	call	_get_ID	;wreg free
   408  007A98  C017  F045         	movff	?_get_ID,main@device_ID
   409  007A9C  C018  F046         	movff	?_get_ID+1,main@device_ID+1
   410                           
   411                           ;main.c: 24: uart_write_unsigned_int(device_ID);
   412  007AA0  C045  F001         	movff	main@device_ID,uart_write_unsigned_int@number
   413  007AA4  C046  F002         	movff	main@device_ID+1,uart_write_unsigned_int@number+1
   414  007AA8  EC1A  F03B         	call	_uart_write_unsigned_int	;wreg free
   415  007AAC                     l1935:
   416                           
   417                           ;main.c: 25: }
   418                           ;main.c: 26: if (indicator == 's')
   419  007AAC  0E73               	movlw	115
   420  007AAE  1849               	xorwf	main@indicator,w,c
   421  007AB0  A4D8               	btfss	status,2,c
   422  007AB2  D013               	goto	l1943
   423                           
   424                           ;main.c: 27: {
   425                           ;main.c: 28: uart_write_char('s');
   426  007AB4  0E73               	movlw	115
   427  007AB6  ECEE  F03A         	call	_uart_write_char
   428                           
   429                           ;main.c: 29: unsigned int sensor_1 = read_sensor(13);
   430  007ABA  0E00               	movlw	0
   431  007ABC  6E18               	movwf	read_sensor@sensor+1,c
   432  007ABE  0E0D               	movlw	13
   433  007AC0  6E17               	movwf	read_sensor@sensor,c
   434  007AC2  EC05  F03C         	call	_read_sensor	;wreg free
   435  007AC6  C017  F047         	movff	?_read_sensor,main@sensor_1
   436  007ACA  C018  F048         	movff	?_read_sensor+1,main@sensor_1+1
   437                           
   438                           ;main.c: 30: uart_write_unsigned_int(sensor_1);
   439  007ACE  C047  F001         	movff	main@sensor_1,uart_write_unsigned_int@number
   440  007AD2  C048  F002         	movff	main@sensor_1+1,uart_write_unsigned_int@number+1
   441  007AD6  EC1A  F03B         	call	_uart_write_unsigned_int	;wreg free
   442  007ADA                     l1943:
   443                           
   444                           ;main.c: 31: }
   445                           ;main.c: 32: if (indicator == 'f')
   446  007ADA  0E66               	movlw	102
   447  007ADC  1849               	xorwf	main@indicator,w,c
   448  007ADE  A4D8               	btfss	status,2,c
   449  007AE0  D009               	goto	l1949
   450                           
   451                           ;main.c: 33: {
   452                           ;main.c: 34: uart_write_char('f');
   453  007AE2  0E66               	movlw	102
   454  007AE4  ECEE  F03A         	call	_uart_write_char
   455                           
   456                           ;main.c: 36: uart_write_unsigned_int(bb);
   457  007AE8  C043  F001         	movff	main@bb,uart_write_unsigned_int@number
   458  007AEC  C044  F002         	movff	main@bb+1,uart_write_unsigned_int@number+1
   459  007AF0  EC1A  F03B         	call	_uart_write_unsigned_int	;wreg free
   460  007AF4                     l1949:
   461                           
   462                           ;main.c: 37: }
   463                           ;main.c: 38: delay_ms(500);
   464  007AF4  0E01               	movlw	1
   465  007AF6  6E0A               	movwf	delay_ms@n+1,c
   466  007AF8  0EF4               	movlw	244
   467  007AFA  6E09               	movwf	delay_ms@n,c
   468  007AFC  EC38  F03B         	call	_delay_ms	;wreg free
   469  007B00  D7BE               	goto	l1927
   470  007B02                     __end_of_main:
   471                           	opt stack 0
   472                           postinc0	equ	0xFEE
   473                           wreg	equ	0xFE8
   474                           status	equ	0xFD8
   475                           
   476 ;; *************** function _uart_write_unsigned_int *****************
   477 ;; Defined at:
   478 ;;		line 39 in file "uart.c"
   479 ;; Parameters:    Size  Location     Type
   480 ;;  number          2    0[COMRAM] unsigned int 
   481 ;; Auto vars:     Size  Location     Type
   482 ;;  char2           1    3[COMRAM] unsigned char 
   483 ;;  char1           1    2[COMRAM] unsigned char 
   484 ;; Return value:  Size  Location     Type
   485 ;;                  1    wreg      void 
   486 ;; Registers used:
   487 ;;		wreg, status,2
   488 ;; Tracked objects:
   489 ;;		On entry : 0/0
   490 ;;		On exit  : 0/0
   491 ;;		Unchanged: 0/0
   492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   493 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   494 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   496 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   497 ;;Total ram usage:        4 bytes
   498 ;; Hardware stack levels used:    1
   499 ;; This function calls:
   500 ;;		Nothing
   501 ;; This function is called by:
   502 ;;		_main
   503 ;; This function uses a non-reentrant model
   504 ;;
   505                           
   506                           	psect	text1
   507  007634                     __ptext1:
   508                           	opt stack 0
   509  007634                     _uart_write_unsigned_int:
   510                           	opt stack 30
   511                           
   512                           ;uart.c: 41: char char1 = number & 0xFF;
   513                           
   514                           ;incstack = 0
   515  007634  C001  F003         	movff	uart_write_unsigned_int@number,uart_write_unsigned_int@char1
   516                           
   517                           ;uart.c: 42: char char2 = number >> 8;
   518  007638  5002               	movf	uart_write_unsigned_int@number+1,w,c
   519  00763A  6E04               	movwf	uart_write_unsigned_int@char2,c
   520  00763C                     l242:
   521  00763C  A2AC               	btfss	4012,1,c	;volatile
   522  00763E  D7FE               	goto	l242
   523                           
   524                           ;uart.c: 45: TXREG1 = char1;
   525  007640  C003  FFAD         	movff	uart_write_unsigned_int@char1,4013	;volatile
   526  007644                     l245:
   527  007644  A2AC               	btfss	4012,1,c	;volatile
   528  007646  D7FE               	goto	l245
   529                           
   530                           ;uart.c: 47: TXREG1 = char2;
   531  007648  C004  FFAD         	movff	uart_write_unsigned_int@char2,4013	;volatile
   532  00764C  0012               	return		;funcret
   533  00764E                     __end_of_uart_write_unsigned_int:
   534                           	opt stack 0
   535                           postinc0	equ	0xFEE
   536                           wreg	equ	0xFE8
   537                           status	equ	0xFD8
   538                           
   539 ;; *************** function _uart_write_char *****************
   540 ;; Defined at:
   541 ;;		line 24 in file "uart.c"
   542 ;; Parameters:    Size  Location     Type
   543 ;;  data            1    wreg     unsigned char 
   544 ;; Auto vars:     Size  Location     Type
   545 ;;  data            1    0[COMRAM] unsigned char 
   546 ;; Return value:  Size  Location     Type
   547 ;;                  1    wreg      void 
   548 ;; Registers used:
   549 ;;		wreg
   550 ;; Tracked objects:
   551 ;;		On entry : 0/0
   552 ;;		On exit  : 0/0
   553 ;;		Unchanged: 0/0
   554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   556 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   558 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   559 ;;Total ram usage:        1 bytes
   560 ;; Hardware stack levels used:    1
   561 ;; This function calls:
   562 ;;		Nothing
   563 ;; This function is called by:
   564 ;;		_main
   565 ;;		_uart_write_string
   566 ;; This function uses a non-reentrant model
   567 ;;
   568                           
   569                           	psect	text2
   570  0075DC                     __ptext2:
   571                           	opt stack 0
   572  0075DC                     _uart_write_char:
   573                           	opt stack 30
   574                           
   575                           ;incstack = 0
   576                           ;uart_write_char@data stored from wreg
   577  0075DC  6E01               	movwf	uart_write_char@data,c
   578  0075DE                     l230:
   579  0075DE  A2AC               	btfss	4012,1,c	;volatile
   580  0075E0  D7FE               	goto	l230
   581                           
   582                           ;uart.c: 28: TXREG1 = data;
   583  0075E2  C001  FFAD         	movff	uart_write_char@data,4013	;volatile
   584  0075E6  0012               	return		;funcret
   585  0075E8                     __end_of_uart_write_char:
   586                           	opt stack 0
   587                           postinc0	equ	0xFEE
   588                           wreg	equ	0xFE8
   589                           status	equ	0xFD8
   590                           
   591 ;; *************** function _setup_spi *****************
   592 ;; Defined at:
   593 ;;		line 4 in file "spi.c"
   594 ;; Parameters:    Size  Location     Type
   595 ;;		None
   596 ;; Auto vars:     Size  Location     Type
   597 ;;		None
   598 ;; Return value:  Size  Location     Type
   599 ;;                  1    wreg      void 
   600 ;; Registers used:
   601 ;;		None
   602 ;; Tracked objects:
   603 ;;		On entry : 0/0
   604 ;;		On exit  : 0/0
   605 ;;		Unchanged: 0/0
   606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   610 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   611 ;;Total ram usage:        0 bytes
   612 ;; Hardware stack levels used:    1
   613 ;; This function calls:
   614 ;;		Nothing
   615 ;; This function is called by:
   616 ;;		_main
   617 ;; This function uses a non-reentrant model
   618 ;;
   619                           
   620                           	psect	text3
   621  00761E                     __ptext3:
   622                           	opt stack 0
   623  00761E                     _setup_spi:
   624                           	opt stack 30
   625                           
   626                           ;spi.c: 6: SSPSTATbits.SMP = 0;
   627                           
   628                           ;incstack = 0
   629  00761E  9EC7               	bcf	4039,7,c	;volatile
   630                           
   631                           ;spi.c: 7: SSPSTATbits.CKE = 0;
   632  007620  9CC7               	bcf	4039,6,c	;volatile
   633                           
   634                           ;spi.c: 9: SSPCON1bits.WCOL = 0;
   635  007622  9EC6               	bcf	4038,7,c	;volatile
   636                           
   637                           ;spi.c: 10: SSPCON1bits.CKP = 1;
   638  007624  88C6               	bsf	4038,4,c	;volatile
   639                           
   640                           ;spi.c: 12: SSPCON1bits.SSPM3 = 0;
   641  007626  96C6               	bcf	4038,3,c	;volatile
   642                           
   643                           ;spi.c: 13: SSPCON1bits.SSPM2 = 0;
   644  007628  94C6               	bcf	4038,2,c	;volatile
   645                           
   646                           ;spi.c: 14: SSPCON1bits.SSPM1 = 1;
   647  00762A  82C6               	bsf	4038,1,c	;volatile
   648                           
   649                           ;spi.c: 15: SSPCON1bits.SSPM0 = 0;
   650  00762C  90C6               	bcf	4038,0,c	;volatile
   651                           
   652                           ;spi.c: 17: PIE1bits.SSPIE = 0;
   653  00762E  969D               	bcf	3997,3,c	;volatile
   654                           
   655                           ;spi.c: 19: SSPCON1bits.SSPEN = 1;
   656  007630  8AC6               	bsf	4038,5,c	;volatile
   657  007632  0012               	return		;funcret
   658  007634                     __end_of_setup_spi:
   659                           	opt stack 0
   660                           postinc0	equ	0xFEE
   661                           wreg	equ	0xFE8
   662                           status	equ	0xFD8
   663                           
   664 ;; *************** function _setup_mcu *****************
   665 ;; Defined at:
   666 ;;		line 6 in file "micro_setup.c"
   667 ;; Parameters:    Size  Location     Type
   668 ;;		None
   669 ;; Auto vars:     Size  Location     Type
   670 ;;		None
   671 ;; Return value:  Size  Location     Type
   672 ;;                  1    wreg      void 
   673 ;; Registers used:
   674 ;;		wreg, status,2, cstack
   675 ;; Tracked objects:
   676 ;;		On entry : 0/0
   677 ;;		On exit  : 0/0
   678 ;;		Unchanged: 0/0
   679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   683 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   684 ;;Total ram usage:        0 bytes
   685 ;; Hardware stack levels used:    1
   686 ;; Hardware stack levels required when called:    1
   687 ;; This function calls:
   688 ;;		_init_uart
   689 ;;		_setup_port
   690 ;; This function is called by:
   691 ;;		_main
   692 ;; This function uses a non-reentrant model
   693 ;;
   694                           
   695                           	psect	text4
   696  0075D2                     __ptext4:
   697                           	opt stack 0
   698  0075D2                     _setup_mcu:
   699                           	opt stack 29
   700                           
   701                           ;micro_setup.c: 8: setup_port();
   702                           
   703                           ;incstack = 0
   704  0075D2  ECF4  F03A         	call	_setup_port	;wreg free
   705                           
   706                           ;micro_setup.c: 9: init_uart();
   707  0075D6  EC05  F03B         	call	_init_uart	;wreg free
   708  0075DA  0012               	return		;funcret
   709  0075DC                     __end_of_setup_mcu:
   710                           	opt stack 0
   711                           postinc0	equ	0xFEE
   712                           wreg	equ	0xFE8
   713                           status	equ	0xFD8
   714                           
   715 ;; *************** function _setup_port *****************
   716 ;; Defined at:
   717 ;;		line 12 in file "micro_setup.c"
   718 ;; Parameters:    Size  Location     Type
   719 ;;		None
   720 ;; Auto vars:     Size  Location     Type
   721 ;;		None
   722 ;; Return value:  Size  Location     Type
   723 ;;                  1    wreg      void 
   724 ;; Registers used:
   725 ;;		wreg, status,2
   726 ;; Tracked objects:
   727 ;;		On entry : 0/0
   728 ;;		On exit  : 0/0
   729 ;;		Unchanged: 0/0
   730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   734 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   735 ;;Total ram usage:        0 bytes
   736 ;; Hardware stack levels used:    1
   737 ;; This function calls:
   738 ;;		Nothing
   739 ;; This function is called by:
   740 ;;		_setup_mcu
   741 ;; This function uses a non-reentrant model
   742 ;;
   743                           
   744                           	psect	text5
   745  0075E8                     __ptext5:
   746                           	opt stack 0
   747  0075E8                     _setup_port:
   748                           	opt stack 29
   749                           
   750                           ;micro_setup.c: 15: TRISB = 0b00000000;
   751                           
   752                           ;incstack = 0
   753  0075E8  0E00               	movlw	0
   754  0075EA  6E93               	movwf	3987,c	;volatile
   755                           
   756                           ;micro_setup.c: 16: TRISC = 0b10010000;
   757  0075EC  0E90               	movlw	144
   758  0075EE  6E94               	movwf	3988,c	;volatile
   759                           
   760                           ;micro_setup.c: 17: LATCbits.LATC1=1;
   761  0075F0  828B               	bsf	3979,1,c	;volatile
   762                           
   763                           ;micro_setup.c: 18: LATCbits.LATC0=1;
   764  0075F2  808B               	bsf	3979,0,c	;volatile
   765                           
   766                           ;micro_setup.c: 19: LATCbits.LATC2=1;
   767  0075F4  848B               	bsf	3979,2,c	;volatile
   768  0075F6  0012               	return		;funcret
   769  0075F8                     __end_of_setup_port:
   770                           	opt stack 0
   771                           postinc0	equ	0xFEE
   772                           wreg	equ	0xFE8
   773                           status	equ	0xFD8
   774                           
   775 ;; *************** function _init_uart *****************
   776 ;; Defined at:
   777 ;;		line 22 in file "micro_setup.c"
   778 ;; Parameters:    Size  Location     Type
   779 ;;		None
   780 ;; Auto vars:     Size  Location     Type
   781 ;;		None
   782 ;; Return value:  Size  Location     Type
   783 ;;                  1    wreg      void 
   784 ;; Registers used:
   785 ;;		wreg, status,2
   786 ;; Tracked objects:
   787 ;;		On entry : 0/0
   788 ;;		On exit  : 0/0
   789 ;;		Unchanged: 0/0
   790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   794 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   795 ;;Total ram usage:        0 bytes
   796 ;; Hardware stack levels used:    1
   797 ;; This function calls:
   798 ;;		Nothing
   799 ;; This function is called by:
   800 ;;		_setup_mcu
   801 ;; This function uses a non-reentrant model
   802 ;;
   803                           
   804                           	psect	text6
   805  00760A                     __ptext6:
   806                           	opt stack 0
   807  00760A                     _init_uart:
   808                           	opt stack 29
   809                           
   810                           ;micro_setup.c: 24: TXSTA1 = 0b00100000;
   811                           
   812                           ;incstack = 0
   813  00760A  0E20               	movlw	32
   814  00760C  6EAC               	movwf	4012,c	;volatile
   815                           
   816                           ;micro_setup.c: 36: SPBRG1 = 12;
   817  00760E  0E0C               	movlw	12
   818  007610  6EAF               	movwf	4015,c	;volatile
   819                           
   820                           ;micro_setup.c: 38: BAUDCON1 = 0b00000000;
   821  007612  0E00               	movlw	0
   822  007614  6EA7               	movwf	4007,c	;volatile
   823                           
   824                           ;micro_setup.c: 58: RCSTA1bits.SPEN=1;
   825  007616  8EAB               	bsf	4011,7,c	;volatile
   826                           
   827                           ;micro_setup.c: 59: RCSTA1bits.RX9=0;
   828  007618  9CAB               	bcf	4011,6,c	;volatile
   829                           
   830                           ;micro_setup.c: 60: RCSTA1bits.CREN=1;
   831  00761A  88AB               	bsf	4011,4,c	;volatile
   832  00761C  0012               	return		;funcret
   833  00761E                     __end_of_init_uart:
   834                           	opt stack 0
   835                           postinc0	equ	0xFEE
   836                           wreg	equ	0xFE8
   837                           status	equ	0xFD8
   838                           
   839 ;; *************** function _setup_AD7147 *****************
   840 ;; Defined at:
   841 ;;		line 6 in file "AD7147.c"
   842 ;; Parameters:    Size  Location     Type
   843 ;;  cdc             2   32[COMRAM] unsigned int 
   844 ;; Auto vars:     Size  Location     Type
   845 ;;  StageBuffer    16   50[COMRAM] unsigned int [8]
   846 ;;  AD7147Regist   16   34[COMRAM] unsigned int [8]
   847 ;; Return value:  Size  Location     Type
   848 ;;                  1    wreg      void 
   849 ;; Registers used:
   850 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   851 ;; Tracked objects:
   852 ;;		On entry : 0/0
   853 ;;		On exit  : 0/0
   854 ;;		Unchanged: 0/0
   855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   856 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   857 ;;      Locals:        32       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   859 ;;      Totals:        34       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   860 ;;Total ram usage:       34 bytes
   861 ;; Hardware stack levels used:    1
   862 ;; Hardware stack levels required when called:    2
   863 ;; This function calls:
   864 ;;		_get_CDC
   865 ;;		_write_AD7147
   866 ;; This function is called by:
   867 ;;		_main
   868 ;; This function uses a non-reentrant model
   869 ;;
   870                           
   871                           	psect	text7
   872  007B02                     __ptext7:
   873                           	opt stack 0
   874  007B02                     _setup_AD7147:
   875                           	opt stack 28
   876                           
   877                           ;AD7147.c: 8: get_CDC(cdc,0);
   878                           
   879                           ;incstack = 0
   880  007B02  C021  F001         	movff	setup_AD7147@cdc,get_CDC@cdc
   881  007B06  C022  F002         	movff	setup_AD7147@cdc+1,get_CDC@cdc+1
   882  007B0A  0E00               	movlw	0
   883  007B0C  6E04               	movwf	get_CDC@state+1,c
   884  007B0E  0E00               	movlw	0
   885  007B10  6E03               	movwf	get_CDC@state,c
   886  007B12  EC27  F03B         	call	_get_CDC	;wreg free
   887                           
   888                           ;AD7147.c: 9: unsigned int StageBuffer[8];
   889                           ;AD7147.c: 24: StageBuffer[0] = 0x0001;
   890  007B16  0E00               	movlw	0
   891  007B18  6E34               	movwf	setup_AD7147@StageBuffer+1,c
   892  007B1A  0E01               	movlw	1
   893  007B1C  6E33               	movwf	setup_AD7147@StageBuffer,c
   894                           
   895                           ;AD7147.c: 25: StageBuffer[1] = 0x0000;
   896  007B1E  0E00               	movlw	0
   897  007B20  6E36               	movwf	setup_AD7147@StageBuffer+3,c
   898  007B22  0E00               	movlw	0
   899  007B24  6E35               	movwf	setup_AD7147@StageBuffer+2,c
   900                           
   901                           ;AD7147.c: 26: StageBuffer[2] = 0x0100;
   902  007B26  0E01               	movlw	1
   903  007B28  6E38               	movwf	setup_AD7147@StageBuffer+5,c
   904  007B2A  0E00               	movlw	0
   905  007B2C  6E37               	movwf	setup_AD7147@StageBuffer+4,c
   906                           
   907                           ;AD7147.c: 27: StageBuffer[3] = 0x2121;
   908  007B2E  0E21               	movlw	33
   909  007B30  6E3A               	movwf	setup_AD7147@StageBuffer+7,c
   910  007B32  0E21               	movlw	33
   911  007B34  6E39               	movwf	setup_AD7147@StageBuffer+6,c
   912                           
   913                           ;AD7147.c: 28: StageBuffer[4] = 4000;
   914  007B36  0E0F               	movlw	15
   915  007B38  6E3C               	movwf	setup_AD7147@StageBuffer+9,c
   916  007B3A  0EA0               	movlw	160
   917  007B3C  6E3B               	movwf	setup_AD7147@StageBuffer+8,c
   918                           
   919                           ;AD7147.c: 29: StageBuffer[5] = 4000;
   920  007B3E  0E0F               	movlw	15
   921  007B40  6E3E               	movwf	setup_AD7147@StageBuffer+11,c
   922  007B42  0EA0               	movlw	160
   923  007B44  6E3D               	movwf	setup_AD7147@StageBuffer+10,c
   924                           
   925                           ;AD7147.c: 30: StageBuffer[6] = 4250;
   926  007B46  0E10               	movlw	16
   927  007B48  6E40               	movwf	setup_AD7147@StageBuffer+13,c
   928  007B4A  0E9A               	movlw	154
   929  007B4C  6E3F               	movwf	setup_AD7147@StageBuffer+12,c
   930                           
   931                           ;AD7147.c: 31: StageBuffer[7] = 4250;
   932  007B4E  0E10               	movlw	16
   933  007B50  6E42               	movwf	setup_AD7147@StageBuffer+15,c
   934  007B52  0E9A               	movlw	154
   935  007B54  6E41               	movwf	setup_AD7147@StageBuffer+14,c
   936                           
   937                           ;AD7147.c: 32: write_AD7147(0x080, 8, StageBuffer);
   938  007B56  0E00               	movlw	0
   939  007B58  6E18               	movwf	write_AD7147@RegisterAddress+1,c
   940  007B5A  0E80               	movlw	128
   941  007B5C  6E17               	movwf	write_AD7147@RegisterAddress,c
   942  007B5E  0E00               	movlw	0
   943  007B60  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
   944  007B62  0E08               	movlw	8
   945  007B64  6E19               	movwf	write_AD7147@NumberOfRegisters,c
   946  007B66  0E33               	movlw	low setup_AD7147@StageBuffer
   947  007B68  6E1B               	movwf	write_AD7147@DataBuffer,c
   948  007B6A  0E00               	movlw	high setup_AD7147@StageBuffer
   949  007B6C  6E1C               	movwf	write_AD7147@DataBuffer+1,c
   950  007B6E  EC79  F03B         	call	_write_AD7147	;wreg free
   951                           
   952                           ;AD7147.c: 37: StageBuffer[0]=0x3FFB;
   953  007B72  0E3F               	movlw	63
   954  007B74  6E34               	movwf	setup_AD7147@StageBuffer+1,c
   955  007B76  0EFB               	movlw	251
   956  007B78  6E33               	movwf	setup_AD7147@StageBuffer,c
   957                           
   958                           ;AD7147.c: 38: StageBuffer[1]=0x1FFF;
   959  007B7A  0E1F               	movlw	31
   960  007B7C  6E36               	movwf	setup_AD7147@StageBuffer+3,c
   961  007B7E  6835               	setf	setup_AD7147@StageBuffer+2,c
   962                           
   963                           ;AD7147.c: 39: StageBuffer[2]=0x0100;
   964  007B80  0E01               	movlw	1
   965  007B82  6E38               	movwf	setup_AD7147@StageBuffer+5,c
   966  007B84  0E00               	movlw	0
   967  007B86  6E37               	movwf	setup_AD7147@StageBuffer+4,c
   968                           
   969                           ;AD7147.c: 40: StageBuffer[3]=0x2121;
   970  007B88  0E21               	movlw	33
   971  007B8A  6E3A               	movwf	setup_AD7147@StageBuffer+7,c
   972  007B8C  0E21               	movlw	33
   973  007B8E  6E39               	movwf	setup_AD7147@StageBuffer+6,c
   974                           
   975                           ;AD7147.c: 41: StageBuffer[4]=4000;
   976  007B90  0E0F               	movlw	15
   977  007B92  6E3C               	movwf	setup_AD7147@StageBuffer+9,c
   978  007B94  0EA0               	movlw	160
   979  007B96  6E3B               	movwf	setup_AD7147@StageBuffer+8,c
   980                           
   981                           ;AD7147.c: 42: StageBuffer[5]=4000;
   982  007B98  0E0F               	movlw	15
   983  007B9A  6E3E               	movwf	setup_AD7147@StageBuffer+11,c
   984  007B9C  0EA0               	movlw	160
   985  007B9E  6E3D               	movwf	setup_AD7147@StageBuffer+10,c
   986                           
   987                           ;AD7147.c: 43: StageBuffer[6]=4250;
   988  007BA0  0E10               	movlw	16
   989  007BA2  6E40               	movwf	setup_AD7147@StageBuffer+13,c
   990  007BA4  0E9A               	movlw	154
   991  007BA6  6E3F               	movwf	setup_AD7147@StageBuffer+12,c
   992                           
   993                           ;AD7147.c: 44: StageBuffer[7]=4250;
   994  007BA8  0E10               	movlw	16
   995  007BAA  6E42               	movwf	setup_AD7147@StageBuffer+15,c
   996  007BAC  0E9A               	movlw	154
   997  007BAE  6E41               	movwf	setup_AD7147@StageBuffer+14,c
   998                           
   999                           ;AD7147.c: 45: write_AD7147(0x088, 8, StageBuffer);
  1000  007BB0  0E00               	movlw	0
  1001  007BB2  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1002  007BB4  0E88               	movlw	136
  1003  007BB6  6E17               	movwf	write_AD7147@RegisterAddress,c
  1004  007BB8  0E00               	movlw	0
  1005  007BBA  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1006  007BBC  0E08               	movlw	8
  1007  007BBE  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1008  007BC0  0E33               	movlw	low setup_AD7147@StageBuffer
  1009  007BC2  6E1B               	movwf	write_AD7147@DataBuffer,c
  1010  007BC4  0E00               	movlw	high setup_AD7147@StageBuffer
  1011  007BC6  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1012  007BC8  EC79  F03B         	call	_write_AD7147	;wreg free
  1013                           
  1014                           ;AD7147.c: 50: StageBuffer[0]=0x3FEF;
  1015  007BCC  0E3F               	movlw	63
  1016  007BCE  6E34               	movwf	setup_AD7147@StageBuffer+1,c
  1017  007BD0  0EEF               	movlw	239
  1018  007BD2  6E33               	movwf	setup_AD7147@StageBuffer,c
  1019                           
  1020                           ;AD7147.c: 51: StageBuffer[1]=0x1FFF;
  1021  007BD4  0E1F               	movlw	31
  1022  007BD6  6E36               	movwf	setup_AD7147@StageBuffer+3,c
  1023  007BD8  6835               	setf	setup_AD7147@StageBuffer+2,c
  1024                           
  1025                           ;AD7147.c: 52: StageBuffer[2]=0x0100;
  1026  007BDA  0E01               	movlw	1
  1027  007BDC  6E38               	movwf	setup_AD7147@StageBuffer+5,c
  1028  007BDE  0E00               	movlw	0
  1029  007BE0  6E37               	movwf	setup_AD7147@StageBuffer+4,c
  1030                           
  1031                           ;AD7147.c: 53: StageBuffer[3]=0x2121;
  1032  007BE2  0E21               	movlw	33
  1033  007BE4  6E3A               	movwf	setup_AD7147@StageBuffer+7,c
  1034  007BE6  0E21               	movlw	33
  1035  007BE8  6E39               	movwf	setup_AD7147@StageBuffer+6,c
  1036                           
  1037                           ;AD7147.c: 54: StageBuffer[4]=4000;
  1038  007BEA  0E0F               	movlw	15
  1039  007BEC  6E3C               	movwf	setup_AD7147@StageBuffer+9,c
  1040  007BEE  0EA0               	movlw	160
  1041  007BF0  6E3B               	movwf	setup_AD7147@StageBuffer+8,c
  1042                           
  1043                           ;AD7147.c: 55: StageBuffer[5]=4000;
  1044  007BF2  0E0F               	movlw	15
  1045  007BF4  6E3E               	movwf	setup_AD7147@StageBuffer+11,c
  1046  007BF6  0EA0               	movlw	160
  1047  007BF8  6E3D               	movwf	setup_AD7147@StageBuffer+10,c
  1048                           
  1049                           ;AD7147.c: 56: StageBuffer[6]=4250;
  1050  007BFA  0E10               	movlw	16
  1051  007BFC  6E40               	movwf	setup_AD7147@StageBuffer+13,c
  1052  007BFE  0E9A               	movlw	154
  1053  007C00  6E3F               	movwf	setup_AD7147@StageBuffer+12,c
  1054                           
  1055                           ;AD7147.c: 57: StageBuffer[7]=4250;
  1056  007C02  0E10               	movlw	16
  1057  007C04  6E42               	movwf	setup_AD7147@StageBuffer+15,c
  1058  007C06  0E9A               	movlw	154
  1059  007C08  6E41               	movwf	setup_AD7147@StageBuffer+14,c
  1060                           
  1061                           ;AD7147.c: 58: write_AD7147(0x090, 8, StageBuffer);
  1062  007C0A  0E00               	movlw	0
  1063  007C0C  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1064  007C0E  0E90               	movlw	144
  1065  007C10  6E17               	movwf	write_AD7147@RegisterAddress,c
  1066  007C12  0E00               	movlw	0
  1067  007C14  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1068  007C16  0E08               	movlw	8
  1069  007C18  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1070  007C1A  0E33               	movlw	low setup_AD7147@StageBuffer
  1071  007C1C  6E1B               	movwf	write_AD7147@DataBuffer,c
  1072  007C1E  0E00               	movlw	high setup_AD7147@StageBuffer
  1073  007C20  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1074  007C22  EC79  F03B         	call	_write_AD7147	;wreg free
  1075                           
  1076                           ;AD7147.c: 63: StageBuffer[0]=0x3FBF;
  1077  007C26  0E3F               	movlw	63
  1078  007C28  6E34               	movwf	setup_AD7147@StageBuffer+1,c
  1079  007C2A  0EBF               	movlw	191
  1080  007C2C  6E33               	movwf	setup_AD7147@StageBuffer,c
  1081                           
  1082                           ;AD7147.c: 64: StageBuffer[1]=0x1FFF;
  1083  007C2E  0E1F               	movlw	31
  1084  007C30  6E36               	movwf	setup_AD7147@StageBuffer+3,c
  1085  007C32  6835               	setf	setup_AD7147@StageBuffer+2,c
  1086                           
  1087                           ;AD7147.c: 65: StageBuffer[2]=0x0100;
  1088  007C34  0E01               	movlw	1
  1089  007C36  6E38               	movwf	setup_AD7147@StageBuffer+5,c
  1090  007C38  0E00               	movlw	0
  1091  007C3A  6E37               	movwf	setup_AD7147@StageBuffer+4,c
  1092                           
  1093                           ;AD7147.c: 66: StageBuffer[3]=0x2121;
  1094  007C3C  0E21               	movlw	33
  1095  007C3E  6E3A               	movwf	setup_AD7147@StageBuffer+7,c
  1096  007C40  0E21               	movlw	33
  1097  007C42  6E39               	movwf	setup_AD7147@StageBuffer+6,c
  1098                           
  1099                           ;AD7147.c: 67: StageBuffer[4]=4000;
  1100  007C44  0E0F               	movlw	15
  1101  007C46  6E3C               	movwf	setup_AD7147@StageBuffer+9,c
  1102  007C48  0EA0               	movlw	160
  1103  007C4A  6E3B               	movwf	setup_AD7147@StageBuffer+8,c
  1104                           
  1105                           ;AD7147.c: 68: StageBuffer[5]=4000;
  1106  007C4C  0E0F               	movlw	15
  1107  007C4E  6E3E               	movwf	setup_AD7147@StageBuffer+11,c
  1108  007C50  0EA0               	movlw	160
  1109  007C52  6E3D               	movwf	setup_AD7147@StageBuffer+10,c
  1110                           
  1111                           ;AD7147.c: 69: StageBuffer[6]=4250;
  1112  007C54  0E10               	movlw	16
  1113  007C56  6E40               	movwf	setup_AD7147@StageBuffer+13,c
  1114  007C58  0E9A               	movlw	154
  1115  007C5A  6E3F               	movwf	setup_AD7147@StageBuffer+12,c
  1116                           
  1117                           ;AD7147.c: 70: StageBuffer[7]=4250;
  1118  007C5C  0E10               	movlw	16
  1119  007C5E  6E42               	movwf	setup_AD7147@StageBuffer+15,c
  1120  007C60  0E9A               	movlw	154
  1121  007C62  6E41               	movwf	setup_AD7147@StageBuffer+14,c
  1122                           
  1123                           ;AD7147.c: 71: write_AD7147(0x098, 8, StageBuffer);
  1124  007C64  0E00               	movlw	0
  1125  007C66  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1126  007C68  0E98               	movlw	152
  1127  007C6A  6E17               	movwf	write_AD7147@RegisterAddress,c
  1128  007C6C  0E00               	movlw	0
  1129  007C6E  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1130  007C70  0E08               	movlw	8
  1131  007C72  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1132  007C74  0E33               	movlw	low setup_AD7147@StageBuffer
  1133  007C76  6E1B               	movwf	write_AD7147@DataBuffer,c
  1134  007C78  0E00               	movlw	high setup_AD7147@StageBuffer
  1135  007C7A  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1136  007C7C  EC79  F03B         	call	_write_AD7147	;wreg free
  1137                           
  1138                           ;AD7147.c: 76: StageBuffer[0]=0x3EFF;
  1139  007C80  0E3E               	movlw	62
  1140  007C82  6E34               	movwf	setup_AD7147@StageBuffer+1,c
  1141  007C84  6833               	setf	setup_AD7147@StageBuffer,c
  1142                           
  1143                           ;AD7147.c: 77: StageBuffer[1]=0x1FFF;
  1144  007C86  0E1F               	movlw	31
  1145  007C88  6E36               	movwf	setup_AD7147@StageBuffer+3,c
  1146  007C8A  6835               	setf	setup_AD7147@StageBuffer+2,c
  1147                           
  1148                           ;AD7147.c: 78: StageBuffer[2]=0x0100;
  1149  007C8C  0E01               	movlw	1
  1150  007C8E  6E38               	movwf	setup_AD7147@StageBuffer+5,c
  1151  007C90  0E00               	movlw	0
  1152  007C92  6E37               	movwf	setup_AD7147@StageBuffer+4,c
  1153                           
  1154                           ;AD7147.c: 79: StageBuffer[3]=0x2121;
  1155  007C94  0E21               	movlw	33
  1156  007C96  6E3A               	movwf	setup_AD7147@StageBuffer+7,c
  1157  007C98  0E21               	movlw	33
  1158  007C9A  6E39               	movwf	setup_AD7147@StageBuffer+6,c
  1159                           
  1160                           ;AD7147.c: 80: StageBuffer[4]=4000;
  1161  007C9C  0E0F               	movlw	15
  1162  007C9E  6E3C               	movwf	setup_AD7147@StageBuffer+9,c
  1163  007CA0  0EA0               	movlw	160
  1164  007CA2  6E3B               	movwf	setup_AD7147@StageBuffer+8,c
  1165                           
  1166                           ;AD7147.c: 81: StageBuffer[5]=4000;
  1167  007CA4  0E0F               	movlw	15
  1168  007CA6  6E3E               	movwf	setup_AD7147@StageBuffer+11,c
  1169  007CA8  0EA0               	movlw	160
  1170  007CAA  6E3D               	movwf	setup_AD7147@StageBuffer+10,c
  1171                           
  1172                           ;AD7147.c: 82: StageBuffer[6]=4250;
  1173  007CAC  0E10               	movlw	16
  1174  007CAE  6E40               	movwf	setup_AD7147@StageBuffer+13,c
  1175  007CB0  0E9A               	movlw	154
  1176  007CB2  6E3F               	movwf	setup_AD7147@StageBuffer+12,c
  1177                           
  1178                           ;AD7147.c: 83: StageBuffer[7]=4250;
  1179  007CB4  0E10               	movlw	16
  1180  007CB6  6E42               	movwf	setup_AD7147@StageBuffer+15,c
  1181  007CB8  0E9A               	movlw	154
  1182  007CBA  6E41               	movwf	setup_AD7147@StageBuffer+14,c
  1183                           
  1184                           ;AD7147.c: 84: write_AD7147(0x0A0, 8, StageBuffer);
  1185  007CBC  0E00               	movlw	0
  1186  007CBE  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1187  007CC0  0EA0               	movlw	160
  1188  007CC2  6E17               	movwf	write_AD7147@RegisterAddress,c
  1189  007CC4  0E00               	movlw	0
  1190  007CC6  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1191  007CC8  0E08               	movlw	8
  1192  007CCA  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1193  007CCC  0E33               	movlw	low setup_AD7147@StageBuffer
  1194  007CCE  6E1B               	movwf	write_AD7147@DataBuffer,c
  1195  007CD0  0E00               	movlw	high setup_AD7147@StageBuffer
  1196  007CD2  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1197  007CD4  EC79  F03B         	call	_write_AD7147	;wreg free
  1198                           
  1199                           ;AD7147.c: 89: StageBuffer[0]=0x3BFF;
  1200  007CD8  0E3B               	movlw	59
  1201  007CDA  6E34               	movwf	setup_AD7147@StageBuffer+1,c
  1202  007CDC  6833               	setf	setup_AD7147@StageBuffer,c
  1203                           
  1204                           ;AD7147.c: 90: StageBuffer[1]=0x1FFF;
  1205  007CDE  0E1F               	movlw	31
  1206  007CE0  6E36               	movwf	setup_AD7147@StageBuffer+3,c
  1207  007CE2  6835               	setf	setup_AD7147@StageBuffer+2,c
  1208                           
  1209                           ;AD7147.c: 91: StageBuffer[2]=0x0100;
  1210  007CE4  0E01               	movlw	1
  1211  007CE6  6E38               	movwf	setup_AD7147@StageBuffer+5,c
  1212  007CE8  0E00               	movlw	0
  1213  007CEA  6E37               	movwf	setup_AD7147@StageBuffer+4,c
  1214                           
  1215                           ;AD7147.c: 92: StageBuffer[3]=0x2121;
  1216  007CEC  0E21               	movlw	33
  1217  007CEE  6E3A               	movwf	setup_AD7147@StageBuffer+7,c
  1218  007CF0  0E21               	movlw	33
  1219  007CF2  6E39               	movwf	setup_AD7147@StageBuffer+6,c
  1220                           
  1221                           ;AD7147.c: 93: StageBuffer[4]=4000;
  1222  007CF4  0E0F               	movlw	15
  1223  007CF6  6E3C               	movwf	setup_AD7147@StageBuffer+9,c
  1224  007CF8  0EA0               	movlw	160
  1225  007CFA  6E3B               	movwf	setup_AD7147@StageBuffer+8,c
  1226                           
  1227                           ;AD7147.c: 94: StageBuffer[5]=4000;
  1228  007CFC  0E0F               	movlw	15
  1229  007CFE  6E3E               	movwf	setup_AD7147@StageBuffer+11,c
  1230  007D00  0EA0               	movlw	160
  1231  007D02  6E3D               	movwf	setup_AD7147@StageBuffer+10,c
  1232                           
  1233                           ;AD7147.c: 95: StageBuffer[6]=4250;
  1234  007D04  0E10               	movlw	16
  1235  007D06  6E40               	movwf	setup_AD7147@StageBuffer+13,c
  1236  007D08  0E9A               	movlw	154
  1237  007D0A  6E3F               	movwf	setup_AD7147@StageBuffer+12,c
  1238                           
  1239                           ;AD7147.c: 96: StageBuffer[7]=4250;
  1240  007D0C  0E10               	movlw	16
  1241  007D0E  6E42               	movwf	setup_AD7147@StageBuffer+15,c
  1242  007D10  0E9A               	movlw	154
  1243  007D12  6E41               	movwf	setup_AD7147@StageBuffer+14,c
  1244                           
  1245                           ;AD7147.c: 97: write_AD7147(0x0A8, 8, StageBuffer);
  1246  007D14  0E00               	movlw	0
  1247  007D16  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1248  007D18  0EA8               	movlw	168
  1249  007D1A  6E17               	movwf	write_AD7147@RegisterAddress,c
  1250  007D1C  0E00               	movlw	0
  1251  007D1E  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1252  007D20  0E08               	movlw	8
  1253  007D22  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1254  007D24  0E33               	movlw	low setup_AD7147@StageBuffer
  1255  007D26  6E1B               	movwf	write_AD7147@DataBuffer,c
  1256  007D28  0E00               	movlw	high setup_AD7147@StageBuffer
  1257  007D2A  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1258  007D2C  EC79  F03B         	call	_write_AD7147	;wreg free
  1259                           
  1260                           ;AD7147.c: 102: StageBuffer[0]=0x2FFF;
  1261  007D30  0E2F               	movlw	47
  1262  007D32  6E34               	movwf	setup_AD7147@StageBuffer+1,c
  1263  007D34  6833               	setf	setup_AD7147@StageBuffer,c
  1264                           
  1265                           ;AD7147.c: 103: StageBuffer[1]=0x1FFF;
  1266  007D36  0E1F               	movlw	31
  1267  007D38  6E36               	movwf	setup_AD7147@StageBuffer+3,c
  1268  007D3A  6835               	setf	setup_AD7147@StageBuffer+2,c
  1269                           
  1270                           ;AD7147.c: 104: StageBuffer[2]=0x0100;
  1271  007D3C  0E01               	movlw	1
  1272  007D3E  6E38               	movwf	setup_AD7147@StageBuffer+5,c
  1273  007D40  0E00               	movlw	0
  1274  007D42  6E37               	movwf	setup_AD7147@StageBuffer+4,c
  1275                           
  1276                           ;AD7147.c: 105: StageBuffer[3]=0x2121;
  1277  007D44  0E21               	movlw	33
  1278  007D46  6E3A               	movwf	setup_AD7147@StageBuffer+7,c
  1279  007D48  0E21               	movlw	33
  1280  007D4A  6E39               	movwf	setup_AD7147@StageBuffer+6,c
  1281                           
  1282                           ;AD7147.c: 106: StageBuffer[4]=4000;
  1283  007D4C  0E0F               	movlw	15
  1284  007D4E  6E3C               	movwf	setup_AD7147@StageBuffer+9,c
  1285  007D50  0EA0               	movlw	160
  1286  007D52  6E3B               	movwf	setup_AD7147@StageBuffer+8,c
  1287                           
  1288                           ;AD7147.c: 107: StageBuffer[5]=4000;
  1289  007D54  0E0F               	movlw	15
  1290  007D56  6E3E               	movwf	setup_AD7147@StageBuffer+11,c
  1291  007D58  0EA0               	movlw	160
  1292  007D5A  6E3D               	movwf	setup_AD7147@StageBuffer+10,c
  1293                           
  1294                           ;AD7147.c: 108: StageBuffer[6]=4250;
  1295  007D5C  0E10               	movlw	16
  1296  007D5E  6E40               	movwf	setup_AD7147@StageBuffer+13,c
  1297  007D60  0E9A               	movlw	154
  1298  007D62  6E3F               	movwf	setup_AD7147@StageBuffer+12,c
  1299                           
  1300                           ;AD7147.c: 109: StageBuffer[7]=4250;
  1301  007D64  0E10               	movlw	16
  1302  007D66  6E42               	movwf	setup_AD7147@StageBuffer+15,c
  1303  007D68  0E9A               	movlw	154
  1304  007D6A  6E41               	movwf	setup_AD7147@StageBuffer+14,c
  1305                           
  1306                           ;AD7147.c: 110: write_AD7147(0x0B0, 8, StageBuffer);
  1307  007D6C  0E00               	movlw	0
  1308  007D6E  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1309  007D70  0EB0               	movlw	176
  1310  007D72  6E17               	movwf	write_AD7147@RegisterAddress,c
  1311  007D74  0E00               	movlw	0
  1312  007D76  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1313  007D78  0E08               	movlw	8
  1314  007D7A  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1315  007D7C  0E33               	movlw	low setup_AD7147@StageBuffer
  1316  007D7E  6E1B               	movwf	write_AD7147@DataBuffer,c
  1317  007D80  0E00               	movlw	high setup_AD7147@StageBuffer
  1318  007D82  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1319  007D84  EC79  F03B         	call	_write_AD7147	;wreg free
  1320                           
  1321                           ;AD7147.c: 115: StageBuffer[0]=0x3FFF;
  1322  007D88  0E3F               	movlw	63
  1323  007D8A  6E34               	movwf	setup_AD7147@StageBuffer+1,c
  1324  007D8C  6833               	setf	setup_AD7147@StageBuffer,c
  1325                           
  1326                           ;AD7147.c: 116: StageBuffer[1]=0x1FFE;
  1327  007D8E  0E1F               	movlw	31
  1328  007D90  6E36               	movwf	setup_AD7147@StageBuffer+3,c
  1329  007D92  0EFE               	movlw	254
  1330  007D94  6E35               	movwf	setup_AD7147@StageBuffer+2,c
  1331                           
  1332                           ;AD7147.c: 117: StageBuffer[2]=0x0100;
  1333  007D96  0E01               	movlw	1
  1334  007D98  6E38               	movwf	setup_AD7147@StageBuffer+5,c
  1335  007D9A  0E00               	movlw	0
  1336  007D9C  6E37               	movwf	setup_AD7147@StageBuffer+4,c
  1337                           
  1338                           ;AD7147.c: 118: StageBuffer[3]=0x2121;
  1339  007D9E  0E21               	movlw	33
  1340  007DA0  6E3A               	movwf	setup_AD7147@StageBuffer+7,c
  1341  007DA2  0E21               	movlw	33
  1342  007DA4  6E39               	movwf	setup_AD7147@StageBuffer+6,c
  1343                           
  1344                           ;AD7147.c: 119: StageBuffer[4]=4000;
  1345  007DA6  0E0F               	movlw	15
  1346  007DA8  6E3C               	movwf	setup_AD7147@StageBuffer+9,c
  1347  007DAA  0EA0               	movlw	160
  1348  007DAC  6E3B               	movwf	setup_AD7147@StageBuffer+8,c
  1349                           
  1350                           ;AD7147.c: 120: StageBuffer[5]=4000;
  1351  007DAE  0E0F               	movlw	15
  1352  007DB0  6E3E               	movwf	setup_AD7147@StageBuffer+11,c
  1353  007DB2  0EA0               	movlw	160
  1354  007DB4  6E3D               	movwf	setup_AD7147@StageBuffer+10,c
  1355                           
  1356                           ;AD7147.c: 121: StageBuffer[6]=4250;
  1357  007DB6  0E10               	movlw	16
  1358  007DB8  6E40               	movwf	setup_AD7147@StageBuffer+13,c
  1359  007DBA  0E9A               	movlw	154
  1360  007DBC  6E3F               	movwf	setup_AD7147@StageBuffer+12,c
  1361                           
  1362                           ;AD7147.c: 122: StageBuffer[7]=4250;
  1363  007DBE  0E10               	movlw	16
  1364  007DC0  6E42               	movwf	setup_AD7147@StageBuffer+15,c
  1365  007DC2  0E9A               	movlw	154
  1366  007DC4  6E41               	movwf	setup_AD7147@StageBuffer+14,c
  1367                           
  1368                           ;AD7147.c: 123: write_AD7147(0x0B8, 8, StageBuffer);
  1369  007DC6  0E00               	movlw	0
  1370  007DC8  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1371  007DCA  0EB8               	movlw	184
  1372  007DCC  6E17               	movwf	write_AD7147@RegisterAddress,c
  1373  007DCE  0E00               	movlw	0
  1374  007DD0  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1375  007DD2  0E08               	movlw	8
  1376  007DD4  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1377  007DD6  0E33               	movlw	low setup_AD7147@StageBuffer
  1378  007DD8  6E1B               	movwf	write_AD7147@DataBuffer,c
  1379  007DDA  0E00               	movlw	high setup_AD7147@StageBuffer
  1380  007DDC  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1381  007DDE  EC79  F03B         	call	_write_AD7147	;wreg free
  1382                           
  1383                           ;AD7147.c: 128: StageBuffer[0]=0x3FFF;
  1384  007DE2  0E3F               	movlw	63
  1385  007DE4  6E34               	movwf	setup_AD7147@StageBuffer+1,c
  1386  007DE6  6833               	setf	setup_AD7147@StageBuffer,c
  1387                           
  1388                           ;AD7147.c: 129: StageBuffer[1]=0x1FFB;
  1389  007DE8  0E1F               	movlw	31
  1390  007DEA  6E36               	movwf	setup_AD7147@StageBuffer+3,c
  1391  007DEC  0EFB               	movlw	251
  1392  007DEE  6E35               	movwf	setup_AD7147@StageBuffer+2,c
  1393                           
  1394                           ;AD7147.c: 130: StageBuffer[2]=0x0100;
  1395  007DF0  0E01               	movlw	1
  1396  007DF2  6E38               	movwf	setup_AD7147@StageBuffer+5,c
  1397  007DF4  0E00               	movlw	0
  1398  007DF6  6E37               	movwf	setup_AD7147@StageBuffer+4,c
  1399                           
  1400                           ;AD7147.c: 131: StageBuffer[3]=0x2121;
  1401  007DF8  0E21               	movlw	33
  1402  007DFA  6E3A               	movwf	setup_AD7147@StageBuffer+7,c
  1403  007DFC  0E21               	movlw	33
  1404  007DFE  6E39               	movwf	setup_AD7147@StageBuffer+6,c
  1405                           
  1406                           ;AD7147.c: 132: StageBuffer[4]=4000;
  1407  007E00  0E0F               	movlw	15
  1408  007E02  6E3C               	movwf	setup_AD7147@StageBuffer+9,c
  1409  007E04  0EA0               	movlw	160
  1410  007E06  6E3B               	movwf	setup_AD7147@StageBuffer+8,c
  1411                           
  1412                           ;AD7147.c: 133: StageBuffer[5]=4000;
  1413  007E08  0E0F               	movlw	15
  1414  007E0A  6E3E               	movwf	setup_AD7147@StageBuffer+11,c
  1415  007E0C  0EA0               	movlw	160
  1416  007E0E  6E3D               	movwf	setup_AD7147@StageBuffer+10,c
  1417                           
  1418                           ;AD7147.c: 134: StageBuffer[6]=4250;
  1419  007E10  0E10               	movlw	16
  1420  007E12  6E40               	movwf	setup_AD7147@StageBuffer+13,c
  1421  007E14  0E9A               	movlw	154
  1422  007E16  6E3F               	movwf	setup_AD7147@StageBuffer+12,c
  1423                           
  1424                           ;AD7147.c: 135: StageBuffer[7]=4250;
  1425  007E18  0E10               	movlw	16
  1426  007E1A  6E42               	movwf	setup_AD7147@StageBuffer+15,c
  1427  007E1C  0E9A               	movlw	154
  1428  007E1E  6E41               	movwf	setup_AD7147@StageBuffer+14,c
  1429                           
  1430                           ;AD7147.c: 136: write_AD7147(0x0C0, 8, StageBuffer);
  1431  007E20  0E00               	movlw	0
  1432  007E22  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1433  007E24  0EC0               	movlw	192
  1434  007E26  6E17               	movwf	write_AD7147@RegisterAddress,c
  1435  007E28  0E00               	movlw	0
  1436  007E2A  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1437  007E2C  0E08               	movlw	8
  1438  007E2E  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1439  007E30  0E33               	movlw	low setup_AD7147@StageBuffer
  1440  007E32  6E1B               	movwf	write_AD7147@DataBuffer,c
  1441  007E34  0E00               	movlw	high setup_AD7147@StageBuffer
  1442  007E36  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1443  007E38  EC79  F03B         	call	_write_AD7147	;wreg free
  1444                           
  1445                           ;AD7147.c: 141: StageBuffer[0]=0x3FFF;
  1446  007E3C  0E3F               	movlw	63
  1447  007E3E  6E34               	movwf	setup_AD7147@StageBuffer+1,c
  1448  007E40  6833               	setf	setup_AD7147@StageBuffer,c
  1449                           
  1450                           ;AD7147.c: 142: StageBuffer[1]=0x1FEF;
  1451  007E42  0E1F               	movlw	31
  1452  007E44  6E36               	movwf	setup_AD7147@StageBuffer+3,c
  1453  007E46  0EEF               	movlw	239
  1454  007E48  6E35               	movwf	setup_AD7147@StageBuffer+2,c
  1455                           
  1456                           ;AD7147.c: 143: StageBuffer[2]=0x0100;
  1457  007E4A  0E01               	movlw	1
  1458  007E4C  6E38               	movwf	setup_AD7147@StageBuffer+5,c
  1459  007E4E  0E00               	movlw	0
  1460  007E50  6E37               	movwf	setup_AD7147@StageBuffer+4,c
  1461                           
  1462                           ;AD7147.c: 144: StageBuffer[3]=0x2121;
  1463  007E52  0E21               	movlw	33
  1464  007E54  6E3A               	movwf	setup_AD7147@StageBuffer+7,c
  1465  007E56  0E21               	movlw	33
  1466  007E58  6E39               	movwf	setup_AD7147@StageBuffer+6,c
  1467                           
  1468                           ;AD7147.c: 145: StageBuffer[4]=4000;
  1469  007E5A  0E0F               	movlw	15
  1470  007E5C  6E3C               	movwf	setup_AD7147@StageBuffer+9,c
  1471  007E5E  0EA0               	movlw	160
  1472  007E60  6E3B               	movwf	setup_AD7147@StageBuffer+8,c
  1473                           
  1474                           ;AD7147.c: 146: StageBuffer[5]=4000;
  1475  007E62  0E0F               	movlw	15
  1476  007E64  6E3E               	movwf	setup_AD7147@StageBuffer+11,c
  1477  007E66  0EA0               	movlw	160
  1478  007E68  6E3D               	movwf	setup_AD7147@StageBuffer+10,c
  1479                           
  1480                           ;AD7147.c: 147: StageBuffer[6]=4250;
  1481  007E6A  0E10               	movlw	16
  1482  007E6C  6E40               	movwf	setup_AD7147@StageBuffer+13,c
  1483  007E6E  0E9A               	movlw	154
  1484  007E70  6E3F               	movwf	setup_AD7147@StageBuffer+12,c
  1485                           
  1486                           ;AD7147.c: 148: StageBuffer[7]=4250;
  1487  007E72  0E10               	movlw	16
  1488  007E74  6E42               	movwf	setup_AD7147@StageBuffer+15,c
  1489  007E76  0E9A               	movlw	154
  1490  007E78  6E41               	movwf	setup_AD7147@StageBuffer+14,c
  1491                           
  1492                           ;AD7147.c: 149: write_AD7147(0x0C8, 8, StageBuffer);
  1493  007E7A  0E00               	movlw	0
  1494  007E7C  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1495  007E7E  0EC8               	movlw	200
  1496  007E80  6E17               	movwf	write_AD7147@RegisterAddress,c
  1497  007E82  0E00               	movlw	0
  1498  007E84  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1499  007E86  0E08               	movlw	8
  1500  007E88  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1501  007E8A  0E33               	movlw	low setup_AD7147@StageBuffer
  1502  007E8C  6E1B               	movwf	write_AD7147@DataBuffer,c
  1503  007E8E  0E00               	movlw	high setup_AD7147@StageBuffer
  1504  007E90  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1505  007E92  EC79  F03B         	call	_write_AD7147	;wreg free
  1506                           
  1507                           ;AD7147.c: 154: StageBuffer[0]=0x3FFF;
  1508  007E96  0E3F               	movlw	63
  1509  007E98  6E34               	movwf	setup_AD7147@StageBuffer+1,c
  1510  007E9A  6833               	setf	setup_AD7147@StageBuffer,c
  1511                           
  1512                           ;AD7147.c: 155: StageBuffer[1]=0x1FBF;
  1513  007E9C  0E1F               	movlw	31
  1514  007E9E  6E36               	movwf	setup_AD7147@StageBuffer+3,c
  1515  007EA0  0EBF               	movlw	191
  1516  007EA2  6E35               	movwf	setup_AD7147@StageBuffer+2,c
  1517                           
  1518                           ;AD7147.c: 156: StageBuffer[2]=0x0100;
  1519  007EA4  0E01               	movlw	1
  1520  007EA6  6E38               	movwf	setup_AD7147@StageBuffer+5,c
  1521  007EA8  0E00               	movlw	0
  1522  007EAA  6E37               	movwf	setup_AD7147@StageBuffer+4,c
  1523                           
  1524                           ;AD7147.c: 157: StageBuffer[3]=0x2121;
  1525  007EAC  0E21               	movlw	33
  1526  007EAE  6E3A               	movwf	setup_AD7147@StageBuffer+7,c
  1527  007EB0  0E21               	movlw	33
  1528  007EB2  6E39               	movwf	setup_AD7147@StageBuffer+6,c
  1529                           
  1530                           ;AD7147.c: 158: StageBuffer[4]=4000;
  1531  007EB4  0E0F               	movlw	15
  1532  007EB6  6E3C               	movwf	setup_AD7147@StageBuffer+9,c
  1533  007EB8  0EA0               	movlw	160
  1534  007EBA  6E3B               	movwf	setup_AD7147@StageBuffer+8,c
  1535                           
  1536                           ;AD7147.c: 159: StageBuffer[5]=4000;
  1537  007EBC  0E0F               	movlw	15
  1538  007EBE  6E3E               	movwf	setup_AD7147@StageBuffer+11,c
  1539  007EC0  0EA0               	movlw	160
  1540  007EC2  6E3D               	movwf	setup_AD7147@StageBuffer+10,c
  1541                           
  1542                           ;AD7147.c: 160: StageBuffer[6]=4250;
  1543  007EC4  0E10               	movlw	16
  1544  007EC6  6E40               	movwf	setup_AD7147@StageBuffer+13,c
  1545  007EC8  0E9A               	movlw	154
  1546  007ECA  6E3F               	movwf	setup_AD7147@StageBuffer+12,c
  1547                           
  1548                           ;AD7147.c: 161: StageBuffer[7]=4250;
  1549  007ECC  0E10               	movlw	16
  1550  007ECE  6E42               	movwf	setup_AD7147@StageBuffer+15,c
  1551  007ED0  0E9A               	movlw	154
  1552  007ED2  6E41               	movwf	setup_AD7147@StageBuffer+14,c
  1553                           
  1554                           ;AD7147.c: 162: write_AD7147(0x0D0, 8, StageBuffer);
  1555  007ED4  0E00               	movlw	0
  1556  007ED6  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1557  007ED8  0ED0               	movlw	208
  1558  007EDA  6E17               	movwf	write_AD7147@RegisterAddress,c
  1559  007EDC  0E00               	movlw	0
  1560  007EDE  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1561  007EE0  0E08               	movlw	8
  1562  007EE2  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1563  007EE4  0E33               	movlw	low setup_AD7147@StageBuffer
  1564  007EE6  6E1B               	movwf	write_AD7147@DataBuffer,c
  1565  007EE8  0E00               	movlw	high setup_AD7147@StageBuffer
  1566  007EEA  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1567  007EEC  EC79  F03B         	call	_write_AD7147	;wreg free
  1568                           
  1569                           ;AD7147.c: 167: StageBuffer[0]=0x3FFF;
  1570  007EF0  0E3F               	movlw	63
  1571  007EF2  6E34               	movwf	setup_AD7147@StageBuffer+1,c
  1572  007EF4  6833               	setf	setup_AD7147@StageBuffer,c
  1573                           
  1574                           ;AD7147.c: 168: StageBuffer[1]=0x1EFF;
  1575  007EF6  0E1E               	movlw	30
  1576  007EF8  6E36               	movwf	setup_AD7147@StageBuffer+3,c
  1577  007EFA  6835               	setf	setup_AD7147@StageBuffer+2,c
  1578                           
  1579                           ;AD7147.c: 169: StageBuffer[2]=0x0100;
  1580  007EFC  0E01               	movlw	1
  1581  007EFE  6E38               	movwf	setup_AD7147@StageBuffer+5,c
  1582  007F00  0E00               	movlw	0
  1583  007F02  6E37               	movwf	setup_AD7147@StageBuffer+4,c
  1584                           
  1585                           ;AD7147.c: 170: StageBuffer[3]=0x2121;
  1586  007F04  0E21               	movlw	33
  1587  007F06  6E3A               	movwf	setup_AD7147@StageBuffer+7,c
  1588  007F08  0E21               	movlw	33
  1589  007F0A  6E39               	movwf	setup_AD7147@StageBuffer+6,c
  1590                           
  1591                           ;AD7147.c: 171: StageBuffer[4]=4000;
  1592  007F0C  0E0F               	movlw	15
  1593  007F0E  6E3C               	movwf	setup_AD7147@StageBuffer+9,c
  1594  007F10  0EA0               	movlw	160
  1595  007F12  6E3B               	movwf	setup_AD7147@StageBuffer+8,c
  1596                           
  1597                           ;AD7147.c: 172: StageBuffer[5]=4000;
  1598  007F14  0E0F               	movlw	15
  1599  007F16  6E3E               	movwf	setup_AD7147@StageBuffer+11,c
  1600  007F18  0EA0               	movlw	160
  1601  007F1A  6E3D               	movwf	setup_AD7147@StageBuffer+10,c
  1602                           
  1603                           ;AD7147.c: 173: StageBuffer[6]=4250;
  1604  007F1C  0E10               	movlw	16
  1605  007F1E  6E40               	movwf	setup_AD7147@StageBuffer+13,c
  1606  007F20  0E9A               	movlw	154
  1607  007F22  6E3F               	movwf	setup_AD7147@StageBuffer+12,c
  1608                           
  1609                           ;AD7147.c: 174: StageBuffer[7]=4250;
  1610  007F24  0E10               	movlw	16
  1611  007F26  6E42               	movwf	setup_AD7147@StageBuffer+15,c
  1612  007F28  0E9A               	movlw	154
  1613  007F2A  6E41               	movwf	setup_AD7147@StageBuffer+14,c
  1614                           
  1615                           ;AD7147.c: 175: write_AD7147(0x0D8, 8, StageBuffer);
  1616  007F2C  0E00               	movlw	0
  1617  007F2E  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1618  007F30  0ED8               	movlw	216
  1619  007F32  6E17               	movwf	write_AD7147@RegisterAddress,c
  1620  007F34  0E00               	movlw	0
  1621  007F36  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1622  007F38  0E08               	movlw	8
  1623  007F3A  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1624  007F3C  0E33               	movlw	low setup_AD7147@StageBuffer
  1625  007F3E  6E1B               	movwf	write_AD7147@DataBuffer,c
  1626  007F40  0E00               	movlw	high setup_AD7147@StageBuffer
  1627  007F42  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1628  007F44  EC79  F03B         	call	_write_AD7147	;wreg free
  1629                           
  1630                           ;AD7147.c: 181: unsigned int AD7147Registers[8];
  1631                           ;AD7147.c: 182: AD7147Registers[0] = 0x02B2;
  1632  007F48  0E02               	movlw	2
  1633  007F4A  6E24               	movwf	setup_AD7147@AD7147Registers+1,c
  1634  007F4C  0EB2               	movlw	178
  1635  007F4E  6E23               	movwf	setup_AD7147@AD7147Registers,c
  1636                           
  1637                           ;AD7147.c: 183: AD7147Registers[1] = 0x0000;
  1638  007F50  0E00               	movlw	0
  1639  007F52  6E26               	movwf	setup_AD7147@AD7147Registers+3,c
  1640  007F54  0E00               	movlw	0
  1641  007F56  6E25               	movwf	setup_AD7147@AD7147Registers+2,c
  1642                           
  1643                           ;AD7147.c: 184: AD7147Registers[2] = 0x3230;
  1644  007F58  0E32               	movlw	50
  1645  007F5A  6E28               	movwf	setup_AD7147@AD7147Registers+5,c
  1646  007F5C  0E30               	movlw	48
  1647  007F5E  6E27               	movwf	setup_AD7147@AD7147Registers+4,c
  1648                           
  1649                           ;AD7147.c: 185: AD7147Registers[3] = 0x0419;
  1650  007F60  0E04               	movlw	4
  1651  007F62  6E2A               	movwf	setup_AD7147@AD7147Registers+7,c
  1652  007F64  0E19               	movlw	25
  1653  007F66  6E29               	movwf	setup_AD7147@AD7147Registers+6,c
  1654                           
  1655                           ;AD7147.c: 186: AD7147Registers[4] = 0x0832;
  1656  007F68  0E08               	movlw	8
  1657  007F6A  6E2C               	movwf	setup_AD7147@AD7147Registers+9,c
  1658  007F6C  0E32               	movlw	50
  1659  007F6E  6E2B               	movwf	setup_AD7147@AD7147Registers+8,c
  1660                           
  1661                           ;AD7147.c: 187: AD7147Registers[5] = 0x0000;
  1662  007F70  0E00               	movlw	0
  1663  007F72  6E2E               	movwf	setup_AD7147@AD7147Registers+11,c
  1664  007F74  0E00               	movlw	0
  1665  007F76  6E2D               	movwf	setup_AD7147@AD7147Registers+10,c
  1666                           
  1667                           ;AD7147.c: 188: AD7147Registers[6] = 0x0000;
  1668  007F78  0E00               	movlw	0
  1669  007F7A  6E30               	movwf	setup_AD7147@AD7147Registers+13,c
  1670  007F7C  0E00               	movlw	0
  1671  007F7E  6E2F               	movwf	setup_AD7147@AD7147Registers+12,c
  1672                           
  1673                           ;AD7147.c: 189: AD7147Registers[7] = 0x0000;
  1674  007F80  0E00               	movlw	0
  1675  007F82  6E32               	movwf	setup_AD7147@AD7147Registers+15,c
  1676  007F84  0E00               	movlw	0
  1677  007F86  6E31               	movwf	setup_AD7147@AD7147Registers+14,c
  1678                           
  1679                           ;AD7147.c: 190: write_AD7147(0x000, 8, AD7147Registers);
  1680  007F88  0E00               	movlw	0
  1681  007F8A  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1682  007F8C  0E00               	movlw	0
  1683  007F8E  6E17               	movwf	write_AD7147@RegisterAddress,c
  1684  007F90  0E00               	movlw	0
  1685  007F92  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1686  007F94  0E08               	movlw	8
  1687  007F96  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1688  007F98  0E23               	movlw	low setup_AD7147@AD7147Registers
  1689  007F9A  6E1B               	movwf	write_AD7147@DataBuffer,c
  1690  007F9C  0E00               	movlw	high setup_AD7147@AD7147Registers
  1691  007F9E  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1692  007FA0  EC79  F03B         	call	_write_AD7147	;wreg free
  1693                           
  1694                           ;AD7147.c: 193: AD7147Registers[1] = 0x0FFF;
  1695  007FA4  0E0F               	movlw	15
  1696  007FA6  6E26               	movwf	setup_AD7147@AD7147Registers+3,c
  1697  007FA8  6825               	setf	setup_AD7147@AD7147Registers+2,c
  1698                           
  1699                           ;AD7147.c: 194: write_AD7147(0x001, 1, AD7147Registers[1]);
  1700  007FAA  0E00               	movlw	0
  1701  007FAC  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1702  007FAE  0E01               	movlw	1
  1703  007FB0  6E17               	movwf	write_AD7147@RegisterAddress,c
  1704  007FB2  0E00               	movlw	0
  1705  007FB4  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1706  007FB6  0E01               	movlw	1
  1707  007FB8  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1708  007FBA  C025  F01B         	movff	setup_AD7147@AD7147Registers+2,write_AD7147@DataBuffer
  1709  007FBE  C026  F01C         	movff	setup_AD7147@AD7147Registers+3,write_AD7147@DataBuffer+1
  1710  007FC2  EC79  F03B         	call	_write_AD7147	;wreg free
  1711                           
  1712                           ;AD7147.c: 196: AD7147Registers[0] = 0x0200;
  1713  007FC6  0E02               	movlw	2
  1714  007FC8  6E24               	movwf	setup_AD7147@AD7147Registers+1,c
  1715  007FCA  0E00               	movlw	0
  1716  007FCC  6E23               	movwf	setup_AD7147@AD7147Registers,c
  1717                           
  1718                           ;AD7147.c: 197: write_AD7147(0x000, 1, AD7147Registers[1]);
  1719  007FCE  0E00               	movlw	0
  1720  007FD0  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1721  007FD2  0E00               	movlw	0
  1722  007FD4  6E17               	movwf	write_AD7147@RegisterAddress,c
  1723  007FD6  0E00               	movlw	0
  1724  007FD8  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1725  007FDA  0E01               	movlw	1
  1726  007FDC  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1727  007FDE  C025  F01B         	movff	setup_AD7147@AD7147Registers+2,write_AD7147@DataBuffer
  1728  007FE2  C026  F01C         	movff	setup_AD7147@AD7147Registers+3,write_AD7147@DataBuffer+1
  1729  007FE6  EC79  F03B         	call	_write_AD7147	;wreg free
  1730                           
  1731                           ;AD7147.c: 202: get_CDC(cdc,1);
  1732  007FEA  C021  F001         	movff	setup_AD7147@cdc,get_CDC@cdc
  1733  007FEE  C022  F002         	movff	setup_AD7147@cdc+1,get_CDC@cdc+1
  1734  007FF2  0E00               	movlw	0
  1735  007FF4  6E04               	movwf	get_CDC@state+1,c
  1736  007FF6  0E01               	movlw	1
  1737  007FF8  6E03               	movwf	get_CDC@state,c
  1738  007FFA  EC27  F03B         	call	_get_CDC	;wreg free
  1739  007FFE  0012               	return		;funcret
  1740  008000                     __end_of_setup_AD7147:
  1741                           	opt stack 0
  1742                           postinc0	equ	0xFEE
  1743                           wreg	equ	0xFE8
  1744                           status	equ	0xFD8
  1745                           
  1746 ;; *************** function _write_AD7147 *****************
  1747 ;; Defined at:
  1748 ;;		line 205 in file "AD7147.c"
  1749 ;; Parameters:    Size  Location     Type
  1750 ;;  RegisterAddr    2   22[COMRAM] unsigned int 
  1751 ;;  NumberOfRegi    2   24[COMRAM] unsigned int 
  1752 ;;  DataBuffer      2   26[COMRAM] PTR unsigned int 
  1753 ;;		 -> RAM(3648), setup_AD7147@AD7147Registers(16), setup_AD7147@StageBuffer(16), 
  1754 ;; Auto vars:     Size  Location     Type
  1755 ;;  i               2   30[COMRAM] int 
  1756 ;;  Register_Val    2   28[COMRAM] unsigned int 
  1757 ;; Return value:  Size  Location     Type
  1758 ;;                  1    wreg      void 
  1759 ;; Registers used:
  1760 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1761 ;; Tracked objects:
  1762 ;;		On entry : 0/0
  1763 ;;		On exit  : 0/0
  1764 ;;		Unchanged: 0/0
  1765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1766 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1767 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1769 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1770 ;;Total ram usage:       10 bytes
  1771 ;; Hardware stack levels used:    1
  1772 ;; Hardware stack levels required when called:    1
  1773 ;; This function calls:
  1774 ;;		_w32_spi
  1775 ;; This function is called by:
  1776 ;;		_setup_AD7147
  1777 ;; This function uses a non-reentrant model
  1778 ;;
  1779                           
  1780                           	psect	text8
  1781  0076F2                     __ptext8:
  1782                           	opt stack 0
  1783  0076F2                     _write_AD7147:
  1784                           	opt stack 28
  1785                           
  1786                           ;AD7147.c: 207: unsigned int Register_Values= 0xE000 + RegisterAddress;
  1787                           
  1788                           ;incstack = 0
  1789  0076F2  0E00               	movlw	0
  1790  0076F4  2417               	addwf	write_AD7147@RegisterAddress,w,c
  1791  0076F6  6E1D               	movwf	write_AD7147@Register_Values,c
  1792  0076F8  0EE0               	movlw	224
  1793  0076FA  2018               	addwfc	write_AD7147@RegisterAddress+1,w,c
  1794  0076FC  6E1E               	movwf	write_AD7147@Register_Values+1,c
  1795                           
  1796                           ;AD7147.c: 209: for (int i=0; i<NumberOfRegisters; i++)
  1797  0076FE  0E00               	movlw	0
  1798  007700  6E20               	movwf	write_AD7147@i+1,c
  1799  007702  0E00               	movlw	0
  1800  007704  6E1F               	movwf	write_AD7147@i,c
  1801  007706  D017               	goto	l1537
  1802  007708                     l1533:
  1803                           
  1804                           ;AD7147.c: 210: {
  1805                           ;AD7147.c: 213: w32_spi((Register_Values+i),DataBuffer[i]);
  1806  007708  501D               	movf	write_AD7147@Register_Values,w,c
  1807  00770A  241F               	addwf	write_AD7147@i,w,c
  1808  00770C  6E01               	movwf	w32_spi@address,c
  1809  00770E  501E               	movf	write_AD7147@Register_Values+1,w,c
  1810  007710  2020               	addwfc	write_AD7147@i+1,w,c
  1811  007712  6E02               	movwf	w32_spi@address+1,c
  1812  007714  90D8               	bcf	status,0,c
  1813  007716  341F               	rlcf	write_AD7147@i,w,c
  1814  007718  6ED9               	movwf	fsr2l,c
  1815  00771A  3420               	rlcf	write_AD7147@i+1,w,c
  1816  00771C  6EDA               	movwf	fsr2h,c
  1817  00771E  501B               	movf	write_AD7147@DataBuffer,w,c
  1818  007720  26D9               	addwf	fsr2l,f,c
  1819  007722  501C               	movf	write_AD7147@DataBuffer+1,w,c
  1820  007724  22DA               	addwfc	fsr2h,f,c
  1821  007726  CFDE F003          	movff	postinc2,w32_spi@data
  1822  00772A  CFDD F004          	movff	postdec2,w32_spi@data+1
  1823  00772E  ECCE  F03B         	call	_w32_spi	;wreg free
  1824  007732  4A1F               	infsnz	write_AD7147@i,f,c
  1825  007734  2A20               	incf	write_AD7147@i+1,f,c
  1826  007736                     l1537:
  1827  007736  5019               	movf	write_AD7147@NumberOfRegisters,w,c
  1828  007738  5C1F               	subwf	write_AD7147@i,w,c
  1829  00773A  501A               	movf	write_AD7147@NumberOfRegisters+1,w,c
  1830  00773C  5820               	subwfb	write_AD7147@i+1,w,c
  1831  00773E  B0D8               	btfsc	status,0,c
  1832  007740  0012               	return	
  1833  007742  D7E2               	goto	l1533
  1834  007744                     __end_of_write_AD7147:
  1835                           	opt stack 0
  1836                           postinc0	equ	0xFEE
  1837                           wreg	equ	0xFE8
  1838                           postinc2	equ	0xFDE
  1839                           postdec2	equ	0xFDD
  1840                           fsr2h	equ	0xFDA
  1841                           fsr2l	equ	0xFD9
  1842                           status	equ	0xFD8
  1843                           
  1844 ;; *************** function _read_sensor *****************
  1845 ;; Defined at:
  1846 ;;		line 232 in file "AD7147.c"
  1847 ;; Parameters:    Size  Location     Type
  1848 ;;  sensor          2   22[COMRAM] unsigned int 
  1849 ;; Auto vars:     Size  Location     Type
  1850 ;;  sensor_value    2   26[COMRAM] unsigned int 
  1851 ;;  register1       2   24[COMRAM] unsigned int 
  1852 ;; Return value:  Size  Location     Type
  1853 ;;                  2   22[COMRAM] unsigned int 
  1854 ;; Registers used:
  1855 ;;		wreg, status,2, status,0, cstack
  1856 ;; Tracked objects:
  1857 ;;		On entry : 0/0
  1858 ;;		On exit  : 0/0
  1859 ;;		Unchanged: 0/0
  1860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1861 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1862 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1864 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1865 ;;Total ram usage:        6 bytes
  1866 ;; Hardware stack levels used:    1
  1867 ;; Hardware stack levels required when called:    2
  1868 ;; This function calls:
  1869 ;;		_sensor_cdc
  1870 ;;		_w16_r16_spi
  1871 ;; This function is called by:
  1872 ;;		_main
  1873 ;; This function uses a non-reentrant model
  1874 ;;
  1875                           
  1876                           	psect	text9
  1877  00780A                     __ptext9:
  1878                           	opt stack 0
  1879  00780A                     _read_sensor:
  1880                           	opt stack 28
  1881                           
  1882                           ;AD7147.c: 234: if ((sensor > 12) && (sensor != 25))
  1883                           
  1884                           ;incstack = 0
  1885  00780A  5018               	movf	read_sensor@sensor+1,w,c
  1886  00780C  E104               	bnz	u730
  1887  00780E  0E0D               	movlw	13
  1888  007810  5C17               	subwf	read_sensor@sensor,w,c
  1889  007812  A0D8               	btfss	status,0,c
  1890  007814  D00B               	goto	l38
  1891  007816                     u730:
  1892  007816  0E19               	movlw	25
  1893  007818  1817               	xorwf	read_sensor@sensor,w,c
  1894  00781A  1018               	iorwf	read_sensor@sensor+1,w,c
  1895  00781C  B4D8               	btfsc	status,2,c
  1896  00781E  D006               	goto	l38
  1897                           
  1898                           ;AD7147.c: 235: {
  1899                           ;AD7147.c: 236: sensor = sensor - 12;
  1900  007820  0EF4               	movlw	244
  1901  007822  2417               	addwf	read_sensor@sensor,w,c
  1902  007824  6E17               	movwf	read_sensor@sensor,c
  1903  007826  0EFF               	movlw	255
  1904  007828  2018               	addwfc	read_sensor@sensor+1,w,c
  1905  00782A  6E18               	movwf	read_sensor@sensor+1,c
  1906  00782C                     l38:
  1907                           
  1908                           ;AD7147.c: 237: }
  1909                           ;AD7147.c: 238: unsigned int register1 = 0xE400 + 0x00A + sensor;
  1910  00782C  0E0A               	movlw	10
  1911  00782E  2417               	addwf	read_sensor@sensor,w,c
  1912  007830  6E19               	movwf	read_sensor@register1,c
  1913  007832  0EE4               	movlw	228
  1914  007834  2018               	addwfc	read_sensor@sensor+1,w,c
  1915  007836  6E1A               	movwf	read_sensor@register1+1,c
  1916                           
  1917                           ;AD7147.c: 239: sensor_cdc(sensor, 0);
  1918  007838  C017  F005         	movff	read_sensor@sensor,sensor_cdc@sensor
  1919  00783C  C018  F006         	movff	read_sensor@sensor+1,sensor_cdc@sensor+1
  1920  007840  0E00               	movlw	0
  1921  007842  6E08               	movwf	sensor_cdc@state+1,c
  1922  007844  0E00               	movlw	0
  1923  007846  6E07               	movwf	sensor_cdc@state,c
  1924  007848  EC58  F03B         	call	_sensor_cdc	;wreg free
  1925                           
  1926                           ;AD7147.c: 240: unsigned int sensor_value = w16_r16_spi(register1);
  1927  00784C  C019  F001         	movff	read_sensor@register1,w16_r16_spi@address
  1928  007850  C01A  F002         	movff	read_sensor@register1+1,w16_r16_spi@address+1
  1929  007854  EC3F  F03C         	call	_w16_r16_spi	;wreg free
  1930  007858  C001  F01B         	movff	?_w16_r16_spi,read_sensor@sensor_value
  1931  00785C  C002  F01C         	movff	?_w16_r16_spi+1,read_sensor@sensor_value+1
  1932                           
  1933                           ;AD7147.c: 241: sensor_cdc(sensor, 1);
  1934  007860  C017  F005         	movff	read_sensor@sensor,sensor_cdc@sensor
  1935  007864  C018  F006         	movff	read_sensor@sensor+1,sensor_cdc@sensor+1
  1936  007868  0E00               	movlw	0
  1937  00786A  6E08               	movwf	sensor_cdc@state+1,c
  1938  00786C  0E01               	movlw	1
  1939  00786E  6E07               	movwf	sensor_cdc@state,c
  1940  007870  EC58  F03B         	call	_sensor_cdc	;wreg free
  1941                           
  1942                           ;AD7147.c: 249: return sensor_value;
  1943  007874  C01B  F017         	movff	read_sensor@sensor_value,?_read_sensor
  1944  007878  C01C  F018         	movff	read_sensor@sensor_value+1,?_read_sensor+1
  1945  00787C  0012               	return	
  1946  00787E                     __end_of_read_sensor:
  1947                           	opt stack 0
  1948                           postinc0	equ	0xFEE
  1949                           wreg	equ	0xFE8
  1950                           postinc2	equ	0xFDE
  1951                           postdec2	equ	0xFDD
  1952                           fsr2h	equ	0xFDA
  1953                           fsr2l	equ	0xFD9
  1954                           status	equ	0xFD8
  1955                           
  1956 ;; *************** function _sensor_cdc *****************
  1957 ;; Defined at:
  1958 ;;		line 257 in file "AD7147.c"
  1959 ;; Parameters:    Size  Location     Type
  1960 ;;  sensor          2    4[COMRAM] unsigned int 
  1961 ;;  state           2    6[COMRAM] unsigned int 
  1962 ;; Auto vars:     Size  Location     Type
  1963 ;;		None
  1964 ;; Return value:  Size  Location     Type
  1965 ;;                  1    wreg      void 
  1966 ;; Registers used:
  1967 ;;		wreg, status,2, status,0, cstack
  1968 ;; Tracked objects:
  1969 ;;		On entry : 0/0
  1970 ;;		On exit  : 0/0
  1971 ;;		Unchanged: 0/0
  1972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1973 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1976 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1977 ;;Total ram usage:        4 bytes
  1978 ;; Hardware stack levels used:    1
  1979 ;; Hardware stack levels required when called:    1
  1980 ;; This function calls:
  1981 ;;		_get_CDC
  1982 ;; This function is called by:
  1983 ;;		_read_sensor
  1984 ;; This function uses a non-reentrant model
  1985 ;;
  1986                           
  1987                           	psect	text10
  1988  0076B0                     __ptext10:
  1989                           	opt stack 0
  1990  0076B0                     _sensor_cdc:
  1991                           	opt stack 28
  1992                           
  1993                           ;AD7147.c: 261: if ((sensor <= 12) || (sensor == 25))
  1994                           
  1995                           ;incstack = 0
  1996  0076B0  5006               	movf	sensor_cdc@sensor+1,w,c
  1997  0076B2  E104               	bnz	u700
  1998  0076B4  0E0D               	movlw	13
  1999  0076B6  5C05               	subwf	sensor_cdc@sensor,w,c
  2000  0076B8  A0D8               	btfss	status,0,c
  2001  0076BA  D005               	goto	l1553
  2002  0076BC                     u700:
  2003  0076BC  0E19               	movlw	25
  2004  0076BE  1805               	xorwf	sensor_cdc@sensor,w,c
  2005  0076C0  1006               	iorwf	sensor_cdc@sensor+1,w,c
  2006  0076C2  A4D8               	btfss	status,2,c
  2007  0076C4  D00B               	goto	l1555
  2008  0076C6                     l1553:
  2009                           
  2010                           ;AD7147.c: 262: {
  2011                           ;AD7147.c: 263: get_CDC(1,state);
  2012  0076C6  0E00               	movlw	0
  2013  0076C8  6E02               	movwf	get_CDC@cdc+1,c
  2014  0076CA  0E01               	movlw	1
  2015  0076CC  6E01               	movwf	get_CDC@cdc,c
  2016  0076CE  C007  F003         	movff	sensor_cdc@state,get_CDC@state
  2017  0076D2  C008  F004         	movff	sensor_cdc@state+1,get_CDC@state+1
  2018  0076D6  EC27  F03B         	call	_get_CDC	;wreg free
  2019                           
  2020                           ;AD7147.c: 264: }
  2021  0076DA  0012               	return	
  2022  0076DC                     l1555:
  2023                           
  2024                           ;AD7147.c: 265: else
  2025                           ;AD7147.c: 266: {
  2026                           ;AD7147.c: 267: get_CDC(2,state);
  2027  0076DC  0E00               	movlw	0
  2028  0076DE  6E02               	movwf	get_CDC@cdc+1,c
  2029  0076E0  0E02               	movlw	2
  2030  0076E2  6E01               	movwf	get_CDC@cdc,c
  2031  0076E4  C007  F003         	movff	sensor_cdc@state,get_CDC@state
  2032  0076E8  C008  F004         	movff	sensor_cdc@state+1,get_CDC@state+1
  2033  0076EC  EC27  F03B         	call	_get_CDC	;wreg free
  2034  0076F0  0012               	return	
  2035  0076F2                     __end_of_sensor_cdc:
  2036                           	opt stack 0
  2037                           postinc0	equ	0xFEE
  2038                           wreg	equ	0xFE8
  2039                           postinc2	equ	0xFDE
  2040                           postdec2	equ	0xFDD
  2041                           fsr2h	equ	0xFDA
  2042                           fsr2l	equ	0xFD9
  2043                           status	equ	0xFD8
  2044                           
  2045 ;; *************** function _get_ID *****************
  2046 ;; Defined at:
  2047 ;;		line 317 in file "AD7147.c"
  2048 ;; Parameters:    Size  Location     Type
  2049 ;;  cdc             2   22[COMRAM] unsigned int 
  2050 ;; Auto vars:     Size  Location     Type
  2051 ;;  result          2   25[COMRAM] unsigned int 
  2052 ;; Return value:  Size  Location     Type
  2053 ;;                  2   22[COMRAM] unsigned int 
  2054 ;; Registers used:
  2055 ;;		wreg, status,2, status,0, cstack
  2056 ;; Tracked objects:
  2057 ;;		On entry : 0/0
  2058 ;;		On exit  : 0/0
  2059 ;;		Unchanged: 0/0
  2060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2061 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2062 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2063 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2064 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2065 ;;Total ram usage:        5 bytes
  2066 ;; Hardware stack levels used:    1
  2067 ;; Hardware stack levels required when called:    1
  2068 ;; This function calls:
  2069 ;;		_get_CDC
  2070 ;;		_w16_r16_spi
  2071 ;; This function is called by:
  2072 ;;		_main
  2073 ;; This function uses a non-reentrant model
  2074 ;;
  2075                           
  2076                           	psect	text11
  2077  007744                     __ptext11:
  2078                           	opt stack 0
  2079  007744                     _get_ID:
  2080                           	opt stack 29
  2081                           
  2082                           ;AD7147.c: 319: get_CDC(cdc,0);
  2083                           
  2084                           ;incstack = 0
  2085  007744  C017  F001         	movff	get_ID@cdc,get_CDC@cdc
  2086  007748  C018  F002         	movff	get_ID@cdc+1,get_CDC@cdc+1
  2087  00774C  0E00               	movlw	0
  2088  00774E  6E04               	movwf	get_CDC@state+1,c
  2089  007750  0E00               	movlw	0
  2090  007752  6E03               	movwf	get_CDC@state,c
  2091  007754  EC27  F03B         	call	_get_CDC	;wreg free
  2092                           
  2093                           ;AD7147.c: 320: unsigned int result = (w16_r16_spi(0xE400 + 0x017) & 0b1111111111110000)
      +                           >> 4;
  2094  007758  0EE4               	movlw	228
  2095  00775A  6E02               	movwf	w16_r16_spi@address+1,c
  2096  00775C  0E17               	movlw	23
  2097  00775E  6E01               	movwf	w16_r16_spi@address,c
  2098  007760  EC3F  F03C         	call	_w16_r16_spi	;wreg free
  2099  007764  0E04               	movlw	4
  2100  007766  6E19               	movwf	??_get_ID& (0+255),c
  2101  007768                     u755:
  2102  007768  90D8               	bcf	status,0,c
  2103  00776A  3202               	rrcf	?_w16_r16_spi+1,f,c
  2104  00776C  3201               	rrcf	?_w16_r16_spi,f,c
  2105  00776E  2E19               	decfsz	??_get_ID& (0+255),f,c
  2106  007770  D7FB               	goto	u755
  2107  007772  0EFF               	movlw	255
  2108  007774  1401               	andwf	?_w16_r16_spi,w,c
  2109  007776  6E1A               	movwf	get_ID@result,c
  2110  007778  0E0F               	movlw	15
  2111  00777A  1402               	andwf	?_w16_r16_spi+1,w,c
  2112  00777C  6E1B               	movwf	get_ID@result+1,c
  2113                           
  2114                           ;AD7147.c: 321: get_CDC(cdc,1);
  2115  00777E  C017  F001         	movff	get_ID@cdc,get_CDC@cdc
  2116  007782  C018  F002         	movff	get_ID@cdc+1,get_CDC@cdc+1
  2117  007786  0E00               	movlw	0
  2118  007788  6E04               	movwf	get_CDC@state+1,c
  2119  00778A  0E01               	movlw	1
  2120  00778C  6E03               	movwf	get_CDC@state,c
  2121  00778E  EC27  F03B         	call	_get_CDC	;wreg free
  2122                           
  2123                           ;AD7147.c: 322: return result;
  2124  007792  C01A  F017         	movff	get_ID@result,?_get_ID
  2125  007796  C01B  F018         	movff	get_ID@result+1,?_get_ID+1
  2126  00779A  0012               	return	
  2127  00779C                     __end_of_get_ID:
  2128                           	opt stack 0
  2129                           postinc0	equ	0xFEE
  2130                           wreg	equ	0xFE8
  2131                           postinc2	equ	0xFDE
  2132                           postdec2	equ	0xFDD
  2133                           fsr2h	equ	0xFDA
  2134                           fsr2l	equ	0xFD9
  2135                           status	equ	0xFD8
  2136                           
  2137 ;; *************** function _w16_r16_spi *****************
  2138 ;; Defined at:
  2139 ;;		line 92 in file "spi.c"
  2140 ;; Parameters:    Size  Location     Type
  2141 ;;  address         2    0[COMRAM] unsigned int 
  2142 ;; Auto vars:     Size  Location     Type
  2143 ;;  p4              2   20[COMRAM] unsigned int 
  2144 ;;  p3              2   18[COMRAM] unsigned int 
  2145 ;;  blank_high      2   16[COMRAM] unsigned int 
  2146 ;;  blank_low       2   14[COMRAM] unsigned int 
  2147 ;;  result          2   12[COMRAM] unsigned int 
  2148 ;;  address_high    2   10[COMRAM] unsigned int 
  2149 ;;  address_low     2    8[COMRAM] unsigned int 
  2150 ;;  p2              2    6[COMRAM] unsigned int 
  2151 ;;  p1              2    4[COMRAM] unsigned int 
  2152 ;; Return value:  Size  Location     Type
  2153 ;;                  2    0[COMRAM] unsigned int 
  2154 ;; Registers used:
  2155 ;;		wreg, status,2, status,0
  2156 ;; Tracked objects:
  2157 ;;		On entry : 0/0
  2158 ;;		On exit  : 0/0
  2159 ;;		Unchanged: 0/0
  2160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2161 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2162 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2163 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2164 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2165 ;;Total ram usage:       22 bytes
  2166 ;; Hardware stack levels used:    1
  2167 ;; This function calls:
  2168 ;;		Nothing
  2169 ;; This function is called by:
  2170 ;;		_read_sensor
  2171 ;;		_get_ID
  2172 ;;		_read_AD7147
  2173 ;; This function uses a non-reentrant model
  2174 ;;
  2175                           
  2176                           	psect	text12
  2177  00787E                     __ptext12:
  2178                           	opt stack 0
  2179  00787E                     _w16_r16_spi:
  2180                           	opt stack 29
  2181                           
  2182                           ;spi.c: 94: unsigned int address_low, address_high, result;
  2183                           ;spi.c: 95: unsigned int blank_low = 0x000;
  2184                           
  2185                           ;incstack = 0
  2186  00787E  0E00               	movlw	0
  2187  007880  6E10               	movwf	w16_r16_spi@blank_low+1,c
  2188  007882  0E00               	movlw	0
  2189  007884  6E0F               	movwf	w16_r16_spi@blank_low,c
  2190                           
  2191                           ;spi.c: 96: unsigned int blank_high = 0x000;
  2192  007886  0E00               	movlw	0
  2193  007888  6E12               	movwf	w16_r16_spi@blank_high+1,c
  2194  00788A  0E00               	movlw	0
  2195  00788C  6E11               	movwf	w16_r16_spi@blank_high,c
  2196                           
  2197                           ;spi.c: 97: unsigned int p1, p2, p3, p4;
  2198                           ;spi.c: 99: address_low = address & 0xFF;
  2199  00788E  5001               	movf	w16_r16_spi@address,w,c
  2200  007890  6E09               	movwf	w16_r16_spi@address_low,c
  2201  007892  6A0A               	clrf	w16_r16_spi@address_low+1,c
  2202                           
  2203                           ;spi.c: 100: address_high = (address >> 8) & 0xFF;
  2204  007894  C001  F003         	movff	w16_r16_spi@address,??_w16_r16_spi
  2205  007898  C002  F004         	movff	w16_r16_spi@address+1,??_w16_r16_spi+1
  2206  00789C  C004  F003         	movff	??_w16_r16_spi+1,??_w16_r16_spi
  2207  0078A0  6A04               	clrf	??_w16_r16_spi+1,c
  2208  0078A2  5003               	movf	??_w16_r16_spi,w,c
  2209  0078A4  6E0B               	movwf	w16_r16_spi@address_high,c
  2210  0078A6  6A0C               	clrf	w16_r16_spi@address_high+1,c
  2211                           
  2212                           ;spi.c: 102: SSPBUF = address_high;
  2213  0078A8  C00B  FFC9         	movff	w16_r16_spi@address_high,4041	;volatile
  2214  0078AC                     l196:
  2215  0078AC  A0C7               	btfss	4039,0,c	;volatile
  2216  0078AE  D7FE               	goto	l196
  2217                           
  2218                           ;spi.c: 104: p1 = SSPBUF;
  2219  0078B0  CFC9 F005          	movff	4041,w16_r16_spi@p1	;volatile
  2220  0078B4  6A06               	clrf	w16_r16_spi@p1+1,c
  2221                           
  2222                           ;spi.c: 106: SSPBUF = address_low;
  2223  0078B6  C009  FFC9         	movff	w16_r16_spi@address_low,4041	;volatile
  2224  0078BA                     l199:
  2225  0078BA  A0C7               	btfss	4039,0,c	;volatile
  2226  0078BC  D7FE               	goto	l199
  2227                           
  2228                           ;spi.c: 108: p2 = SSPBUF;
  2229  0078BE  CFC9 F007          	movff	4041,w16_r16_spi@p2	;volatile
  2230  0078C2  6A08               	clrf	w16_r16_spi@p2+1,c
  2231                           
  2232                           ;spi.c: 110: SSPBUF = blank_high;
  2233  0078C4  C011  FFC9         	movff	w16_r16_spi@blank_high,4041	;volatile
  2234  0078C8                     l202:
  2235  0078C8  A0C7               	btfss	4039,0,c	;volatile
  2236  0078CA  D7FE               	goto	l202
  2237                           
  2238                           ;spi.c: 112: p3 = SSPBUF;
  2239  0078CC  CFC9 F013          	movff	4041,w16_r16_spi@p3	;volatile
  2240  0078D0  6A14               	clrf	w16_r16_spi@p3+1,c
  2241                           
  2242                           ;spi.c: 114: SSPBUF = blank_low;
  2243  0078D2  C00F  FFC9         	movff	w16_r16_spi@blank_low,4041	;volatile
  2244  0078D6                     l205:
  2245  0078D6  A0C7               	btfss	4039,0,c	;volatile
  2246  0078D8  D7FE               	goto	l205
  2247                           
  2248                           ;spi.c: 116: p4 = SSPBUF;
  2249  0078DA  CFC9 F015          	movff	4041,w16_r16_spi@p4	;volatile
  2250  0078DE  6A16               	clrf	w16_r16_spi@p4+1,c
  2251                           
  2252                           ;spi.c: 118: result = (p3 << 8) + p4;
  2253  0078E0  5013               	movf	w16_r16_spi@p3,w,c
  2254  0078E2  6E04               	movwf	(??_w16_r16_spi+1)& (0+255),c
  2255  0078E4  6A03               	clrf	??_w16_r16_spi& (0+255),c
  2256  0078E6  5015               	movf	w16_r16_spi@p4,w,c
  2257  0078E8  2403               	addwf	??_w16_r16_spi,w,c
  2258  0078EA  6E0D               	movwf	w16_r16_spi@result,c
  2259  0078EC  5016               	movf	w16_r16_spi@p4+1,w,c
  2260  0078EE  2004               	addwfc	??_w16_r16_spi+1,w,c
  2261  0078F0  6E0E               	movwf	w16_r16_spi@result+1,c
  2262                           
  2263                           ;spi.c: 119: return result;
  2264  0078F2  C00D  F001         	movff	w16_r16_spi@result,?_w16_r16_spi
  2265  0078F6  C00E  F002         	movff	w16_r16_spi@result+1,?_w16_r16_spi+1
  2266  0078FA  0012               	return	
  2267  0078FC                     __end_of_w16_r16_spi:
  2268                           	opt stack 0
  2269                           postinc0	equ	0xFEE
  2270                           wreg	equ	0xFE8
  2271                           postinc2	equ	0xFDE
  2272                           postdec2	equ	0xFDD
  2273                           fsr2h	equ	0xFDA
  2274                           fsr2l	equ	0xFD9
  2275                           status	equ	0xFD8
  2276                           
  2277 ;; *************** function _blink_LED *****************
  2278 ;; Defined at:
  2279 ;;		line 341 in file "AD7147.c"
  2280 ;; Parameters:    Size  Location     Type
  2281 ;;  cdc             2   22[COMRAM] unsigned int 
  2282 ;; Auto vars:     Size  Location     Type
  2283 ;;  message         2   24[COMRAM] unsigned int 
  2284 ;; Return value:  Size  Location     Type
  2285 ;;                  1    wreg      void 
  2286 ;; Registers used:
  2287 ;;		wreg, status,2, status,0, cstack
  2288 ;; Tracked objects:
  2289 ;;		On entry : 0/0
  2290 ;;		On exit  : 0/0
  2291 ;;		Unchanged: 0/0
  2292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2293 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2294 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2296 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2297 ;;Total ram usage:        4 bytes
  2298 ;; Hardware stack levels used:    1
  2299 ;; Hardware stack levels required when called:    2
  2300 ;; This function calls:
  2301 ;;		_delay_ms
  2302 ;;		_get_CDC
  2303 ;;		_w32_spi
  2304 ;; This function is called by:
  2305 ;;		_main
  2306 ;; This function uses a non-reentrant model
  2307 ;;
  2308                           
  2309                           	psect	text13
  2310  007980                     __ptext13:
  2311                           	opt stack 0
  2312  007980                     _blink_LED:
  2313                           	opt stack 28
  2314                           
  2315                           ;AD7147.c: 343: get_CDC(cdc,0);
  2316                           
  2317                           ;incstack = 0
  2318  007980  C017  F001         	movff	blink_LED@cdc,get_CDC@cdc
  2319  007984  C018  F002         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  2320  007988  0E00               	movlw	0
  2321  00798A  6E04               	movwf	get_CDC@state+1,c
  2322  00798C  0E00               	movlw	0
  2323  00798E  6E03               	movwf	get_CDC@state,c
  2324  007990  EC27  F03B         	call	_get_CDC	;wreg free
  2325                           
  2326                           ;AD7147.c: 344: unsigned int message = 0b0010000000000000;
  2327  007994  0E20               	movlw	32
  2328  007996  6E1A               	movwf	blink_LED@message+1,c
  2329  007998  0E00               	movlw	0
  2330  00799A  6E19               	movwf	blink_LED@message,c
  2331                           
  2332                           ;AD7147.c: 345: w32_spi((0xE000 + 0x005),message);
  2333  00799C  0EE0               	movlw	224
  2334  00799E  6E02               	movwf	w32_spi@address+1,c
  2335  0079A0  0E05               	movlw	5
  2336  0079A2  6E01               	movwf	w32_spi@address,c
  2337  0079A4  C019  F003         	movff	blink_LED@message,w32_spi@data
  2338  0079A8  C01A  F004         	movff	blink_LED@message+1,w32_spi@data+1
  2339  0079AC  ECCE  F03B         	call	_w32_spi	;wreg free
  2340                           
  2341                           ;AD7147.c: 346: delay_ms(10);
  2342  0079B0  0E00               	movlw	0
  2343  0079B2  6E0A               	movwf	delay_ms@n+1,c
  2344  0079B4  0E0A               	movlw	10
  2345  0079B6  6E09               	movwf	delay_ms@n,c
  2346  0079B8  EC38  F03B         	call	_delay_ms	;wreg free
  2347                           
  2348                           ;AD7147.c: 347: get_CDC(cdc,1);
  2349  0079BC  C017  F001         	movff	blink_LED@cdc,get_CDC@cdc
  2350  0079C0  C018  F002         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  2351  0079C4  0E00               	movlw	0
  2352  0079C6  6E04               	movwf	get_CDC@state+1,c
  2353  0079C8  0E01               	movlw	1
  2354  0079CA  6E03               	movwf	get_CDC@state,c
  2355  0079CC  EC27  F03B         	call	_get_CDC	;wreg free
  2356                           
  2357                           ;AD7147.c: 348: delay_ms(1000);
  2358  0079D0  0E03               	movlw	3
  2359  0079D2  6E0A               	movwf	delay_ms@n+1,c
  2360  0079D4  0EE8               	movlw	232
  2361  0079D6  6E09               	movwf	delay_ms@n,c
  2362  0079D8  EC38  F03B         	call	_delay_ms	;wreg free
  2363                           
  2364                           ;AD7147.c: 349: get_CDC(cdc,0);
  2365  0079DC  C017  F001         	movff	blink_LED@cdc,get_CDC@cdc
  2366  0079E0  C018  F002         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  2367  0079E4  0E00               	movlw	0
  2368  0079E6  6E04               	movwf	get_CDC@state+1,c
  2369  0079E8  0E00               	movlw	0
  2370  0079EA  6E03               	movwf	get_CDC@state,c
  2371  0079EC  EC27  F03B         	call	_get_CDC	;wreg free
  2372                           
  2373                           ;AD7147.c: 350: unsigned int message = 0b0011000000000000;
  2374  0079F0  0E30               	movlw	48
  2375  0079F2  6E1A               	movwf	blink_LED@message+1,c
  2376  0079F4  0E00               	movlw	0
  2377  0079F6  6E19               	movwf	blink_LED@message,c
  2378                           
  2379                           ;AD7147.c: 351: w32_spi((0xE000 + 0x005),message);
  2380  0079F8  0EE0               	movlw	224
  2381  0079FA  6E02               	movwf	w32_spi@address+1,c
  2382  0079FC  0E05               	movlw	5
  2383  0079FE  6E01               	movwf	w32_spi@address,c
  2384  007A00  C019  F003         	movff	blink_LED@message,w32_spi@data
  2385  007A04  C01A  F004         	movff	blink_LED@message+1,w32_spi@data+1
  2386  007A08  ECCE  F03B         	call	_w32_spi	;wreg free
  2387                           
  2388                           ;AD7147.c: 352: delay_ms(10);
  2389  007A0C  0E00               	movlw	0
  2390  007A0E  6E0A               	movwf	delay_ms@n+1,c
  2391  007A10  0E0A               	movlw	10
  2392  007A12  6E09               	movwf	delay_ms@n,c
  2393  007A14  EC38  F03B         	call	_delay_ms	;wreg free
  2394                           
  2395                           ;AD7147.c: 353: get_CDC(cdc,1);
  2396  007A18  C017  F001         	movff	blink_LED@cdc,get_CDC@cdc
  2397  007A1C  C018  F002         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  2398  007A20  0E00               	movlw	0
  2399  007A22  6E04               	movwf	get_CDC@state+1,c
  2400  007A24  0E01               	movlw	1
  2401  007A26  6E03               	movwf	get_CDC@state,c
  2402  007A28  EC27  F03B         	call	_get_CDC	;wreg free
  2403  007A2C  0012               	return		;funcret
  2404  007A2E                     __end_of_blink_LED:
  2405                           	opt stack 0
  2406                           postinc0	equ	0xFEE
  2407                           wreg	equ	0xFE8
  2408                           postinc2	equ	0xFDE
  2409                           postdec2	equ	0xFDD
  2410                           fsr2h	equ	0xFDA
  2411                           fsr2l	equ	0xFD9
  2412                           status	equ	0xFD8
  2413                           
  2414 ;; *************** function _w32_spi *****************
  2415 ;; Defined at:
  2416 ;;		line 26 in file "spi.c"
  2417 ;; Parameters:    Size  Location     Type
  2418 ;;  address         2    0[COMRAM] unsigned int 
  2419 ;;  data            2    2[COMRAM] unsigned int 
  2420 ;; Auto vars:     Size  Location     Type
  2421 ;;  data_high       2   20[COMRAM] unsigned int 
  2422 ;;  data_low        2   18[COMRAM] unsigned int 
  2423 ;;  address_high    2   16[COMRAM] unsigned int 
  2424 ;;  address_low     2   14[COMRAM] unsigned int 
  2425 ;;  p4              2   12[COMRAM] unsigned int 
  2426 ;;  p3              2   10[COMRAM] unsigned int 
  2427 ;;  p2              2    8[COMRAM] unsigned int 
  2428 ;;  p1              2    6[COMRAM] unsigned int 
  2429 ;; Return value:  Size  Location     Type
  2430 ;;                  1    wreg      void 
  2431 ;; Registers used:
  2432 ;;		wreg, status,2
  2433 ;; Tracked objects:
  2434 ;;		On entry : 0/0
  2435 ;;		On exit  : 0/0
  2436 ;;		Unchanged: 0/0
  2437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2438 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2439 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2440 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2441 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2442 ;;Total ram usage:       22 bytes
  2443 ;; Hardware stack levels used:    1
  2444 ;; This function calls:
  2445 ;;		Nothing
  2446 ;; This function is called by:
  2447 ;;		_write_AD7147
  2448 ;;		_blink_LED
  2449 ;;		_switch_LED
  2450 ;; This function uses a non-reentrant model
  2451 ;;
  2452                           
  2453                           	psect	text14
  2454  00779C                     __ptext14:
  2455                           	opt stack 0
  2456  00779C                     _w32_spi:
  2457                           	opt stack 28
  2458                           
  2459                           ;spi.c: 28: unsigned int address_low, address_high, data_low, data_high;
  2460                           ;spi.c: 30: address_low = address & 0xFF;
  2461                           
  2462                           ;incstack = 0
  2463  00779C  5001               	movf	w32_spi@address,w,c
  2464  00779E  6E0F               	movwf	w32_spi@address_low,c
  2465  0077A0  6A10               	clrf	w32_spi@address_low+1,c
  2466                           
  2467                           ;spi.c: 31: address_high = (address >> 8) & 0xFF;
  2468  0077A2  C001  F005         	movff	w32_spi@address,??_w32_spi
  2469  0077A6  C002  F006         	movff	w32_spi@address+1,??_w32_spi+1
  2470  0077AA  C006  F005         	movff	??_w32_spi+1,??_w32_spi
  2471  0077AE  6A06               	clrf	??_w32_spi+1,c
  2472  0077B0  5005               	movf	??_w32_spi,w,c
  2473  0077B2  6E11               	movwf	w32_spi@address_high,c
  2474  0077B4  6A12               	clrf	w32_spi@address_high+1,c
  2475                           
  2476                           ;spi.c: 33: data_low = data & 0xFF;
  2477  0077B6  5003               	movf	w32_spi@data,w,c
  2478  0077B8  6E13               	movwf	w32_spi@data_low,c
  2479  0077BA  6A14               	clrf	w32_spi@data_low+1,c
  2480                           
  2481                           ;spi.c: 34: data_high = (data >> 8) & 0xFF;
  2482  0077BC  C003  F005         	movff	w32_spi@data,??_w32_spi
  2483  0077C0  C004  F006         	movff	w32_spi@data+1,??_w32_spi+1
  2484  0077C4  C006  F005         	movff	??_w32_spi+1,??_w32_spi
  2485  0077C8  6A06               	clrf	??_w32_spi+1,c
  2486  0077CA  5005               	movf	??_w32_spi,w,c
  2487  0077CC  6E15               	movwf	w32_spi@data_high,c
  2488  0077CE  6A16               	clrf	w32_spi@data_high+1,c
  2489                           
  2490                           ;spi.c: 36: SSPBUF = address_high;
  2491  0077D0  C011  FFC9         	movff	w32_spi@address_high,4041	;volatile
  2492  0077D4                     l163:
  2493  0077D4  A0C7               	btfss	4039,0,c	;volatile
  2494  0077D6  D7FE               	goto	l163
  2495                           
  2496                           ;spi.c: 38: unsigned int p1 = SSPBUF;
  2497  0077D8  CFC9 F007          	movff	4041,w32_spi@p1	;volatile
  2498  0077DC  6A08               	clrf	w32_spi@p1+1,c
  2499                           
  2500                           ;spi.c: 40: SSPBUF = address_low;
  2501  0077DE  C00F  FFC9         	movff	w32_spi@address_low,4041	;volatile
  2502  0077E2                     l166:
  2503  0077E2  A0C7               	btfss	4039,0,c	;volatile
  2504  0077E4  D7FE               	goto	l166
  2505                           
  2506                           ;spi.c: 42: unsigned int p2 = SSPBUF;
  2507  0077E6  CFC9 F009          	movff	4041,w32_spi@p2	;volatile
  2508  0077EA  6A0A               	clrf	w32_spi@p2+1,c
  2509                           
  2510                           ;spi.c: 44: SSPBUF = data_high;
  2511  0077EC  C015  FFC9         	movff	w32_spi@data_high,4041	;volatile
  2512  0077F0                     l169:
  2513  0077F0  A0C7               	btfss	4039,0,c	;volatile
  2514  0077F2  D7FE               	goto	l169
  2515                           
  2516                           ;spi.c: 46: unsigned int p3 = SSPBUF;
  2517  0077F4  CFC9 F00B          	movff	4041,w32_spi@p3	;volatile
  2518  0077F8  6A0C               	clrf	w32_spi@p3+1,c
  2519                           
  2520                           ;spi.c: 48: SSPBUF = data_low;
  2521  0077FA  C013  FFC9         	movff	w32_spi@data_low,4041	;volatile
  2522  0077FE                     l172:
  2523  0077FE  A0C7               	btfss	4039,0,c	;volatile
  2524  007800  D7FE               	goto	l172
  2525                           
  2526                           ;spi.c: 50: unsigned int p4 = SSPBUF;
  2527  007802  CFC9 F00D          	movff	4041,w32_spi@p4	;volatile
  2528  007806  6A0E               	clrf	w32_spi@p4+1,c
  2529  007808  0012               	return		;funcret
  2530  00780A                     __end_of_w32_spi:
  2531                           	opt stack 0
  2532                           postinc0	equ	0xFEE
  2533                           wreg	equ	0xFE8
  2534                           postinc2	equ	0xFDE
  2535                           postdec2	equ	0xFDD
  2536                           fsr2h	equ	0xFDA
  2537                           fsr2l	equ	0xFD9
  2538                           status	equ	0xFD8
  2539                           
  2540 ;; *************** function _get_CDC *****************
  2541 ;; Defined at:
  2542 ;;		line 355 in file "AD7147.c"
  2543 ;; Parameters:    Size  Location     Type
  2544 ;;  cdc             2    0[COMRAM] unsigned int 
  2545 ;;  state           2    2[COMRAM] unsigned int 
  2546 ;; Auto vars:     Size  Location     Type
  2547 ;;		None
  2548 ;; Return value:  Size  Location     Type
  2549 ;;                  1    wreg      void 
  2550 ;; Registers used:
  2551 ;;		wreg, status,2, status,0
  2552 ;; Tracked objects:
  2553 ;;		On entry : 0/0
  2554 ;;		On exit  : 0/0
  2555 ;;		Unchanged: 0/0
  2556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2557 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2560 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2561 ;;Total ram usage:        4 bytes
  2562 ;; Hardware stack levels used:    1
  2563 ;; This function calls:
  2564 ;;		Nothing
  2565 ;; This function is called by:
  2566 ;;		_setup_AD7147
  2567 ;;		_sensor_cdc
  2568 ;;		_get_ID
  2569 ;;		_blink_LED
  2570 ;;		_switch_LED
  2571 ;; This function uses a non-reentrant model
  2572 ;;
  2573                           
  2574                           	psect	text15
  2575  00764E                     __ptext15:
  2576                           	opt stack 0
  2577  00764E                     _get_CDC:
  2578                           	opt stack 29
  2579                           
  2580                           ;AD7147.c: 357: if (state == 1)
  2581                           
  2582                           ;incstack = 0
  2583  00764E  0403               	decf	get_CDC@state,w,c
  2584  007650  1004               	iorwf	get_CDC@state+1,w,c
  2585  007652  A4D8               	btfss	status,2,c
  2586  007654  D003               	goto	l1477
  2587                           
  2588                           ;AD7147.c: 358: {
  2589                           ;AD7147.c: 359: LATCbits.LATC1 = 1;
  2590  007656  828B               	bsf	3979,1,c	;volatile
  2591                           
  2592                           ;AD7147.c: 360: LATCbits.LATC0 = 1;
  2593  007658  808B               	bsf	3979,0,c	;volatile
  2594                           
  2595                           ;AD7147.c: 361: }
  2596  00765A  0012               	return	
  2597  00765C                     l1477:
  2598                           
  2599                           ;AD7147.c: 362: else
  2600                           ;AD7147.c: 363: {
  2601                           ;AD7147.c: 364: if (cdc == 1)
  2602  00765C  0401               	decf	get_CDC@cdc,w,c
  2603  00765E  1002               	iorwf	get_CDC@cdc+1,w,c
  2604  007660  A4D8               	btfss	status,2,c
  2605  007662  D003               	goto	l81
  2606                           
  2607                           ;AD7147.c: 365: {
  2608                           ;AD7147.c: 366: LATCbits.LATC1 = 0;
  2609  007664  928B               	bcf	3979,1,c	;volatile
  2610                           
  2611                           ;AD7147.c: 367: LATCbits.LATC0 = 1;
  2612  007666  808B               	bsf	3979,0,c	;volatile
  2613                           
  2614                           ;AD7147.c: 368: }
  2615  007668  0012               	return	
  2616  00766A                     l81:
  2617                           
  2618                           ;AD7147.c: 369: else
  2619                           ;AD7147.c: 370: {
  2620                           ;AD7147.c: 371: LATCbits.LATC0 = 0;
  2621  00766A  908B               	bcf	3979,0,c	;volatile
  2622                           
  2623                           ;AD7147.c: 372: LATCbits.LATC1 = 1;
  2624  00766C  828B               	bsf	3979,1,c	;volatile
  2625  00766E  0012               	return	
  2626  007670                     __end_of_get_CDC:
  2627                           	opt stack 0
  2628                           postinc0	equ	0xFEE
  2629                           wreg	equ	0xFE8
  2630                           postinc2	equ	0xFDE
  2631                           postdec2	equ	0xFDD
  2632                           fsr2h	equ	0xFDA
  2633                           fsr2l	equ	0xFD9
  2634                           status	equ	0xFD8
  2635                           
  2636 ;; *************** function _delay_ms *****************
  2637 ;; Defined at:
  2638 ;;		line 67 in file "micro_setup.c"
  2639 ;; Parameters:    Size  Location     Type
  2640 ;;  n               2    8[COMRAM] int 
  2641 ;; Auto vars:     Size  Location     Type
  2642 ;;  j               2   11[COMRAM] int 
  2643 ;; Return value:  Size  Location     Type
  2644 ;;                  1    wreg      void 
  2645 ;; Registers used:
  2646 ;;		wreg, status,2, status,0, cstack
  2647 ;; Tracked objects:
  2648 ;;		On entry : 0/0
  2649 ;;		On exit  : 0/0
  2650 ;;		Unchanged: 0/0
  2651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2652 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2653 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2654 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2655 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2656 ;;Total ram usage:        5 bytes
  2657 ;; Hardware stack levels used:    1
  2658 ;; Hardware stack levels required when called:    1
  2659 ;; This function calls:
  2660 ;;		___awdiv
  2661 ;; This function is called by:
  2662 ;;		_blink_LED
  2663 ;;		_main
  2664 ;;		_switch_LED
  2665 ;; This function uses a non-reentrant model
  2666 ;;
  2667                           
  2668                           	psect	text16
  2669  007670                     __ptext16:
  2670                           	opt stack 0
  2671  007670                     _delay_ms:
  2672                           	opt stack 29
  2673                           
  2674                           ;micro_setup.c: 69: int j = n/10;
  2675                           
  2676                           ;incstack = 0
  2677  007670  C009  F001         	movff	delay_ms@n,___awdiv@dividend
  2678  007674  C00A  F002         	movff	delay_ms@n+1,___awdiv@dividend+1
  2679  007678  0E00               	movlw	0
  2680  00767A  6E04               	movwf	___awdiv@divisor+1,c
  2681  00767C  0E0A               	movlw	10
  2682  00767E  6E03               	movwf	___awdiv@divisor,c
  2683  007680  EC7E  F03C         	call	___awdiv	;wreg free
  2684  007684  C001  F00C         	movff	?___awdiv,delay_ms@j
  2685  007688  C002  F00D         	movff	?___awdiv+1,delay_ms@j+1
  2686                           
  2687                           ;micro_setup.c: 70: while(j--)
  2688  00768C  D008               	goto	l1561
  2689  00768E                     l1559:
  2690                           
  2691                           ;micro_setup.c: 71: {
  2692                           ;micro_setup.c: 72: _delay((unsigned long)((10)*(8000000/4000.0)));
  2693  00768E  0E1A               	movlw	26
  2694  007690  6E0B               	movwf	??_delay_ms& (0+255),c
  2695  007692  0EF8               	movlw	248
  2696  007694                     u917:
  2697  007694  2EE8               	decfsz	wreg,f,c
  2698  007696  D7FE               	goto	u917
  2699  007698  2E0B               	decfsz	??_delay_ms& (0+255),f,c
  2700  00769A  D7FC               	goto	u917
  2701  00769C  D000               	nop2	
  2702  00769E                     l1561:
  2703  00769E  060C               	decf	delay_ms@j,f,c
  2704  0076A0  A0D8               	btfss	status,0,c
  2705  0076A2  060D               	decf	delay_ms@j+1,f,c
  2706  0076A4  280C               	incf	delay_ms@j,w,c
  2707  0076A6  E1F3               	bnz	l1559
  2708  0076A8  280D               	incf	delay_ms@j+1,w,c
  2709  0076AA  B4D8               	btfsc	status,2,c
  2710  0076AC  0012               	return	
  2711  0076AE  D7EF               	goto	l1559
  2712  0076B0                     __end_of_delay_ms:
  2713                           	opt stack 0
  2714                           postinc0	equ	0xFEE
  2715                           wreg	equ	0xFE8
  2716                           postinc2	equ	0xFDE
  2717                           postdec2	equ	0xFDD
  2718                           fsr2h	equ	0xFDA
  2719                           fsr2l	equ	0xFD9
  2720                           status	equ	0xFD8
  2721                           
  2722 ;; *************** function ___awdiv *****************
  2723 ;; Defined at:
  2724 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  2725 ;; Parameters:    Size  Location     Type
  2726 ;;  dividend        2    0[COMRAM] int 
  2727 ;;  divisor         2    2[COMRAM] int 
  2728 ;; Auto vars:     Size  Location     Type
  2729 ;;  quotient        2    6[COMRAM] int 
  2730 ;;  sign            1    5[COMRAM] unsigned char 
  2731 ;;  counter         1    4[COMRAM] unsigned char 
  2732 ;; Return value:  Size  Location     Type
  2733 ;;                  2    0[COMRAM] int 
  2734 ;; Registers used:
  2735 ;;		wreg, status,2, status,0
  2736 ;; Tracked objects:
  2737 ;;		On entry : 0/0
  2738 ;;		On exit  : 0/0
  2739 ;;		Unchanged: 0/0
  2740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2741 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2742 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2744 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2745 ;;Total ram usage:        8 bytes
  2746 ;; Hardware stack levels used:    1
  2747 ;; This function calls:
  2748 ;;		Nothing
  2749 ;; This function is called by:
  2750 ;;		_delay_ms
  2751 ;; This function uses a non-reentrant model
  2752 ;;
  2753                           
  2754                           	psect	text17
  2755  0078FC                     __ptext17:
  2756                           	opt stack 0
  2757  0078FC                     ___awdiv:
  2758                           	opt stack 29
  2759                           
  2760                           ;incstack = 0
  2761  0078FC  0E00               	movlw	0
  2762  0078FE  6E06               	movwf	___awdiv@sign,c
  2763  007900  AE04               	btfss	___awdiv@divisor+1,7,c
  2764  007902  D006               	goto	l1493
  2765  007904  6C03               	negf	___awdiv@divisor,c
  2766  007906  1E04               	comf	___awdiv@divisor+1,f,c
  2767  007908  B0D8               	btfsc	status,0,c
  2768  00790A  2A04               	incf	___awdiv@divisor+1,f,c
  2769  00790C  0E01               	movlw	1
  2770  00790E  6E06               	movwf	___awdiv@sign,c
  2771  007910                     l1493:
  2772  007910  AE02               	btfss	___awdiv@dividend+1,7,c
  2773  007912  D006               	goto	l1499
  2774  007914  6C01               	negf	___awdiv@dividend,c
  2775  007916  1E02               	comf	___awdiv@dividend+1,f,c
  2776  007918  B0D8               	btfsc	status,0,c
  2777  00791A  2A02               	incf	___awdiv@dividend+1,f,c
  2778  00791C  0E01               	movlw	1
  2779  00791E  1A06               	xorwf	___awdiv@sign,f,c
  2780  007920                     l1499:
  2781  007920  0E00               	movlw	0
  2782  007922  6E08               	movwf	___awdiv@quotient+1,c
  2783  007924  0E00               	movlw	0
  2784  007926  6E07               	movwf	___awdiv@quotient,c
  2785  007928  5003               	movf	___awdiv@divisor,w,c
  2786  00792A  1004               	iorwf	___awdiv@divisor+1,w,c
  2787  00792C  B4D8               	btfsc	status,2,c
  2788  00792E  D01C               	goto	l1521
  2789  007930  0E01               	movlw	1
  2790  007932  6E05               	movwf	___awdiv@counter,c
  2791  007934  D004               	goto	l1507
  2792  007936                     l1505:
  2793  007936  90D8               	bcf	status,0,c
  2794  007938  3603               	rlcf	___awdiv@divisor,f,c
  2795  00793A  3604               	rlcf	___awdiv@divisor+1,f,c
  2796  00793C  2A05               	incf	___awdiv@counter,f,c
  2797  00793E                     l1507:
  2798  00793E  AE04               	btfss	___awdiv@divisor+1,7,c
  2799  007940  D7FA               	goto	l1505
  2800  007942                     l1509:
  2801  007942  90D8               	bcf	status,0,c
  2802  007944  3607               	rlcf	___awdiv@quotient,f,c
  2803  007946  3608               	rlcf	___awdiv@quotient+1,f,c
  2804  007948  5003               	movf	___awdiv@divisor,w,c
  2805  00794A  5C01               	subwf	___awdiv@dividend,w,c
  2806  00794C  5004               	movf	___awdiv@divisor+1,w,c
  2807  00794E  5802               	subwfb	___awdiv@dividend+1,w,c
  2808  007950  A0D8               	btfss	status,0,c
  2809  007952  D005               	goto	l1517
  2810  007954  5003               	movf	___awdiv@divisor,w,c
  2811  007956  5E01               	subwf	___awdiv@dividend,f,c
  2812  007958  5004               	movf	___awdiv@divisor+1,w,c
  2813  00795A  5A02               	subwfb	___awdiv@dividend+1,f,c
  2814  00795C  8007               	bsf	___awdiv@quotient,0,c
  2815  00795E                     l1517:
  2816  00795E  90D8               	bcf	status,0,c
  2817  007960  3204               	rrcf	___awdiv@divisor+1,f,c
  2818  007962  3203               	rrcf	___awdiv@divisor,f,c
  2819  007964  2E05               	decfsz	___awdiv@counter,f,c
  2820  007966  D7ED               	goto	l1509
  2821  007968                     l1521:
  2822  007968  5006               	movf	___awdiv@sign,w,c
  2823  00796A  B4D8               	btfsc	status,2,c
  2824  00796C  D004               	goto	l1525
  2825  00796E  6C07               	negf	___awdiv@quotient,c
  2826  007970  1E08               	comf	___awdiv@quotient+1,f,c
  2827  007972  B0D8               	btfsc	status,0,c
  2828  007974  2A08               	incf	___awdiv@quotient+1,f,c
  2829  007976                     l1525:
  2830  007976  C007  F001         	movff	___awdiv@quotient,?___awdiv
  2831  00797A  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  2832  00797E  0012               	return	
  2833  007980                     __end_of___awdiv:
  2834                           	opt stack 0
  2835  0000                     postinc0	equ	0xFEE
  2836                           wreg	equ	0xFE8
  2837                           postinc2	equ	0xFDE
  2838                           postdec2	equ	0xFDD
  2839                           fsr2h	equ	0xFDA
  2840                           fsr2l	equ	0xFD9
  2841                           status	equ	0xFD8
  2842                           postinc0	equ	0xFEE
  2843                           wreg	equ	0xFE8
  2844                           postinc2	equ	0xFDE
  2845                           postdec2	equ	0xFDD
  2846                           fsr2h	equ	0xFDA
  2847                           fsr2l	equ	0xFD9
  2848                           status	equ	0xFD8
  2849                           
  2850                           	psect	rparam
  2851  0000                     postinc0	equ	0xFEE
  2852                           wreg	equ	0xFE8
  2853                           postinc2	equ	0xFDE
  2854                           postdec2	equ	0xFDD
  2855                           fsr2h	equ	0xFDA
  2856                           fsr2l	equ	0xFD9
  2857                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         24
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     73      73
    BANK0           160      0      24
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    CDC_RESULT	PTR unsigned int [12] size(2) Largest target is 3648
		 -> NULL(NULL[0]), RAM(DATA[3648]), 

    write_AD7147@DataBuffer	PTR unsigned int  size(2) Largest target is 3648
		 -> RAM(DATA[3648]), setup_AD7147@AD7147Registers(COMRAM[16]), setup_AD7147@StageBuffer(COMRAM[16]), 


Critical Paths under _main in COMRAM

    _main->_setup_AD7147
    _setup_AD7147->_write_AD7147
    _write_AD7147->_w32_spi
    _read_sensor->_w16_r16_spi
    _sensor_cdc->_get_CDC
    _get_ID->_w16_r16_spi
    _blink_LED->_w32_spi
    _delay_ms->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0   17658
                                             66 COMRAM     7     7      0
                          _blink_LED
                           _delay_ms
                             _get_ID
                        _read_sensor
                       _setup_AD7147
                          _setup_mcu
                          _setup_spi
                    _uart_write_char
            _uart_write_unsigned_int
 ---------------------------------------------------------------------------------
 (1) _uart_write_unsigned_int                              4     2      2     282
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _uart_write_char                                      1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setup_spi                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_mcu                                            0     0      0       0
                          _init_uart
                         _setup_port
 ---------------------------------------------------------------------------------
 (2) _setup_port                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_uart                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_AD7147                                        34    32      2    8169
                                             32 COMRAM    34    32      2
                            _get_CDC
                       _write_AD7147
 ---------------------------------------------------------------------------------
 (2) _write_AD7147                                        10     4      6    3861
                                             22 COMRAM    10     4      6
                            _w32_spi
 ---------------------------------------------------------------------------------
 (1) _read_sensor                                          6     4      2    2566
                                             22 COMRAM     6     4      2
                         _sensor_cdc
                        _w16_r16_spi
 ---------------------------------------------------------------------------------
 (2) _sensor_cdc                                           4     0      4    1924
                                              4 COMRAM     4     0      4
                            _get_CDC
 ---------------------------------------------------------------------------------
 (1) _get_ID                                               5     3      2    2110
                                             22 COMRAM     5     3      2
                            _get_CDC
                        _w16_r16_spi
 ---------------------------------------------------------------------------------
 (2) _w16_r16_spi                                         22    20      2     399
                                              0 COMRAM    22    20      2
 ---------------------------------------------------------------------------------
 (1) _blink_LED                                            4     2      2    3523
                                             22 COMRAM     4     2      2
                           _delay_ms
                            _get_CDC
                            _w32_spi
 ---------------------------------------------------------------------------------
 (3) _w32_spi                                             22    18      4     824
                                              0 COMRAM    22    18      4
 ---------------------------------------------------------------------------------
 (2) _get_CDC                                              4     0      4    1580
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             5     3      2     857
                                              8 COMRAM     5     3      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     428
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _blink_LED
     _delay_ms
       ___awdiv
     _get_CDC
     _w32_spi
   _delay_ms
     ___awdiv
   _get_ID
     _get_CDC
     _w16_r16_spi
   _read_sensor
     _sensor_cdc
       _get_CDC
     _w16_r16_spi
   _setup_AD7147
     _get_CDC
     _write_AD7147
       _w32_spi
   _setup_mcu
     _init_uart
     _setup_port
   _setup_spi
   _uart_write_char
   _uart_write_unsigned_int

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      18       5       15.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     49      49       1       76.8%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      61       6        0.0%
DATA                 0      0      61       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Thu Jun 29 11:53:38 2017

                     _SSPSTATbits 000FC7                                l38 782C  
                              l81 766A                      ___awdiv@sign 0006  
                    __CFG_CP0$OFF 000000                               l202 78C8  
                             l205 78D6                               l230 75DE  
                             l242 763C                               l163 77D4  
                             l172 77FE                               l245 7644  
                             l166 77E2                               l169 77F0  
                             l196 78AC                               l199 78BA  
                             u700 76BC                               u730 7816  
                             u755 7768                               u917 7694  
                             wreg 000FE8                        _TXSTA1bits 000FAC  
     write_AD7147@RegisterAddress 0017                              l1505 7936  
                            l1521 7968                              l1507 793E  
                            l1525 7976                              l1517 795E  
                            l1509 7942                              l1533 7708  
                            l1561 769E                              l1553 76C6  
                            l1537 7736                              l1555 76DC  
                            l1493 7910                              l1477 765C  
                            l1559 768E                              l1499 7920  
                            l1943 7ADA                              l1935 7AAC  
                            l1927 7A7E                              l1949 7AF4  
                            _main 7A2E                              fsr2h 000FDA  
     write_AD7147@Register_Values 001D                              fsr2l 000FD9  
__size_of_uart_write_unsigned_int 001A                              start 0002  
                   ??_w16_r16_spi 0003                     __CFG_IESO$OFF 000000  
                   __CFG_FOSC$HS1 000000                      ___param_bank 000010  
                 __end_of_w32_spi 780A          __size_of_uart_write_char 000C  
                           ?_main 0001                   __end_of___awdiv 7980  
                 ___awdiv@divisor 0003                             _RC1IF 007CF5  
           w16_r16_spi@blank_high 0011                   ___awdiv@counter 0005  
                           _TRISB 000F93                             _TRISC 000F94  
                 __end_of_get_CDC 7670                    __CFG_FCMEN$OFF 000000  
           __size_of_write_AD7147 0052                      ?_read_sensor 0017  
                    main@sensor_1 0047                             status 000FD8  
          w16_r16_spi@address_low 0009       setup_AD7147@AD7147Registers 0023  
                 __initialization 75F8                      __end_of_main 7B02  
             __end_of_w16_r16_spi 78FC                      _write_AD7147 76F2  
                          ??_main 0043                     main@device_ID 0045  
                   __activetblptr 000000                  ___awdiv@dividend 0001  
                     w32_spi@data 0003                     main@indicator 0049  
                  __CFG_WDTEN$OFF 000000                            _RCREG1 000FAE  
                          _SPBRG1 000FAF                            _SSPBUF 000FC9  
                          _TXREG1 000FAD                            _TXSTA1 000FAC  
                __end_of_delay_ms 76B0                         ??_w32_spi 0005  
                  __CFG_XINST$OFF 000000                         ??___awdiv 0005  
                  __CFG_STVREN$ON 000000                            _get_ID 7744  
                          clear_0 75FE                  ___awdiv@quotient 0007  
                       ??_get_CDC 0005                            main@bb 0043  
               ??_uart_write_char 0001           w16_r16_spi@address_high 000B  
         _uart_write_unsigned_int 7634                        __accesstop 0060  
         __end_of__initialization 7604                     ___rparam_used 000001  
                     _w16_r16_spi 787E                    __pcstackCOMRAM 0001  
              __size_of_blink_LED 00AE                  sensor_cdc@sensor 0005  
                      __pbssBANK0 0060              __size_of_read_sensor 0074  
              __size_of_init_uart 0014                           ?_get_ID 0017  
                __CFG_CANMX$PORTB 000000                __size_of_setup_mcu 000A  
              __size_of_setup_spi 0016                         ?_delay_ms 0009  
                   w16_r16_spi@p1 0005                     w16_r16_spi@p2 0007  
                   w16_r16_spi@p3 0013                     w16_r16_spi@p4 0015  
       ??_uart_write_unsigned_int 0003                 __end_of_blink_LED 7A2E  
                         _w32_spi 779C                           __Hparam 0000  
                         __Lparam 0000                           ___awdiv 78FC  
                 __size_of_get_ID 0058                           __pcinit 75F8  
                         _get_CDC 764E                           __ramtop 0F00  
                         __ptext0 7A2E                           __ptext1 7634  
                         __ptext2 75DC                           __ptext3 761E  
                         __ptext4 75D2                           __ptext5 75E8  
                         __ptext6 760A                           __ptext7 7B02  
                         __ptext8 76F2                           __ptext9 780A  
                  w32_spi@address 0001                 __end_of_init_uart 761E  
                      ??_delay_ms 000B                        get_CDC@cdc 0001  
            end_of_initialization 7604                     ?_setup_AD7147 0021  
               __end_of_setup_mcu 75DC                 __end_of_setup_spi 7634  
                         postdec2 000FDD   __end_of_uart_write_unsigned_int 764E  
                         postinc0 000FEE                           postinc2 000FDE  
                      _sensor_cdc 76B0                   _uart_write_char 75DC  
                      _setup_port 75E8                    ??_setup_AD7147 0023  
                    ?_w16_r16_spi 0001                         w32_spi@p1 0007  
                       w32_spi@p2 0009                         w32_spi@p3 000B  
                       w32_spi@p4 000D              w16_r16_spi@blank_low 000F  
                  __end_of_get_ID 779C               w32_spi@address_high 0011  
             start_initialization 75F8               uart_write_char@data 0001  
         __end_of_uart_write_char 75E8           setup_AD7147@StageBuffer 0033  
                        ??_get_ID 0019                       ?_sensor_cdc 0005  
                     ?_setup_port 0001            write_AD7147@DataBuffer 001B  
                   ??_read_sensor 0019                 __size_of_delay_ms 0040  
                 sensor_cdc@state 0007                          ?_w32_spi 0001  
                       _blink_LED 7980                          ?___awdiv 0001  
            __end_of_setup_AD7147 8000                          ?_get_CDC 0001  
                   ?_write_AD7147 0017                          _BAUDCON1 000FA7  
    uart_write_unsigned_int@char1 0003      uart_write_unsigned_int@char2 0004  
                w32_spi@data_high 0015                         _init_uart 760A  
             __size_of_sensor_cdc 0042                          _LATCbits 000F8B  
                       delay_ms@j 000C                         delay_ms@n 0009  
             __end_of_read_sensor 787E     write_AD7147@NumberOfRegisters 0019  
                       get_ID@cdc 0017                          _PIE1bits 000F9D  
             __size_of_setup_port 0010                  ?_uart_write_char 0001  
                        _PIR1bits 000F9E                        ?_blink_LED 0017  
            __size_of_w16_r16_spi 007E                         _setup_mcu 75D2  
                       _setup_spi 761E                    ??_write_AD7147 001D  
                 setup_AD7147@cdc 0021                      get_CDC@state 0003  
                __CFG_SOSCSEL$DIG 000000          ?_uart_write_unsigned_int 0001  
                      ?_init_uart 0001                w32_spi@address_low 000F  
                      _CDC_RESULT 0060                          __Hrparam 0000  
                    get_ID@result 001A                  __size_of_w32_spi 006E  
                        __Lrparam 0000                      blink_LED@cdc 0017  
         read_sensor@sensor_value 001B                  __size_of___awdiv 0084  
                      ?_setup_mcu 0001                        ?_setup_spi 0001  
                __size_of_get_CDC 0022                          _delay_ms 7670  
            read_sensor@register1 0019                          __ptext10 76B0  
                        __ptext11 7744                          __ptext12 787E  
                        __ptext13 7980                          __ptext14 779C  
                        __ptext15 764E                          __ptext16 7670  
                        __ptext17 78FC                       _read_sensor 780A  
                   __size_of_main 00D4                   w32_spi@data_low 0013  
               read_sensor@sensor 0017                       ??_blink_LED 0019  
           __size_of_setup_AD7147 04FE                      ??_sensor_cdc 0009  
                   write_AD7147@i 001F                w16_r16_spi@address 0001  
                    ??_setup_port 0001                       ??_init_uart 0001  
            __end_of_write_AD7147 7744                      _setup_AD7147 7B02  
              __end_of_sensor_cdc 76F2                        _RCSTA1bits 000FAB  
              __end_of_setup_port 75F8                       ??_setup_mcu 0001  
                     ??_setup_spi 0001                 w16_r16_spi@result 000D  
                     _SSPCON1bits 000FC6                  blink_LED@message 0019  
   uart_write_unsigned_int@number 0001  
