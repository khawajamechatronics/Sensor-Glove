

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Thu Jul 27 19:05:47 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F25K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	text13,global,reloc=2,class=CODE,delta=1
    22                           	psect	text14,global,reloc=2,class=CODE,delta=1
    23                           	psect	text15,global,reloc=2,class=CODE,delta=1
    24                           	psect	text16,global,reloc=2,class=CODE,delta=1
    25                           	psect	text17,global,reloc=2,class=CODE,delta=1
    26                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    29  0000                     
    30                           ; Version 1.42
    31                           ; Generated 13/04/2017 GMT
    32                           ; 
    33                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC18F25K80 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     _RCREG1	set	4014
    65  0000                     _PIR1bits	set	3998
    66  0000                     _TXREG1	set	4013
    67  0000                     _TXSTA1bits	set	4012
    68  0000                     _PIE1bits	set	3997
    69  0000                     _SSPCON1bits	set	4038
    70  0000                     _RCSTA1bits	set	4011
    71  0000                     _BAUDCON1	set	4007
    72  0000                     _SPBRG1	set	4015
    73  0000                     _TXSTA1	set	4012
    74  0000                     _TRISC	set	3988
    75  0000                     _TRISB	set	3987
    76  0000                     _SSPSTATbits	set	4039
    77  0000                     _SSPBUF	set	4041
    78  0000                     _LATCbits	set	3979
    79  0000                     _RC1IF	set	31989
    80                           
    81                           ; #config settings
    82  0000                     
    83                           	psect	cinit
    84  0074AA                     __pcinit:
    85                           	opt stack 0
    86  0074AA                     start_initialization:
    87                           	opt stack 0
    88  0074AA                     __initialization:
    89                           	opt stack 0
    90                           
    91                           ; Clear objects allocated to BANK0 (24 bytes)
    92  0074AA  EE00  F060         	lfsr	0,__pbssBANK0
    93  0074AE  0E18               	movlw	24
    94  0074B0                     clear_0:
    95  0074B0  6AEE               	clrf	postinc0,c
    96  0074B2  06E8               	decf	wreg,f,c
    97  0074B4  E1FD               	bnz	clear_0
    98  0074B6                     end_of_initialization:
    99                           	opt stack 0
   100  0074B6                     __end_of__initialization:
   101                           	opt stack 0
   102  0074B6  0100               	movlb	0
   103  0074B8  EF9A  F03C         	goto	_main	;jump to C main() function
   104                           postinc0	equ	0xFEE
   105                           wreg	equ	0xFE8
   106                           
   107                           	psect	bssBANK0
   108  000060                     __pbssBANK0:
   109                           	opt stack 0
   110  000060                     _CDC_RESULT:
   111                           	opt stack 0
   112  000060                     	ds	24
   113                           postinc0	equ	0xFEE
   114                           wreg	equ	0xFE8
   115                           
   116                           	psect	cstackCOMRAM
   117  000001                     __pcstackCOMRAM:
   118                           	opt stack 0
   119  000001                     ?_w16_r16_spi:
   120                           	opt stack 0
   121  000001                     ?___awdiv:
   122                           	opt stack 0
   123  000001                     uart_write_char@data:
   124                           	opt stack 0
   125  000001                     get_CDC@cdc:
   126                           	opt stack 0
   127  000001                     w32_spi@address:
   128                           	opt stack 0
   129  000001                     w16_r16_spi@address:
   130                           	opt stack 0
   131  000001                     uart_write_unsigned_int@number:
   132                           	opt stack 0
   133  000001                     ___awdiv@dividend:
   134                           	opt stack 0
   135                           
   136                           ; 2 bytes @ 0x0
   137  000001                     	ds	2
   138  000003                     ??_w16_r16_spi:
   139  000003                     uart_write_unsigned_int@char1:
   140                           	opt stack 0
   141  000003                     get_CDC@state:
   142                           	opt stack 0
   143  000003                     w32_spi@data:
   144                           	opt stack 0
   145  000003                     ___awdiv@divisor:
   146                           	opt stack 0
   147                           
   148                           ; 2 bytes @ 0x2
   149  000003                     	ds	1
   150  000004                     uart_write_unsigned_int@char2:
   151                           	opt stack 0
   152                           
   153                           ; 1 bytes @ 0x3
   154  000004                     	ds	1
   155  000005                     ??_w32_spi:
   156  000005                     ___awdiv@counter:
   157                           	opt stack 0
   158  000005                     sensor_CDC@sensor:
   159                           	opt stack 0
   160  000005                     w16_r16_spi@p1:
   161                           	opt stack 0
   162                           
   163                           ; 2 bytes @ 0x4
   164  000005                     	ds	1
   165  000006                     ___awdiv@sign:
   166                           	opt stack 0
   167                           
   168                           ; 1 bytes @ 0x5
   169  000006                     	ds	1
   170  000007                     sensor_CDC@state:
   171                           	opt stack 0
   172  000007                     w32_spi@p1:
   173                           	opt stack 0
   174  000007                     w16_r16_spi@p2:
   175                           	opt stack 0
   176  000007                     ___awdiv@quotient:
   177                           	opt stack 0
   178                           
   179                           ; 2 bytes @ 0x6
   180  000007                     	ds	2
   181  000009                     delay_ms@n:
   182                           	opt stack 0
   183  000009                     w32_spi@p2:
   184                           	opt stack 0
   185  000009                     w16_r16_spi@address_low:
   186                           	opt stack 0
   187                           
   188                           ; 2 bytes @ 0x8
   189  000009                     	ds	2
   190  00000B                     ??_delay_ms:
   191  00000B                     w32_spi@p3:
   192                           	opt stack 0
   193  00000B                     w16_r16_spi@address_high:
   194                           	opt stack 0
   195                           
   196                           ; 2 bytes @ 0xA
   197  00000B                     	ds	1
   198  00000C                     delay_ms@j:
   199                           	opt stack 0
   200                           
   201                           ; 2 bytes @ 0xB
   202  00000C                     	ds	1
   203  00000D                     w32_spi@p4:
   204                           	opt stack 0
   205  00000D                     w16_r16_spi@result:
   206                           	opt stack 0
   207                           
   208                           ; 2 bytes @ 0xC
   209  00000D                     	ds	2
   210  00000F                     w32_spi@address_low:
   211                           	opt stack 0
   212  00000F                     w16_r16_spi@blank_low:
   213                           	opt stack 0
   214                           
   215                           ; 2 bytes @ 0xE
   216  00000F                     	ds	2
   217  000011                     w32_spi@address_high:
   218                           	opt stack 0
   219  000011                     w16_r16_spi@blank_high:
   220                           	opt stack 0
   221                           
   222                           ; 2 bytes @ 0x10
   223  000011                     	ds	2
   224  000013                     w32_spi@data_low:
   225                           	opt stack 0
   226  000013                     w16_r16_spi@p3:
   227                           	opt stack 0
   228                           
   229                           ; 2 bytes @ 0x12
   230  000013                     	ds	2
   231  000015                     w32_spi@data_high:
   232                           	opt stack 0
   233  000015                     w16_r16_spi@p4:
   234                           	opt stack 0
   235                           
   236                           ; 2 bytes @ 0x14
   237  000015                     	ds	2
   238  000017                     ?_read_AD7147_interrupt:
   239                           	opt stack 0
   240  000017                     ?_read_sensor:
   241                           	opt stack 0
   242  000017                     ?_get_ID:
   243                           	opt stack 0
   244  000017                     write_AD7147@RegisterAddress:
   245                           	opt stack 0
   246  000017                     read_AD7147_interrupt@RegisterAddress:
   247                           	opt stack 0
   248  000017                     read_sensor@sensor:
   249                           	opt stack 0
   250  000017                     get_ID@cdc:
   251                           	opt stack 0
   252  000017                     blink_LED@cdc:
   253                           	opt stack 0
   254                           
   255                           ; 2 bytes @ 0x16
   256  000017                     	ds	2
   257  000019                     ??_get_ID:
   258  000019                     write_AD7147@NumberOfRegisters:
   259                           	opt stack 0
   260  000019                     read_AD7147_interrupt@Register_Values:
   261                           	opt stack 0
   262  000019                     read_sensor@register1:
   263                           	opt stack 0
   264  000019                     blink_LED@message:
   265                           	opt stack 0
   266                           
   267                           ; 2 bytes @ 0x18
   268  000019                     	ds	1
   269  00001A                     get_ID@result:
   270                           	opt stack 0
   271                           
   272                           ; 2 bytes @ 0x19
   273  00001A                     	ds	1
   274  00001B                     write_AD7147@DataBuffer:
   275                           	opt stack 0
   276  00001B                     read_AD7147_interrupt@interrupt_clear:
   277                           	opt stack 0
   278  00001B                     read_sensor@sensor_value:
   279                           	opt stack 0
   280                           
   281                           ; 2 bytes @ 0x1A
   282  00001B                     	ds	2
   283  00001D                     write_AD7147@index:
   284                           	opt stack 0
   285  00001D                     read_sensor@cdc_sensor:
   286                           	opt stack 0
   287                           
   288                           ; 2 bytes @ 0x1C
   289  00001D                     	ds	2
   290  00001F                     ??_write_AD7147:
   291                           
   292                           ; 1 bytes @ 0x1E
   293  00001F                     	ds	2
   294  000021                     write_AD7147@Register_Value:
   295                           	opt stack 0
   296                           
   297                           ; 2 bytes @ 0x20
   298  000021                     	ds	2
   299  000023                     write_AD7147@Data_Value:
   300                           	opt stack 0
   301                           
   302                           ; 2 bytes @ 0x22
   303  000023                     	ds	2
   304  000025                     write_AD7147@i:
   305                           	opt stack 0
   306                           
   307                           ; 2 bytes @ 0x24
   308  000025                     	ds	2
   309  000027                     setup_AD7147@cdc:
   310                           	opt stack 0
   311                           
   312                           ; 2 bytes @ 0x26
   313  000027                     	ds	2
   314  000029                     setup_AD7147@int_low:
   315                           	opt stack 0
   316                           
   317                           ; 2 bytes @ 0x28
   318  000029                     	ds	2
   319  00002B                     setup_AD7147@int_high:
   320                           	opt stack 0
   321                           
   322                           ; 2 bytes @ 0x2A
   323  00002B                     	ds	2
   324  00002D                     setup_AD7147@int_complete:
   325                           	opt stack 0
   326                           
   327                           ; 2 bytes @ 0x2C
   328  00002D                     	ds	2
   329  00002F                     setup_AD7147@AD7147Registers:
   330                           	opt stack 0
   331                           
   332                           ; 16 bytes @ 0x2E
   333  00002F                     	ds	16
   334  00003F                     setup_AD7147@StageBuffer:
   335                           	opt stack 0
   336                           
   337                           ; 16 bytes @ 0x3E
   338  00003F                     	ds	16
   339  00004F                     main@bb:
   340                           	opt stack 0
   341                           
   342                           ; 2 bytes @ 0x4E
   343  00004F                     	ds	2
   344  000051                     main@device_ID:
   345                           	opt stack 0
   346                           
   347                           ; 2 bytes @ 0x50
   348  000051                     	ds	2
   349  000053                     main@sensor_1:
   350                           	opt stack 0
   351                           
   352                           ; 2 bytes @ 0x52
   353  000053                     	ds	2
   354  000055                     main@indicator:
   355                           	opt stack 0
   356                           
   357                           ; 1 bytes @ 0x54
   358  000055                     	ds	1
   359                           postinc0	equ	0xFEE
   360                           wreg	equ	0xFE8
   361                           
   362 ;;
   363 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   364 ;;
   365 ;; *************** function _main *****************
   366 ;; Defined at:
   367 ;;		line 6 in file "main.c"
   368 ;; Parameters:    Size  Location     Type
   369 ;;		None
   370 ;; Auto vars:     Size  Location     Type
   371 ;;  sensor_1        2   82[COMRAM] unsigned int 
   372 ;;  device_ID       2   80[COMRAM] unsigned int 
   373 ;;  bb              2   78[COMRAM] unsigned int 
   374 ;;  indicator       1   84[COMRAM] unsigned char 
   375 ;;  sensor          0    0        unsigned int [0]
   376 ;; Return value:  Size  Location     Type
   377 ;;                  1    wreg      void 
   378 ;; Registers used:
   379 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   380 ;; Tracked objects:
   381 ;;		On entry : 0/0
   382 ;;		On exit  : 0/0
   383 ;;		Unchanged: 0/0
   384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   386 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   388 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   389 ;;Total ram usage:        7 bytes
   390 ;; Hardware stack levels required when called:    3
   391 ;; This function calls:
   392 ;;		_blink_LED
   393 ;;		_delay_ms
   394 ;;		_get_ID
   395 ;;		_read_sensor
   396 ;;		_setup_AD7147
   397 ;;		_setup_mcu
   398 ;;		_setup_spi
   399 ;;		_uart_write_char
   400 ;;		_uart_write_unsigned_int
   401 ;; This function is called by:
   402 ;;		Startup code after reset
   403 ;; This function uses a non-reentrant model
   404 ;;
   405                           
   406                           	psect	text0
   407  007934                     __ptext0:
   408                           	opt stack 0
   409  007934                     _main:
   410                           	opt stack 28
   411                           
   412                           ;main.c: 8: delay_ms(500);
   413                           
   414                           ;incstack = 0
   415  007934  0E01               	movlw	1
   416  007936  6E0A               	movwf	delay_ms@n+1,c
   417  007938  0EF4               	movlw	244
   418  00793A  6E09               	movwf	delay_ms@n,c
   419  00793C  ECC2  F03A         	call	_delay_ms	;wreg free
   420                           
   421                           ;main.c: 9: setup_mcu();
   422  007940  EC42  F03A         	call	_setup_mcu	;wreg free
   423                           
   424                           ;main.c: 10: setup_spi();
   425  007944  EC68  F03A         	call	_setup_spi	;wreg free
   426                           
   427                           ;main.c: 11: setup_AD7147(1);
   428  007948  0E00               	movlw	0
   429  00794A  6E28               	movwf	setup_AD7147@cdc+1,c
   430  00794C  0E01               	movlw	1
   431  00794E  6E27               	movwf	setup_AD7147@cdc,c
   432  007950  EC04  F03D         	call	_setup_AD7147	;wreg free
   433                           
   434                           ;main.c: 12: setup_AD7147(2);
   435  007954  0E00               	movlw	0
   436  007956  6E28               	movwf	setup_AD7147@cdc+1,c
   437  007958  0E02               	movlw	2
   438  00795A  6E27               	movwf	setup_AD7147@cdc,c
   439  00795C  EC04  F03D         	call	_setup_AD7147	;wreg free
   440                           
   441                           ;main.c: 14: blink_LED(2);
   442  007960  0E00               	movlw	0
   443  007962  6E18               	movwf	blink_LED@cdc+1,c
   444  007964  0E02               	movlw	2
   445  007966  6E17               	movwf	blink_LED@cdc,c
   446  007968  EC43  F03C         	call	_blink_LED	;wreg free
   447                           
   448                           ;main.c: 15: blink_LED(1);
   449  00796C  0E00               	movlw	0
   450  00796E  6E18               	movwf	blink_LED@cdc+1,c
   451  007970  0E01               	movlw	1
   452  007972  6E17               	movwf	blink_LED@cdc,c
   453  007974  EC43  F03C         	call	_blink_LED	;wreg free
   454                           
   455                           ;main.c: 16: char indicator = 's';
   456  007978  0E73               	movlw	115
   457  00797A  6E55               	movwf	main@indicator,c
   458                           
   459                           ;main.c: 17: unsigned int bb = 1020;
   460  00797C  0E03               	movlw	3
   461  00797E  6E50               	movwf	main@bb+1,c
   462  007980  0EFC               	movlw	252
   463  007982  6E4F               	movwf	main@bb,c
   464  007984                     l1937:
   465                           
   466                           ;main.c: 20: {
   467                           ;main.c: 21: if (indicator == 'i')
   468  007984  0E69               	movlw	105
   469  007986  1855               	xorwf	main@indicator,w,c
   470  007988  A4D8               	btfss	status,2,c
   471  00798A  D013               	goto	l1945
   472                           
   473                           ;main.c: 22: {
   474                           ;main.c: 23: uart_write_char('i');
   475  00798C  0E69               	movlw	105
   476  00798E  EC47  F03A         	call	_uart_write_char
   477                           
   478                           ;main.c: 24: unsigned int device_ID = get_ID(2);
   479  007992  0E00               	movlw	0
   480  007994  6E18               	movwf	get_ID@cdc+1,c
   481  007996  0E02               	movlw	2
   482  007998  6E17               	movwf	get_ID@cdc,c
   483  00799A  ECE2  F03A         	call	_get_ID	;wreg free
   484  00799E  C017  F051         	movff	?_get_ID,main@device_ID
   485  0079A2  C018  F052         	movff	?_get_ID+1,main@device_ID+1
   486                           
   487                           ;main.c: 25: uart_write_unsigned_int(device_ID);
   488  0079A6  C051  F001         	movff	main@device_ID,uart_write_unsigned_int@number
   489  0079AA  C052  F002         	movff	main@device_ID+1,uart_write_unsigned_int@number+1
   490  0079AE  EC73  F03A         	call	_uart_write_unsigned_int	;wreg free
   491  0079B2                     l1945:
   492                           
   493                           ;main.c: 26: }
   494                           ;main.c: 27: if (indicator == 's')
   495  0079B2  0E73               	movlw	115
   496  0079B4  1855               	xorwf	main@indicator,w,c
   497  0079B6  A4D8               	btfss	status,2,c
   498  0079B8  D013               	goto	l1953
   499                           
   500                           ;main.c: 28: {
   501                           ;main.c: 29: uart_write_char('s');
   502  0079BA  0E73               	movlw	115
   503  0079BC  EC47  F03A         	call	_uart_write_char
   504                           
   505                           ;main.c: 30: unsigned int sensor_1 = read_sensor(14);
   506  0079C0  0E00               	movlw	0
   507  0079C2  6E18               	movwf	read_sensor@sensor+1,c
   508  0079C4  0E0E               	movlw	14
   509  0079C6  6E17               	movwf	read_sensor@sensor,c
   510  0079C8  EC45  F03B         	call	_read_sensor	;wreg free
   511  0079CC  C017  F053         	movff	?_read_sensor,main@sensor_1
   512  0079D0  C018  F054         	movff	?_read_sensor+1,main@sensor_1+1
   513                           
   514                           ;main.c: 31: uart_write_unsigned_int(sensor_1);
   515  0079D4  C053  F001         	movff	main@sensor_1,uart_write_unsigned_int@number
   516  0079D8  C054  F002         	movff	main@sensor_1+1,uart_write_unsigned_int@number+1
   517  0079DC  EC73  F03A         	call	_uart_write_unsigned_int	;wreg free
   518  0079E0                     l1953:
   519                           
   520                           ;main.c: 32: }
   521                           ;main.c: 33: if (indicator == 'f')
   522  0079E0  0E66               	movlw	102
   523  0079E2  1855               	xorwf	main@indicator,w,c
   524  0079E4  A4D8               	btfss	status,2,c
   525  0079E6  D009               	goto	l1959
   526                           
   527                           ;main.c: 34: {
   528                           ;main.c: 35: uart_write_char('f');
   529  0079E8  0E66               	movlw	102
   530  0079EA  EC47  F03A         	call	_uart_write_char
   531                           
   532                           ;main.c: 37: uart_write_unsigned_int(bb);
   533  0079EE  C04F  F001         	movff	main@bb,uart_write_unsigned_int@number
   534  0079F2  C050  F002         	movff	main@bb+1,uart_write_unsigned_int@number+1
   535  0079F6  EC73  F03A         	call	_uart_write_unsigned_int	;wreg free
   536  0079FA                     l1959:
   537                           
   538                           ;main.c: 38: }
   539                           ;main.c: 39: delay_ms(500);
   540  0079FA  0E01               	movlw	1
   541  0079FC  6E0A               	movwf	delay_ms@n+1,c
   542  0079FE  0EF4               	movlw	244
   543  007A00  6E09               	movwf	delay_ms@n,c
   544  007A02  ECC2  F03A         	call	_delay_ms	;wreg free
   545  007A06  D7BE               	goto	l1937
   546  007A08                     __end_of_main:
   547                           	opt stack 0
   548                           postinc0	equ	0xFEE
   549                           wreg	equ	0xFE8
   550                           status	equ	0xFD8
   551                           
   552 ;; *************** function _uart_write_unsigned_int *****************
   553 ;; Defined at:
   554 ;;		line 39 in file "uart.c"
   555 ;; Parameters:    Size  Location     Type
   556 ;;  number          2    0[COMRAM] unsigned int 
   557 ;; Auto vars:     Size  Location     Type
   558 ;;  char2           1    3[COMRAM] unsigned char 
   559 ;;  char1           1    2[COMRAM] unsigned char 
   560 ;; Return value:  Size  Location     Type
   561 ;;                  1    wreg      void 
   562 ;; Registers used:
   563 ;;		wreg, status,2
   564 ;; Tracked objects:
   565 ;;		On entry : 0/0
   566 ;;		On exit  : 0/0
   567 ;;		Unchanged: 0/0
   568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   569 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   570 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   572 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   573 ;;Total ram usage:        4 bytes
   574 ;; Hardware stack levels used:    1
   575 ;; This function calls:
   576 ;;		Nothing
   577 ;; This function is called by:
   578 ;;		_main
   579 ;; This function uses a non-reentrant model
   580 ;;
   581                           
   582                           	psect	text1
   583  0074E6                     __ptext1:
   584                           	opt stack 0
   585  0074E6                     _uart_write_unsigned_int:
   586                           	opt stack 30
   587                           
   588                           ;uart.c: 41: char char1 = number & 0xFF;
   589                           
   590                           ;incstack = 0
   591  0074E6  C001  F003         	movff	uart_write_unsigned_int@number,uart_write_unsigned_int@char1
   592                           
   593                           ;uart.c: 42: char char2 = number >> 8;
   594  0074EA  5002               	movf	uart_write_unsigned_int@number+1,w,c
   595  0074EC  6E04               	movwf	uart_write_unsigned_int@char2,c
   596  0074EE                     l246:
   597  0074EE  A2AC               	btfss	4012,1,c	;volatile
   598  0074F0  D7FE               	goto	l246
   599                           
   600                           ;uart.c: 45: TXREG1 = char1;
   601  0074F2  C003  FFAD         	movff	uart_write_unsigned_int@char1,4013	;volatile
   602  0074F6                     l249:
   603  0074F6  A2AC               	btfss	4012,1,c	;volatile
   604  0074F8  D7FE               	goto	l249
   605                           
   606                           ;uart.c: 47: TXREG1 = char2;
   607  0074FA  C004  FFAD         	movff	uart_write_unsigned_int@char2,4013	;volatile
   608  0074FE  0012               	return		;funcret
   609  007500                     __end_of_uart_write_unsigned_int:
   610                           	opt stack 0
   611                           postinc0	equ	0xFEE
   612                           wreg	equ	0xFE8
   613                           status	equ	0xFD8
   614                           
   615 ;; *************** function _uart_write_char *****************
   616 ;; Defined at:
   617 ;;		line 24 in file "uart.c"
   618 ;; Parameters:    Size  Location     Type
   619 ;;  data            1    wreg     unsigned char 
   620 ;; Auto vars:     Size  Location     Type
   621 ;;  data            1    0[COMRAM] unsigned char 
   622 ;; Return value:  Size  Location     Type
   623 ;;                  1    wreg      void 
   624 ;; Registers used:
   625 ;;		wreg
   626 ;; Tracked objects:
   627 ;;		On entry : 0/0
   628 ;;		On exit  : 0/0
   629 ;;		Unchanged: 0/0
   630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   632 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   634 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   635 ;;Total ram usage:        1 bytes
   636 ;; Hardware stack levels used:    1
   637 ;; This function calls:
   638 ;;		Nothing
   639 ;; This function is called by:
   640 ;;		_main
   641 ;;		_uart_write_string
   642 ;; This function uses a non-reentrant model
   643 ;;
   644                           
   645                           	psect	text2
   646  00748E                     __ptext2:
   647                           	opt stack 0
   648  00748E                     _uart_write_char:
   649                           	opt stack 30
   650                           
   651                           ;incstack = 0
   652                           ;uart_write_char@data stored from wreg
   653  00748E  6E01               	movwf	uart_write_char@data,c
   654  007490                     l234:
   655  007490  A2AC               	btfss	4012,1,c	;volatile
   656  007492  D7FE               	goto	l234
   657                           
   658                           ;uart.c: 28: TXREG1 = data;
   659  007494  C001  FFAD         	movff	uart_write_char@data,4013	;volatile
   660  007498  0012               	return		;funcret
   661  00749A                     __end_of_uart_write_char:
   662                           	opt stack 0
   663                           postinc0	equ	0xFEE
   664                           wreg	equ	0xFE8
   665                           status	equ	0xFD8
   666                           
   667 ;; *************** function _setup_spi *****************
   668 ;; Defined at:
   669 ;;		line 4 in file "spi.c"
   670 ;; Parameters:    Size  Location     Type
   671 ;;		None
   672 ;; Auto vars:     Size  Location     Type
   673 ;;		None
   674 ;; Return value:  Size  Location     Type
   675 ;;                  1    wreg      void 
   676 ;; Registers used:
   677 ;;		None
   678 ;; Tracked objects:
   679 ;;		On entry : 0/0
   680 ;;		On exit  : 0/0
   681 ;;		Unchanged: 0/0
   682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   686 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   687 ;;Total ram usage:        0 bytes
   688 ;; Hardware stack levels used:    1
   689 ;; This function calls:
   690 ;;		Nothing
   691 ;; This function is called by:
   692 ;;		_main
   693 ;; This function uses a non-reentrant model
   694 ;;
   695                           
   696                           	psect	text3
   697  0074D0                     __ptext3:
   698                           	opt stack 0
   699  0074D0                     _setup_spi:
   700                           	opt stack 30
   701                           
   702                           ;spi.c: 6: SSPSTATbits.SMP = 0;
   703                           
   704                           ;incstack = 0
   705  0074D0  9EC7               	bcf	4039,7,c	;volatile
   706                           
   707                           ;spi.c: 7: SSPSTATbits.CKE = 0;
   708  0074D2  9CC7               	bcf	4039,6,c	;volatile
   709                           
   710                           ;spi.c: 9: SSPCON1bits.WCOL = 0;
   711  0074D4  9EC6               	bcf	4038,7,c	;volatile
   712                           
   713                           ;spi.c: 10: SSPCON1bits.CKP = 1;
   714  0074D6  88C6               	bsf	4038,4,c	;volatile
   715                           
   716                           ;spi.c: 12: SSPCON1bits.SSPM3 = 0;
   717  0074D8  96C6               	bcf	4038,3,c	;volatile
   718                           
   719                           ;spi.c: 13: SSPCON1bits.SSPM2 = 0;
   720  0074DA  94C6               	bcf	4038,2,c	;volatile
   721                           
   722                           ;spi.c: 14: SSPCON1bits.SSPM1 = 1;
   723  0074DC  82C6               	bsf	4038,1,c	;volatile
   724                           
   725                           ;spi.c: 15: SSPCON1bits.SSPM0 = 0;
   726  0074DE  90C6               	bcf	4038,0,c	;volatile
   727                           
   728                           ;spi.c: 17: PIE1bits.SSPIE = 0;
   729  0074E0  969D               	bcf	3997,3,c	;volatile
   730                           
   731                           ;spi.c: 19: SSPCON1bits.SSPEN = 1;
   732  0074E2  8AC6               	bsf	4038,5,c	;volatile
   733  0074E4  0012               	return		;funcret
   734  0074E6                     __end_of_setup_spi:
   735                           	opt stack 0
   736                           postinc0	equ	0xFEE
   737                           wreg	equ	0xFE8
   738                           status	equ	0xFD8
   739                           
   740 ;; *************** function _setup_mcu *****************
   741 ;; Defined at:
   742 ;;		line 6 in file "micro_setup.c"
   743 ;; Parameters:    Size  Location     Type
   744 ;;		None
   745 ;; Auto vars:     Size  Location     Type
   746 ;;		None
   747 ;; Return value:  Size  Location     Type
   748 ;;                  1    wreg      void 
   749 ;; Registers used:
   750 ;;		wreg, status,2, cstack
   751 ;; Tracked objects:
   752 ;;		On entry : 0/0
   753 ;;		On exit  : 0/0
   754 ;;		Unchanged: 0/0
   755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   759 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   760 ;;Total ram usage:        0 bytes
   761 ;; Hardware stack levels used:    1
   762 ;; Hardware stack levels required when called:    1
   763 ;; This function calls:
   764 ;;		_init_uart
   765 ;;		_setup_port
   766 ;; This function is called by:
   767 ;;		_main
   768 ;; This function uses a non-reentrant model
   769 ;;
   770                           
   771                           	psect	text4
   772  007484                     __ptext4:
   773                           	opt stack 0
   774  007484                     _setup_mcu:
   775                           	opt stack 29
   776                           
   777                           ;micro_setup.c: 8: setup_port();
   778                           
   779                           ;incstack = 0
   780  007484  EC4D  F03A         	call	_setup_port	;wreg free
   781                           
   782                           ;micro_setup.c: 9: init_uart();
   783  007488  EC5E  F03A         	call	_init_uart	;wreg free
   784  00748C  0012               	return		;funcret
   785  00748E                     __end_of_setup_mcu:
   786                           	opt stack 0
   787                           postinc0	equ	0xFEE
   788                           wreg	equ	0xFE8
   789                           status	equ	0xFD8
   790                           
   791 ;; *************** function _setup_port *****************
   792 ;; Defined at:
   793 ;;		line 12 in file "micro_setup.c"
   794 ;; Parameters:    Size  Location     Type
   795 ;;		None
   796 ;; Auto vars:     Size  Location     Type
   797 ;;		None
   798 ;; Return value:  Size  Location     Type
   799 ;;                  1    wreg      void 
   800 ;; Registers used:
   801 ;;		wreg, status,2
   802 ;; Tracked objects:
   803 ;;		On entry : 0/0
   804 ;;		On exit  : 0/0
   805 ;;		Unchanged: 0/0
   806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   811 ;;Total ram usage:        0 bytes
   812 ;; Hardware stack levels used:    1
   813 ;; This function calls:
   814 ;;		Nothing
   815 ;; This function is called by:
   816 ;;		_setup_mcu
   817 ;; This function uses a non-reentrant model
   818 ;;
   819                           
   820                           	psect	text5
   821  00749A                     __ptext5:
   822                           	opt stack 0
   823  00749A                     _setup_port:
   824                           	opt stack 29
   825                           
   826                           ;micro_setup.c: 15: TRISB = 0b00000011;
   827                           
   828                           ;incstack = 0
   829  00749A  0E03               	movlw	3
   830  00749C  6E93               	movwf	3987,c	;volatile
   831                           
   832                           ;micro_setup.c: 16: TRISC = 0b10010000;
   833  00749E  0E90               	movlw	144
   834  0074A0  6E94               	movwf	3988,c	;volatile
   835                           
   836                           ;micro_setup.c: 17: LATCbits.LATC1=1;
   837  0074A2  828B               	bsf	3979,1,c	;volatile
   838                           
   839                           ;micro_setup.c: 18: LATCbits.LATC0=1;
   840  0074A4  808B               	bsf	3979,0,c	;volatile
   841                           
   842                           ;micro_setup.c: 19: LATCbits.LATC2=1;
   843  0074A6  848B               	bsf	3979,2,c	;volatile
   844  0074A8  0012               	return		;funcret
   845  0074AA                     __end_of_setup_port:
   846                           	opt stack 0
   847                           postinc0	equ	0xFEE
   848                           wreg	equ	0xFE8
   849                           status	equ	0xFD8
   850                           
   851 ;; *************** function _init_uart *****************
   852 ;; Defined at:
   853 ;;		line 22 in file "micro_setup.c"
   854 ;; Parameters:    Size  Location     Type
   855 ;;		None
   856 ;; Auto vars:     Size  Location     Type
   857 ;;		None
   858 ;; Return value:  Size  Location     Type
   859 ;;                  1    wreg      void 
   860 ;; Registers used:
   861 ;;		wreg, status,2
   862 ;; Tracked objects:
   863 ;;		On entry : 0/0
   864 ;;		On exit  : 0/0
   865 ;;		Unchanged: 0/0
   866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   870 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   871 ;;Total ram usage:        0 bytes
   872 ;; Hardware stack levels used:    1
   873 ;; This function calls:
   874 ;;		Nothing
   875 ;; This function is called by:
   876 ;;		_setup_mcu
   877 ;; This function uses a non-reentrant model
   878 ;;
   879                           
   880                           	psect	text6
   881  0074BC                     __ptext6:
   882                           	opt stack 0
   883  0074BC                     _init_uart:
   884                           	opt stack 29
   885                           
   886                           ;micro_setup.c: 24: TXSTA1 = 0b00100000;
   887                           
   888                           ;incstack = 0
   889  0074BC  0E20               	movlw	32
   890  0074BE  6EAC               	movwf	4012,c	;volatile
   891                           
   892                           ;micro_setup.c: 36: SPBRG1 = 12;
   893  0074C0  0E0C               	movlw	12
   894  0074C2  6EAF               	movwf	4015,c	;volatile
   895                           
   896                           ;micro_setup.c: 38: BAUDCON1 = 0b00000000;
   897  0074C4  0E00               	movlw	0
   898  0074C6  6EA7               	movwf	4007,c	;volatile
   899                           
   900                           ;micro_setup.c: 58: RCSTA1bits.SPEN=1;
   901  0074C8  8EAB               	bsf	4011,7,c	;volatile
   902                           
   903                           ;micro_setup.c: 59: RCSTA1bits.RX9=0;
   904  0074CA  9CAB               	bcf	4011,6,c	;volatile
   905                           
   906                           ;micro_setup.c: 60: RCSTA1bits.CREN=1;
   907  0074CC  88AB               	bsf	4011,4,c	;volatile
   908  0074CE  0012               	return		;funcret
   909  0074D0                     __end_of_init_uart:
   910                           	opt stack 0
   911                           postinc0	equ	0xFEE
   912                           wreg	equ	0xFE8
   913                           status	equ	0xFD8
   914                           
   915 ;; *************** function _setup_AD7147 *****************
   916 ;; Defined at:
   917 ;;		line 6 in file "AD7147.c"
   918 ;; Parameters:    Size  Location     Type
   919 ;;  cdc             2   38[COMRAM] unsigned int 
   920 ;; Auto vars:     Size  Location     Type
   921 ;;  StageBuffer    16   62[COMRAM] unsigned int [8]
   922 ;;  AD7147Regist   16   46[COMRAM] unsigned int [8]
   923 ;;  int_complete    2   44[COMRAM] unsigned int 
   924 ;;  int_high        2   42[COMRAM] unsigned int 
   925 ;;  int_low         2   40[COMRAM] unsigned int 
   926 ;; Return value:  Size  Location     Type
   927 ;;                  1    wreg      void 
   928 ;; Registers used:
   929 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   930 ;; Tracked objects:
   931 ;;		On entry : 0/0
   932 ;;		On exit  : 0/0
   933 ;;		Unchanged: 0/0
   934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   935 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   936 ;;      Locals:        38       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   938 ;;      Totals:        40       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   939 ;;Total ram usage:       40 bytes
   940 ;; Hardware stack levels used:    1
   941 ;; Hardware stack levels required when called:    2
   942 ;; This function calls:
   943 ;;		_get_CDC
   944 ;;		_read_AD7147_interrupt
   945 ;;		_write_AD7147
   946 ;; This function is called by:
   947 ;;		_main
   948 ;; This function uses a non-reentrant model
   949 ;;
   950                           
   951                           	psect	text7
   952  007A08                     __ptext7:
   953                           	opt stack 0
   954  007A08                     _setup_AD7147:
   955                           	opt stack 28
   956                           
   957                           ;AD7147.c: 8: unsigned int StageBuffer[8];
   958                           ;AD7147.c: 9: unsigned int AD7147Registers[8];
   959                           ;AD7147.c: 10: get_CDC(cdc,0);
   960                           
   961                           ;incstack = 0
   962  007A08  C027  F001         	movff	setup_AD7147@cdc,get_CDC@cdc
   963  007A0C  C028  F002         	movff	setup_AD7147@cdc+1,get_CDC@cdc+1
   964  007A10  0E00               	movlw	0
   965  007A12  6E04               	movwf	get_CDC@state+1,c
   966  007A14  0E00               	movlw	0
   967  007A16  6E03               	movwf	get_CDC@state,c
   968  007A18  EC80  F03A         	call	_get_CDC	;wreg free
   969                           
   970                           ;AD7147.c: 25: StageBuffer[0] = 0xFFFE;
   971  007A1C  0EFF               	movlw	255
   972  007A1E  6E40               	movwf	setup_AD7147@StageBuffer+1,c
   973  007A20  0EFE               	movlw	254
   974  007A22  6E3F               	movwf	setup_AD7147@StageBuffer,c
   975                           
   976                           ;AD7147.c: 26: StageBuffer[1] = 0x1FFF;
   977  007A24  0E1F               	movlw	31
   978  007A26  6E42               	movwf	setup_AD7147@StageBuffer+3,c
   979  007A28  6841               	setf	setup_AD7147@StageBuffer+2,c
   980                           
   981                           ;AD7147.c: 27: StageBuffer[2] = 0x0000;
   982  007A2A  0E00               	movlw	0
   983  007A2C  6E44               	movwf	setup_AD7147@StageBuffer+5,c
   984  007A2E  0E00               	movlw	0
   985  007A30  6E43               	movwf	setup_AD7147@StageBuffer+4,c
   986                           
   987                           ;AD7147.c: 28: StageBuffer[3] = 0x2121;
   988  007A32  0E21               	movlw	33
   989  007A34  6E46               	movwf	setup_AD7147@StageBuffer+7,c
   990  007A36  0E21               	movlw	33
   991  007A38  6E45               	movwf	setup_AD7147@StageBuffer+6,c
   992                           
   993                           ;AD7147.c: 29: StageBuffer[4] = 4000;
   994  007A3A  0E0F               	movlw	15
   995  007A3C  6E48               	movwf	setup_AD7147@StageBuffer+9,c
   996  007A3E  0EA0               	movlw	160
   997  007A40  6E47               	movwf	setup_AD7147@StageBuffer+8,c
   998                           
   999                           ;AD7147.c: 30: StageBuffer[5] = 4000;
  1000  007A42  0E0F               	movlw	15
  1001  007A44  6E4A               	movwf	setup_AD7147@StageBuffer+11,c
  1002  007A46  0EA0               	movlw	160
  1003  007A48  6E49               	movwf	setup_AD7147@StageBuffer+10,c
  1004                           
  1005                           ;AD7147.c: 31: StageBuffer[6] = 4250;
  1006  007A4A  0E10               	movlw	16
  1007  007A4C  6E4C               	movwf	setup_AD7147@StageBuffer+13,c
  1008  007A4E  0E9A               	movlw	154
  1009  007A50  6E4B               	movwf	setup_AD7147@StageBuffer+12,c
  1010                           
  1011                           ;AD7147.c: 32: StageBuffer[7] = 4250;
  1012  007A52  0E10               	movlw	16
  1013  007A54  6E4E               	movwf	setup_AD7147@StageBuffer+15,c
  1014  007A56  0E9A               	movlw	154
  1015  007A58  6E4D               	movwf	setup_AD7147@StageBuffer+14,c
  1016                           
  1017                           ;AD7147.c: 33: write_AD7147(0x080, 8, StageBuffer,0);
  1018  007A5A  0E00               	movlw	0
  1019  007A5C  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1020  007A5E  0E80               	movlw	128
  1021  007A60  6E17               	movwf	write_AD7147@RegisterAddress,c
  1022  007A62  0E00               	movlw	0
  1023  007A64  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1024  007A66  0E08               	movlw	8
  1025  007A68  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1026  007A6A  0E3F               	movlw	low setup_AD7147@StageBuffer
  1027  007A6C  6E1B               	movwf	write_AD7147@DataBuffer,c
  1028  007A6E  0E00               	movlw	high setup_AD7147@StageBuffer
  1029  007A70  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1030  007A72  0E00               	movlw	0
  1031  007A74  6E1E               	movwf	write_AD7147@index+1,c
  1032  007A76  0E00               	movlw	0
  1033  007A78  6E1D               	movwf	write_AD7147@index,c
  1034  007A7A  ECC2  F03B         	call	_write_AD7147	;wreg free
  1035                           
  1036                           ;AD7147.c: 38: StageBuffer[0]=0xFFFB;
  1037  007A7E  0EFF               	movlw	255
  1038  007A80  6E40               	movwf	setup_AD7147@StageBuffer+1,c
  1039  007A82  0EFB               	movlw	251
  1040  007A84  6E3F               	movwf	setup_AD7147@StageBuffer,c
  1041                           
  1042                           ;AD7147.c: 39: StageBuffer[1]=0x1FFF;
  1043  007A86  0E1F               	movlw	31
  1044  007A88  6E42               	movwf	setup_AD7147@StageBuffer+3,c
  1045  007A8A  6841               	setf	setup_AD7147@StageBuffer+2,c
  1046                           
  1047                           ;AD7147.c: 40: StageBuffer[2]=0x0100;
  1048  007A8C  0E01               	movlw	1
  1049  007A8E  6E44               	movwf	setup_AD7147@StageBuffer+5,c
  1050  007A90  0E00               	movlw	0
  1051  007A92  6E43               	movwf	setup_AD7147@StageBuffer+4,c
  1052                           
  1053                           ;AD7147.c: 41: StageBuffer[3]=0x2121;
  1054  007A94  0E21               	movlw	33
  1055  007A96  6E46               	movwf	setup_AD7147@StageBuffer+7,c
  1056  007A98  0E21               	movlw	33
  1057  007A9A  6E45               	movwf	setup_AD7147@StageBuffer+6,c
  1058                           
  1059                           ;AD7147.c: 42: StageBuffer[4]=4000;
  1060  007A9C  0E0F               	movlw	15
  1061  007A9E  6E48               	movwf	setup_AD7147@StageBuffer+9,c
  1062  007AA0  0EA0               	movlw	160
  1063  007AA2  6E47               	movwf	setup_AD7147@StageBuffer+8,c
  1064                           
  1065                           ;AD7147.c: 43: StageBuffer[5]=4000;
  1066  007AA4  0E0F               	movlw	15
  1067  007AA6  6E4A               	movwf	setup_AD7147@StageBuffer+11,c
  1068  007AA8  0EA0               	movlw	160
  1069  007AAA  6E49               	movwf	setup_AD7147@StageBuffer+10,c
  1070                           
  1071                           ;AD7147.c: 44: StageBuffer[6]=4250;
  1072  007AAC  0E10               	movlw	16
  1073  007AAE  6E4C               	movwf	setup_AD7147@StageBuffer+13,c
  1074  007AB0  0E9A               	movlw	154
  1075  007AB2  6E4B               	movwf	setup_AD7147@StageBuffer+12,c
  1076                           
  1077                           ;AD7147.c: 45: StageBuffer[7]=4250;
  1078  007AB4  0E10               	movlw	16
  1079  007AB6  6E4E               	movwf	setup_AD7147@StageBuffer+15,c
  1080  007AB8  0E9A               	movlw	154
  1081  007ABA  6E4D               	movwf	setup_AD7147@StageBuffer+14,c
  1082                           
  1083                           ;AD7147.c: 46: write_AD7147(0x088, 8, StageBuffer,0);
  1084  007ABC  0E00               	movlw	0
  1085  007ABE  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1086  007AC0  0E88               	movlw	136
  1087  007AC2  6E17               	movwf	write_AD7147@RegisterAddress,c
  1088  007AC4  0E00               	movlw	0
  1089  007AC6  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1090  007AC8  0E08               	movlw	8
  1091  007ACA  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1092  007ACC  0E3F               	movlw	low setup_AD7147@StageBuffer
  1093  007ACE  6E1B               	movwf	write_AD7147@DataBuffer,c
  1094  007AD0  0E00               	movlw	high setup_AD7147@StageBuffer
  1095  007AD2  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1096  007AD4  0E00               	movlw	0
  1097  007AD6  6E1E               	movwf	write_AD7147@index+1,c
  1098  007AD8  0E00               	movlw	0
  1099  007ADA  6E1D               	movwf	write_AD7147@index,c
  1100  007ADC  ECC2  F03B         	call	_write_AD7147	;wreg free
  1101                           
  1102                           ;AD7147.c: 51: StageBuffer[0]=0xFFEF;
  1103  007AE0  0EFF               	movlw	255
  1104  007AE2  6E40               	movwf	setup_AD7147@StageBuffer+1,c
  1105  007AE4  0EEF               	movlw	239
  1106  007AE6  6E3F               	movwf	setup_AD7147@StageBuffer,c
  1107                           
  1108                           ;AD7147.c: 52: StageBuffer[1]=0x1FFF;
  1109  007AE8  0E1F               	movlw	31
  1110  007AEA  6E42               	movwf	setup_AD7147@StageBuffer+3,c
  1111  007AEC  6841               	setf	setup_AD7147@StageBuffer+2,c
  1112                           
  1113                           ;AD7147.c: 53: StageBuffer[2]=0x0100;
  1114  007AEE  0E01               	movlw	1
  1115  007AF0  6E44               	movwf	setup_AD7147@StageBuffer+5,c
  1116  007AF2  0E00               	movlw	0
  1117  007AF4  6E43               	movwf	setup_AD7147@StageBuffer+4,c
  1118                           
  1119                           ;AD7147.c: 54: StageBuffer[3]=0x2121;
  1120  007AF6  0E21               	movlw	33
  1121  007AF8  6E46               	movwf	setup_AD7147@StageBuffer+7,c
  1122  007AFA  0E21               	movlw	33
  1123  007AFC  6E45               	movwf	setup_AD7147@StageBuffer+6,c
  1124                           
  1125                           ;AD7147.c: 55: StageBuffer[4]=4000;
  1126  007AFE  0E0F               	movlw	15
  1127  007B00  6E48               	movwf	setup_AD7147@StageBuffer+9,c
  1128  007B02  0EA0               	movlw	160
  1129  007B04  6E47               	movwf	setup_AD7147@StageBuffer+8,c
  1130                           
  1131                           ;AD7147.c: 56: StageBuffer[5]=4000;
  1132  007B06  0E0F               	movlw	15
  1133  007B08  6E4A               	movwf	setup_AD7147@StageBuffer+11,c
  1134  007B0A  0EA0               	movlw	160
  1135  007B0C  6E49               	movwf	setup_AD7147@StageBuffer+10,c
  1136                           
  1137                           ;AD7147.c: 57: StageBuffer[6]=4250;
  1138  007B0E  0E10               	movlw	16
  1139  007B10  6E4C               	movwf	setup_AD7147@StageBuffer+13,c
  1140  007B12  0E9A               	movlw	154
  1141  007B14  6E4B               	movwf	setup_AD7147@StageBuffer+12,c
  1142                           
  1143                           ;AD7147.c: 58: StageBuffer[7]=4250;
  1144  007B16  0E10               	movlw	16
  1145  007B18  6E4E               	movwf	setup_AD7147@StageBuffer+15,c
  1146  007B1A  0E9A               	movlw	154
  1147  007B1C  6E4D               	movwf	setup_AD7147@StageBuffer+14,c
  1148                           
  1149                           ;AD7147.c: 59: write_AD7147(0x090, 8, StageBuffer,0);
  1150  007B1E  0E00               	movlw	0
  1151  007B20  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1152  007B22  0E90               	movlw	144
  1153  007B24  6E17               	movwf	write_AD7147@RegisterAddress,c
  1154  007B26  0E00               	movlw	0
  1155  007B28  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1156  007B2A  0E08               	movlw	8
  1157  007B2C  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1158  007B2E  0E3F               	movlw	low setup_AD7147@StageBuffer
  1159  007B30  6E1B               	movwf	write_AD7147@DataBuffer,c
  1160  007B32  0E00               	movlw	high setup_AD7147@StageBuffer
  1161  007B34  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1162  007B36  0E00               	movlw	0
  1163  007B38  6E1E               	movwf	write_AD7147@index+1,c
  1164  007B3A  0E00               	movlw	0
  1165  007B3C  6E1D               	movwf	write_AD7147@index,c
  1166  007B3E  ECC2  F03B         	call	_write_AD7147	;wreg free
  1167                           
  1168                           ;AD7147.c: 64: StageBuffer[0]=0xFFBF;
  1169  007B42  0EFF               	movlw	255
  1170  007B44  6E40               	movwf	setup_AD7147@StageBuffer+1,c
  1171  007B46  0EBF               	movlw	191
  1172  007B48  6E3F               	movwf	setup_AD7147@StageBuffer,c
  1173                           
  1174                           ;AD7147.c: 65: StageBuffer[1]=0x1FFF;
  1175  007B4A  0E1F               	movlw	31
  1176  007B4C  6E42               	movwf	setup_AD7147@StageBuffer+3,c
  1177  007B4E  6841               	setf	setup_AD7147@StageBuffer+2,c
  1178                           
  1179                           ;AD7147.c: 66: StageBuffer[2]=0x0100;
  1180  007B50  0E01               	movlw	1
  1181  007B52  6E44               	movwf	setup_AD7147@StageBuffer+5,c
  1182  007B54  0E00               	movlw	0
  1183  007B56  6E43               	movwf	setup_AD7147@StageBuffer+4,c
  1184                           
  1185                           ;AD7147.c: 67: StageBuffer[3]=0x2121;
  1186  007B58  0E21               	movlw	33
  1187  007B5A  6E46               	movwf	setup_AD7147@StageBuffer+7,c
  1188  007B5C  0E21               	movlw	33
  1189  007B5E  6E45               	movwf	setup_AD7147@StageBuffer+6,c
  1190                           
  1191                           ;AD7147.c: 68: StageBuffer[4]=4000;
  1192  007B60  0E0F               	movlw	15
  1193  007B62  6E48               	movwf	setup_AD7147@StageBuffer+9,c
  1194  007B64  0EA0               	movlw	160
  1195  007B66  6E47               	movwf	setup_AD7147@StageBuffer+8,c
  1196                           
  1197                           ;AD7147.c: 69: StageBuffer[5]=4000;
  1198  007B68  0E0F               	movlw	15
  1199  007B6A  6E4A               	movwf	setup_AD7147@StageBuffer+11,c
  1200  007B6C  0EA0               	movlw	160
  1201  007B6E  6E49               	movwf	setup_AD7147@StageBuffer+10,c
  1202                           
  1203                           ;AD7147.c: 70: StageBuffer[6]=4250;
  1204  007B70  0E10               	movlw	16
  1205  007B72  6E4C               	movwf	setup_AD7147@StageBuffer+13,c
  1206  007B74  0E9A               	movlw	154
  1207  007B76  6E4B               	movwf	setup_AD7147@StageBuffer+12,c
  1208                           
  1209                           ;AD7147.c: 71: StageBuffer[7]=4250;
  1210  007B78  0E10               	movlw	16
  1211  007B7A  6E4E               	movwf	setup_AD7147@StageBuffer+15,c
  1212  007B7C  0E9A               	movlw	154
  1213  007B7E  6E4D               	movwf	setup_AD7147@StageBuffer+14,c
  1214                           
  1215                           ;AD7147.c: 72: write_AD7147(0x098, 8, StageBuffer,0);
  1216  007B80  0E00               	movlw	0
  1217  007B82  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1218  007B84  0E98               	movlw	152
  1219  007B86  6E17               	movwf	write_AD7147@RegisterAddress,c
  1220  007B88  0E00               	movlw	0
  1221  007B8A  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1222  007B8C  0E08               	movlw	8
  1223  007B8E  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1224  007B90  0E3F               	movlw	low setup_AD7147@StageBuffer
  1225  007B92  6E1B               	movwf	write_AD7147@DataBuffer,c
  1226  007B94  0E00               	movlw	high setup_AD7147@StageBuffer
  1227  007B96  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1228  007B98  0E00               	movlw	0
  1229  007B9A  6E1E               	movwf	write_AD7147@index+1,c
  1230  007B9C  0E00               	movlw	0
  1231  007B9E  6E1D               	movwf	write_AD7147@index,c
  1232  007BA0  ECC2  F03B         	call	_write_AD7147	;wreg free
  1233                           
  1234                           ;AD7147.c: 77: StageBuffer[0]=0xFEFF;
  1235  007BA4  0EFE               	movlw	254
  1236  007BA6  6E40               	movwf	setup_AD7147@StageBuffer+1,c
  1237  007BA8  683F               	setf	setup_AD7147@StageBuffer,c
  1238                           
  1239                           ;AD7147.c: 78: StageBuffer[1]=0x1FFF;
  1240  007BAA  0E1F               	movlw	31
  1241  007BAC  6E42               	movwf	setup_AD7147@StageBuffer+3,c
  1242  007BAE  6841               	setf	setup_AD7147@StageBuffer+2,c
  1243                           
  1244                           ;AD7147.c: 79: StageBuffer[2]=0x0100;
  1245  007BB0  0E01               	movlw	1
  1246  007BB2  6E44               	movwf	setup_AD7147@StageBuffer+5,c
  1247  007BB4  0E00               	movlw	0
  1248  007BB6  6E43               	movwf	setup_AD7147@StageBuffer+4,c
  1249                           
  1250                           ;AD7147.c: 80: StageBuffer[3]=0x2121;
  1251  007BB8  0E21               	movlw	33
  1252  007BBA  6E46               	movwf	setup_AD7147@StageBuffer+7,c
  1253  007BBC  0E21               	movlw	33
  1254  007BBE  6E45               	movwf	setup_AD7147@StageBuffer+6,c
  1255                           
  1256                           ;AD7147.c: 81: StageBuffer[4]=4000;
  1257  007BC0  0E0F               	movlw	15
  1258  007BC2  6E48               	movwf	setup_AD7147@StageBuffer+9,c
  1259  007BC4  0EA0               	movlw	160
  1260  007BC6  6E47               	movwf	setup_AD7147@StageBuffer+8,c
  1261                           
  1262                           ;AD7147.c: 82: StageBuffer[5]=4000;
  1263  007BC8  0E0F               	movlw	15
  1264  007BCA  6E4A               	movwf	setup_AD7147@StageBuffer+11,c
  1265  007BCC  0EA0               	movlw	160
  1266  007BCE  6E49               	movwf	setup_AD7147@StageBuffer+10,c
  1267                           
  1268                           ;AD7147.c: 83: StageBuffer[6]=4250;
  1269  007BD0  0E10               	movlw	16
  1270  007BD2  6E4C               	movwf	setup_AD7147@StageBuffer+13,c
  1271  007BD4  0E9A               	movlw	154
  1272  007BD6  6E4B               	movwf	setup_AD7147@StageBuffer+12,c
  1273                           
  1274                           ;AD7147.c: 84: StageBuffer[7]=4250;
  1275  007BD8  0E10               	movlw	16
  1276  007BDA  6E4E               	movwf	setup_AD7147@StageBuffer+15,c
  1277  007BDC  0E9A               	movlw	154
  1278  007BDE  6E4D               	movwf	setup_AD7147@StageBuffer+14,c
  1279                           
  1280                           ;AD7147.c: 85: write_AD7147(0x0A0, 8, StageBuffer,0);
  1281  007BE0  0E00               	movlw	0
  1282  007BE2  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1283  007BE4  0EA0               	movlw	160
  1284  007BE6  6E17               	movwf	write_AD7147@RegisterAddress,c
  1285  007BE8  0E00               	movlw	0
  1286  007BEA  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1287  007BEC  0E08               	movlw	8
  1288  007BEE  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1289  007BF0  0E3F               	movlw	low setup_AD7147@StageBuffer
  1290  007BF2  6E1B               	movwf	write_AD7147@DataBuffer,c
  1291  007BF4  0E00               	movlw	high setup_AD7147@StageBuffer
  1292  007BF6  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1293  007BF8  0E00               	movlw	0
  1294  007BFA  6E1E               	movwf	write_AD7147@index+1,c
  1295  007BFC  0E00               	movlw	0
  1296  007BFE  6E1D               	movwf	write_AD7147@index,c
  1297  007C00  ECC2  F03B         	call	_write_AD7147	;wreg free
  1298                           
  1299                           ;AD7147.c: 90: StageBuffer[0]=0xFBFF;
  1300  007C04  0EFB               	movlw	251
  1301  007C06  6E40               	movwf	setup_AD7147@StageBuffer+1,c
  1302  007C08  683F               	setf	setup_AD7147@StageBuffer,c
  1303                           
  1304                           ;AD7147.c: 91: StageBuffer[1]=0x1FFF;
  1305  007C0A  0E1F               	movlw	31
  1306  007C0C  6E42               	movwf	setup_AD7147@StageBuffer+3,c
  1307  007C0E  6841               	setf	setup_AD7147@StageBuffer+2,c
  1308                           
  1309                           ;AD7147.c: 92: StageBuffer[2]=0x0100;
  1310  007C10  0E01               	movlw	1
  1311  007C12  6E44               	movwf	setup_AD7147@StageBuffer+5,c
  1312  007C14  0E00               	movlw	0
  1313  007C16  6E43               	movwf	setup_AD7147@StageBuffer+4,c
  1314                           
  1315                           ;AD7147.c: 93: StageBuffer[3]=0x2121;
  1316  007C18  0E21               	movlw	33
  1317  007C1A  6E46               	movwf	setup_AD7147@StageBuffer+7,c
  1318  007C1C  0E21               	movlw	33
  1319  007C1E  6E45               	movwf	setup_AD7147@StageBuffer+6,c
  1320                           
  1321                           ;AD7147.c: 94: StageBuffer[4]=4000;
  1322  007C20  0E0F               	movlw	15
  1323  007C22  6E48               	movwf	setup_AD7147@StageBuffer+9,c
  1324  007C24  0EA0               	movlw	160
  1325  007C26  6E47               	movwf	setup_AD7147@StageBuffer+8,c
  1326                           
  1327                           ;AD7147.c: 95: StageBuffer[5]=4000;
  1328  007C28  0E0F               	movlw	15
  1329  007C2A  6E4A               	movwf	setup_AD7147@StageBuffer+11,c
  1330  007C2C  0EA0               	movlw	160
  1331  007C2E  6E49               	movwf	setup_AD7147@StageBuffer+10,c
  1332                           
  1333                           ;AD7147.c: 96: StageBuffer[6]=4250;
  1334  007C30  0E10               	movlw	16
  1335  007C32  6E4C               	movwf	setup_AD7147@StageBuffer+13,c
  1336  007C34  0E9A               	movlw	154
  1337  007C36  6E4B               	movwf	setup_AD7147@StageBuffer+12,c
  1338                           
  1339                           ;AD7147.c: 97: StageBuffer[7]=4250;
  1340  007C38  0E10               	movlw	16
  1341  007C3A  6E4E               	movwf	setup_AD7147@StageBuffer+15,c
  1342  007C3C  0E9A               	movlw	154
  1343  007C3E  6E4D               	movwf	setup_AD7147@StageBuffer+14,c
  1344                           
  1345                           ;AD7147.c: 98: write_AD7147(0x0A8, 8, StageBuffer,0);
  1346  007C40  0E00               	movlw	0
  1347  007C42  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1348  007C44  0EA8               	movlw	168
  1349  007C46  6E17               	movwf	write_AD7147@RegisterAddress,c
  1350  007C48  0E00               	movlw	0
  1351  007C4A  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1352  007C4C  0E08               	movlw	8
  1353  007C4E  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1354  007C50  0E3F               	movlw	low setup_AD7147@StageBuffer
  1355  007C52  6E1B               	movwf	write_AD7147@DataBuffer,c
  1356  007C54  0E00               	movlw	high setup_AD7147@StageBuffer
  1357  007C56  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1358  007C58  0E00               	movlw	0
  1359  007C5A  6E1E               	movwf	write_AD7147@index+1,c
  1360  007C5C  0E00               	movlw	0
  1361  007C5E  6E1D               	movwf	write_AD7147@index,c
  1362  007C60  ECC2  F03B         	call	_write_AD7147	;wreg free
  1363                           
  1364                           ;AD7147.c: 103: StageBuffer[0]=0xEFFF;
  1365  007C64  0EEF               	movlw	239
  1366  007C66  6E40               	movwf	setup_AD7147@StageBuffer+1,c
  1367  007C68  683F               	setf	setup_AD7147@StageBuffer,c
  1368                           
  1369                           ;AD7147.c: 104: StageBuffer[1]=0x1FFF;
  1370  007C6A  0E1F               	movlw	31
  1371  007C6C  6E42               	movwf	setup_AD7147@StageBuffer+3,c
  1372  007C6E  6841               	setf	setup_AD7147@StageBuffer+2,c
  1373                           
  1374                           ;AD7147.c: 105: StageBuffer[2]=0x0100;
  1375  007C70  0E01               	movlw	1
  1376  007C72  6E44               	movwf	setup_AD7147@StageBuffer+5,c
  1377  007C74  0E00               	movlw	0
  1378  007C76  6E43               	movwf	setup_AD7147@StageBuffer+4,c
  1379                           
  1380                           ;AD7147.c: 106: StageBuffer[3]=0x2121;
  1381  007C78  0E21               	movlw	33
  1382  007C7A  6E46               	movwf	setup_AD7147@StageBuffer+7,c
  1383  007C7C  0E21               	movlw	33
  1384  007C7E  6E45               	movwf	setup_AD7147@StageBuffer+6,c
  1385                           
  1386                           ;AD7147.c: 107: StageBuffer[4]=4000;
  1387  007C80  0E0F               	movlw	15
  1388  007C82  6E48               	movwf	setup_AD7147@StageBuffer+9,c
  1389  007C84  0EA0               	movlw	160
  1390  007C86  6E47               	movwf	setup_AD7147@StageBuffer+8,c
  1391                           
  1392                           ;AD7147.c: 108: StageBuffer[5]=4000;
  1393  007C88  0E0F               	movlw	15
  1394  007C8A  6E4A               	movwf	setup_AD7147@StageBuffer+11,c
  1395  007C8C  0EA0               	movlw	160
  1396  007C8E  6E49               	movwf	setup_AD7147@StageBuffer+10,c
  1397                           
  1398                           ;AD7147.c: 109: StageBuffer[6]=4250;
  1399  007C90  0E10               	movlw	16
  1400  007C92  6E4C               	movwf	setup_AD7147@StageBuffer+13,c
  1401  007C94  0E9A               	movlw	154
  1402  007C96  6E4B               	movwf	setup_AD7147@StageBuffer+12,c
  1403                           
  1404                           ;AD7147.c: 110: StageBuffer[7]=4250;
  1405  007C98  0E10               	movlw	16
  1406  007C9A  6E4E               	movwf	setup_AD7147@StageBuffer+15,c
  1407  007C9C  0E9A               	movlw	154
  1408  007C9E  6E4D               	movwf	setup_AD7147@StageBuffer+14,c
  1409                           
  1410                           ;AD7147.c: 111: write_AD7147(0x0B0, 8, StageBuffer,0);
  1411  007CA0  0E00               	movlw	0
  1412  007CA2  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1413  007CA4  0EB0               	movlw	176
  1414  007CA6  6E17               	movwf	write_AD7147@RegisterAddress,c
  1415  007CA8  0E00               	movlw	0
  1416  007CAA  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1417  007CAC  0E08               	movlw	8
  1418  007CAE  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1419  007CB0  0E3F               	movlw	low setup_AD7147@StageBuffer
  1420  007CB2  6E1B               	movwf	write_AD7147@DataBuffer,c
  1421  007CB4  0E00               	movlw	high setup_AD7147@StageBuffer
  1422  007CB6  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1423  007CB8  0E00               	movlw	0
  1424  007CBA  6E1E               	movwf	write_AD7147@index+1,c
  1425  007CBC  0E00               	movlw	0
  1426  007CBE  6E1D               	movwf	write_AD7147@index,c
  1427  007CC0  ECC2  F03B         	call	_write_AD7147	;wreg free
  1428                           
  1429                           ;AD7147.c: 116: StageBuffer[0]=0xFFFF;
  1430  007CC4  683F               	setf	setup_AD7147@StageBuffer,c
  1431  007CC6  6840               	setf	setup_AD7147@StageBuffer+1,c
  1432                           
  1433                           ;AD7147.c: 117: StageBuffer[1]=0x1FFE;
  1434  007CC8  0E1F               	movlw	31
  1435  007CCA  6E42               	movwf	setup_AD7147@StageBuffer+3,c
  1436  007CCC  0EFE               	movlw	254
  1437  007CCE  6E41               	movwf	setup_AD7147@StageBuffer+2,c
  1438                           
  1439                           ;AD7147.c: 118: StageBuffer[2]=0x0100;
  1440  007CD0  0E01               	movlw	1
  1441  007CD2  6E44               	movwf	setup_AD7147@StageBuffer+5,c
  1442  007CD4  0E00               	movlw	0
  1443  007CD6  6E43               	movwf	setup_AD7147@StageBuffer+4,c
  1444                           
  1445                           ;AD7147.c: 119: StageBuffer[3]=0x2121;
  1446  007CD8  0E21               	movlw	33
  1447  007CDA  6E46               	movwf	setup_AD7147@StageBuffer+7,c
  1448  007CDC  0E21               	movlw	33
  1449  007CDE  6E45               	movwf	setup_AD7147@StageBuffer+6,c
  1450                           
  1451                           ;AD7147.c: 120: StageBuffer[4]=4000;
  1452  007CE0  0E0F               	movlw	15
  1453  007CE2  6E48               	movwf	setup_AD7147@StageBuffer+9,c
  1454  007CE4  0EA0               	movlw	160
  1455  007CE6  6E47               	movwf	setup_AD7147@StageBuffer+8,c
  1456                           
  1457                           ;AD7147.c: 121: StageBuffer[5]=4000;
  1458  007CE8  0E0F               	movlw	15
  1459  007CEA  6E4A               	movwf	setup_AD7147@StageBuffer+11,c
  1460  007CEC  0EA0               	movlw	160
  1461  007CEE  6E49               	movwf	setup_AD7147@StageBuffer+10,c
  1462                           
  1463                           ;AD7147.c: 122: StageBuffer[6]=4250;
  1464  007CF0  0E10               	movlw	16
  1465  007CF2  6E4C               	movwf	setup_AD7147@StageBuffer+13,c
  1466  007CF4  0E9A               	movlw	154
  1467  007CF6  6E4B               	movwf	setup_AD7147@StageBuffer+12,c
  1468                           
  1469                           ;AD7147.c: 123: StageBuffer[7]=4250;
  1470  007CF8  0E10               	movlw	16
  1471  007CFA  6E4E               	movwf	setup_AD7147@StageBuffer+15,c
  1472  007CFC  0E9A               	movlw	154
  1473  007CFE  6E4D               	movwf	setup_AD7147@StageBuffer+14,c
  1474                           
  1475                           ;AD7147.c: 124: write_AD7147(0x0B8, 8, StageBuffer,0);
  1476  007D00  0E00               	movlw	0
  1477  007D02  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1478  007D04  0EB8               	movlw	184
  1479  007D06  6E17               	movwf	write_AD7147@RegisterAddress,c
  1480  007D08  0E00               	movlw	0
  1481  007D0A  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1482  007D0C  0E08               	movlw	8
  1483  007D0E  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1484  007D10  0E3F               	movlw	low setup_AD7147@StageBuffer
  1485  007D12  6E1B               	movwf	write_AD7147@DataBuffer,c
  1486  007D14  0E00               	movlw	high setup_AD7147@StageBuffer
  1487  007D16  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1488  007D18  0E00               	movlw	0
  1489  007D1A  6E1E               	movwf	write_AD7147@index+1,c
  1490  007D1C  0E00               	movlw	0
  1491  007D1E  6E1D               	movwf	write_AD7147@index,c
  1492  007D20  ECC2  F03B         	call	_write_AD7147	;wreg free
  1493                           
  1494                           ;AD7147.c: 129: StageBuffer[0]=0xFFFF;
  1495  007D24  683F               	setf	setup_AD7147@StageBuffer,c
  1496  007D26  6840               	setf	setup_AD7147@StageBuffer+1,c
  1497                           
  1498                           ;AD7147.c: 130: StageBuffer[1]=0x3FFF;
  1499  007D28  0E3F               	movlw	63
  1500  007D2A  6E42               	movwf	setup_AD7147@StageBuffer+3,c
  1501  007D2C  6841               	setf	setup_AD7147@StageBuffer+2,c
  1502                           
  1503                           ;AD7147.c: 131: StageBuffer[2]=0x0000;
  1504  007D2E  0E00               	movlw	0
  1505  007D30  6E44               	movwf	setup_AD7147@StageBuffer+5,c
  1506  007D32  0E00               	movlw	0
  1507  007D34  6E43               	movwf	setup_AD7147@StageBuffer+4,c
  1508                           
  1509                           ;AD7147.c: 132: StageBuffer[3]=0x2626;
  1510  007D36  0E26               	movlw	38
  1511  007D38  6E46               	movwf	setup_AD7147@StageBuffer+7,c
  1512  007D3A  0E26               	movlw	38
  1513  007D3C  6E45               	movwf	setup_AD7147@StageBuffer+6,c
  1514                           
  1515                           ;AD7147.c: 133: StageBuffer[4]=3000;
  1516  007D3E  0E0B               	movlw	11
  1517  007D40  6E48               	movwf	setup_AD7147@StageBuffer+9,c
  1518  007D42  0EB8               	movlw	184
  1519  007D44  6E47               	movwf	setup_AD7147@StageBuffer+8,c
  1520                           
  1521                           ;AD7147.c: 134: StageBuffer[5]=3000;
  1522  007D46  0E0B               	movlw	11
  1523  007D48  6E4A               	movwf	setup_AD7147@StageBuffer+11,c
  1524  007D4A  0EB8               	movlw	184
  1525  007D4C  6E49               	movwf	setup_AD7147@StageBuffer+10,c
  1526                           
  1527                           ;AD7147.c: 135: StageBuffer[6]=4000;
  1528  007D4E  0E0F               	movlw	15
  1529  007D50  6E4C               	movwf	setup_AD7147@StageBuffer+13,c
  1530  007D52  0EA0               	movlw	160
  1531  007D54  6E4B               	movwf	setup_AD7147@StageBuffer+12,c
  1532                           
  1533                           ;AD7147.c: 136: StageBuffer[7]=4000;
  1534  007D56  0E0F               	movlw	15
  1535  007D58  6E4E               	movwf	setup_AD7147@StageBuffer+15,c
  1536  007D5A  0EA0               	movlw	160
  1537  007D5C  6E4D               	movwf	setup_AD7147@StageBuffer+14,c
  1538                           
  1539                           ;AD7147.c: 137: write_AD7147(0x0C0, 8, StageBuffer,0);
  1540  007D5E  0E00               	movlw	0
  1541  007D60  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1542  007D62  0EC0               	movlw	192
  1543  007D64  6E17               	movwf	write_AD7147@RegisterAddress,c
  1544  007D66  0E00               	movlw	0
  1545  007D68  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1546  007D6A  0E08               	movlw	8
  1547  007D6C  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1548  007D6E  0E3F               	movlw	low setup_AD7147@StageBuffer
  1549  007D70  6E1B               	movwf	write_AD7147@DataBuffer,c
  1550  007D72  0E00               	movlw	high setup_AD7147@StageBuffer
  1551  007D74  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1552  007D76  0E00               	movlw	0
  1553  007D78  6E1E               	movwf	write_AD7147@index+1,c
  1554  007D7A  0E00               	movlw	0
  1555  007D7C  6E1D               	movwf	write_AD7147@index,c
  1556  007D7E  ECC2  F03B         	call	_write_AD7147	;wreg free
  1557                           
  1558                           ;AD7147.c: 142: StageBuffer[0]=0xFFFF;
  1559  007D82  683F               	setf	setup_AD7147@StageBuffer,c
  1560  007D84  6840               	setf	setup_AD7147@StageBuffer+1,c
  1561                           
  1562                           ;AD7147.c: 143: StageBuffer[1]=0x3FFF;
  1563  007D86  0E3F               	movlw	63
  1564  007D88  6E42               	movwf	setup_AD7147@StageBuffer+3,c
  1565  007D8A  6841               	setf	setup_AD7147@StageBuffer+2,c
  1566                           
  1567                           ;AD7147.c: 144: StageBuffer[2]=0x0000;
  1568  007D8C  0E00               	movlw	0
  1569  007D8E  6E44               	movwf	setup_AD7147@StageBuffer+5,c
  1570  007D90  0E00               	movlw	0
  1571  007D92  6E43               	movwf	setup_AD7147@StageBuffer+4,c
  1572                           
  1573                           ;AD7147.c: 145: StageBuffer[3]=0x2626;
  1574  007D94  0E26               	movlw	38
  1575  007D96  6E46               	movwf	setup_AD7147@StageBuffer+7,c
  1576  007D98  0E26               	movlw	38
  1577  007D9A  6E45               	movwf	setup_AD7147@StageBuffer+6,c
  1578                           
  1579                           ;AD7147.c: 146: StageBuffer[4]=3000;
  1580  007D9C  0E0B               	movlw	11
  1581  007D9E  6E48               	movwf	setup_AD7147@StageBuffer+9,c
  1582  007DA0  0EB8               	movlw	184
  1583  007DA2  6E47               	movwf	setup_AD7147@StageBuffer+8,c
  1584                           
  1585                           ;AD7147.c: 147: StageBuffer[5]=3000;
  1586  007DA4  0E0B               	movlw	11
  1587  007DA6  6E4A               	movwf	setup_AD7147@StageBuffer+11,c
  1588  007DA8  0EB8               	movlw	184
  1589  007DAA  6E49               	movwf	setup_AD7147@StageBuffer+10,c
  1590                           
  1591                           ;AD7147.c: 148: StageBuffer[6]=4000;
  1592  007DAC  0E0F               	movlw	15
  1593  007DAE  6E4C               	movwf	setup_AD7147@StageBuffer+13,c
  1594  007DB0  0EA0               	movlw	160
  1595  007DB2  6E4B               	movwf	setup_AD7147@StageBuffer+12,c
  1596                           
  1597                           ;AD7147.c: 149: StageBuffer[7]=4000;
  1598  007DB4  0E0F               	movlw	15
  1599  007DB6  6E4E               	movwf	setup_AD7147@StageBuffer+15,c
  1600  007DB8  0EA0               	movlw	160
  1601  007DBA  6E4D               	movwf	setup_AD7147@StageBuffer+14,c
  1602                           
  1603                           ;AD7147.c: 150: write_AD7147(0x0C8, 8, StageBuffer,0);
  1604  007DBC  0E00               	movlw	0
  1605  007DBE  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1606  007DC0  0EC8               	movlw	200
  1607  007DC2  6E17               	movwf	write_AD7147@RegisterAddress,c
  1608  007DC4  0E00               	movlw	0
  1609  007DC6  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1610  007DC8  0E08               	movlw	8
  1611  007DCA  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1612  007DCC  0E3F               	movlw	low setup_AD7147@StageBuffer
  1613  007DCE  6E1B               	movwf	write_AD7147@DataBuffer,c
  1614  007DD0  0E00               	movlw	high setup_AD7147@StageBuffer
  1615  007DD2  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1616  007DD4  0E00               	movlw	0
  1617  007DD6  6E1E               	movwf	write_AD7147@index+1,c
  1618  007DD8  0E00               	movlw	0
  1619  007DDA  6E1D               	movwf	write_AD7147@index,c
  1620  007DDC  ECC2  F03B         	call	_write_AD7147	;wreg free
  1621                           
  1622                           ;AD7147.c: 155: StageBuffer[0]=0xFFFF;
  1623  007DE0  683F               	setf	setup_AD7147@StageBuffer,c
  1624  007DE2  6840               	setf	setup_AD7147@StageBuffer+1,c
  1625                           
  1626                           ;AD7147.c: 156: StageBuffer[1]=0x3FFF;
  1627  007DE4  0E3F               	movlw	63
  1628  007DE6  6E42               	movwf	setup_AD7147@StageBuffer+3,c
  1629  007DE8  6841               	setf	setup_AD7147@StageBuffer+2,c
  1630                           
  1631                           ;AD7147.c: 157: StageBuffer[2]=0x0000;
  1632  007DEA  0E00               	movlw	0
  1633  007DEC  6E44               	movwf	setup_AD7147@StageBuffer+5,c
  1634  007DEE  0E00               	movlw	0
  1635  007DF0  6E43               	movwf	setup_AD7147@StageBuffer+4,c
  1636                           
  1637                           ;AD7147.c: 158: StageBuffer[3]=0x2626;
  1638  007DF2  0E26               	movlw	38
  1639  007DF4  6E46               	movwf	setup_AD7147@StageBuffer+7,c
  1640  007DF6  0E26               	movlw	38
  1641  007DF8  6E45               	movwf	setup_AD7147@StageBuffer+6,c
  1642                           
  1643                           ;AD7147.c: 159: StageBuffer[4]=3000;
  1644  007DFA  0E0B               	movlw	11
  1645  007DFC  6E48               	movwf	setup_AD7147@StageBuffer+9,c
  1646  007DFE  0EB8               	movlw	184
  1647  007E00  6E47               	movwf	setup_AD7147@StageBuffer+8,c
  1648                           
  1649                           ;AD7147.c: 160: StageBuffer[5]=3000;
  1650  007E02  0E0B               	movlw	11
  1651  007E04  6E4A               	movwf	setup_AD7147@StageBuffer+11,c
  1652  007E06  0EB8               	movlw	184
  1653  007E08  6E49               	movwf	setup_AD7147@StageBuffer+10,c
  1654                           
  1655                           ;AD7147.c: 161: StageBuffer[6]=4000;
  1656  007E0A  0E0F               	movlw	15
  1657  007E0C  6E4C               	movwf	setup_AD7147@StageBuffer+13,c
  1658  007E0E  0EA0               	movlw	160
  1659  007E10  6E4B               	movwf	setup_AD7147@StageBuffer+12,c
  1660                           
  1661                           ;AD7147.c: 162: StageBuffer[7]=4000;
  1662  007E12  0E0F               	movlw	15
  1663  007E14  6E4E               	movwf	setup_AD7147@StageBuffer+15,c
  1664  007E16  0EA0               	movlw	160
  1665  007E18  6E4D               	movwf	setup_AD7147@StageBuffer+14,c
  1666                           
  1667                           ;AD7147.c: 163: write_AD7147(0x0D0, 8, StageBuffer,0);
  1668  007E1A  0E00               	movlw	0
  1669  007E1C  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1670  007E1E  0ED0               	movlw	208
  1671  007E20  6E17               	movwf	write_AD7147@RegisterAddress,c
  1672  007E22  0E00               	movlw	0
  1673  007E24  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1674  007E26  0E08               	movlw	8
  1675  007E28  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1676  007E2A  0E3F               	movlw	low setup_AD7147@StageBuffer
  1677  007E2C  6E1B               	movwf	write_AD7147@DataBuffer,c
  1678  007E2E  0E00               	movlw	high setup_AD7147@StageBuffer
  1679  007E30  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1680  007E32  0E00               	movlw	0
  1681  007E34  6E1E               	movwf	write_AD7147@index+1,c
  1682  007E36  0E00               	movlw	0
  1683  007E38  6E1D               	movwf	write_AD7147@index,c
  1684  007E3A  ECC2  F03B         	call	_write_AD7147	;wreg free
  1685                           
  1686                           ;AD7147.c: 168: StageBuffer[0]=0xFFFF;
  1687  007E3E  683F               	setf	setup_AD7147@StageBuffer,c
  1688  007E40  6840               	setf	setup_AD7147@StageBuffer+1,c
  1689                           
  1690                           ;AD7147.c: 169: StageBuffer[1]=0x3FFF;
  1691  007E42  0E3F               	movlw	63
  1692  007E44  6E42               	movwf	setup_AD7147@StageBuffer+3,c
  1693  007E46  6841               	setf	setup_AD7147@StageBuffer+2,c
  1694                           
  1695                           ;AD7147.c: 170: StageBuffer[2]=0x0000;
  1696  007E48  0E00               	movlw	0
  1697  007E4A  6E44               	movwf	setup_AD7147@StageBuffer+5,c
  1698  007E4C  0E00               	movlw	0
  1699  007E4E  6E43               	movwf	setup_AD7147@StageBuffer+4,c
  1700                           
  1701                           ;AD7147.c: 171: StageBuffer[3]=0x2626;
  1702  007E50  0E26               	movlw	38
  1703  007E52  6E46               	movwf	setup_AD7147@StageBuffer+7,c
  1704  007E54  0E26               	movlw	38
  1705  007E56  6E45               	movwf	setup_AD7147@StageBuffer+6,c
  1706                           
  1707                           ;AD7147.c: 172: StageBuffer[4]=3000;
  1708  007E58  0E0B               	movlw	11
  1709  007E5A  6E48               	movwf	setup_AD7147@StageBuffer+9,c
  1710  007E5C  0EB8               	movlw	184
  1711  007E5E  6E47               	movwf	setup_AD7147@StageBuffer+8,c
  1712                           
  1713                           ;AD7147.c: 173: StageBuffer[5]=3000;
  1714  007E60  0E0B               	movlw	11
  1715  007E62  6E4A               	movwf	setup_AD7147@StageBuffer+11,c
  1716  007E64  0EB8               	movlw	184
  1717  007E66  6E49               	movwf	setup_AD7147@StageBuffer+10,c
  1718                           
  1719                           ;AD7147.c: 174: StageBuffer[6]=4000;
  1720  007E68  0E0F               	movlw	15
  1721  007E6A  6E4C               	movwf	setup_AD7147@StageBuffer+13,c
  1722  007E6C  0EA0               	movlw	160
  1723  007E6E  6E4B               	movwf	setup_AD7147@StageBuffer+12,c
  1724                           
  1725                           ;AD7147.c: 175: StageBuffer[7]=4000;
  1726  007E70  0E0F               	movlw	15
  1727  007E72  6E4E               	movwf	setup_AD7147@StageBuffer+15,c
  1728  007E74  0EA0               	movlw	160
  1729  007E76  6E4D               	movwf	setup_AD7147@StageBuffer+14,c
  1730                           
  1731                           ;AD7147.c: 176: write_AD7147(0x0D8, 8, StageBuffer,0);
  1732  007E78  0E00               	movlw	0
  1733  007E7A  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1734  007E7C  0ED8               	movlw	216
  1735  007E7E  6E17               	movwf	write_AD7147@RegisterAddress,c
  1736  007E80  0E00               	movlw	0
  1737  007E82  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1738  007E84  0E08               	movlw	8
  1739  007E86  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1740  007E88  0E3F               	movlw	low setup_AD7147@StageBuffer
  1741  007E8A  6E1B               	movwf	write_AD7147@DataBuffer,c
  1742  007E8C  0E00               	movlw	high setup_AD7147@StageBuffer
  1743  007E8E  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1744  007E90  0E00               	movlw	0
  1745  007E92  6E1E               	movwf	write_AD7147@index+1,c
  1746  007E94  0E00               	movlw	0
  1747  007E96  6E1D               	movwf	write_AD7147@index,c
  1748  007E98  ECC2  F03B         	call	_write_AD7147	;wreg free
  1749                           
  1750                           ;AD7147.c: 182: AD7147Registers[0] = 0x02B2;
  1751  007E9C  0E02               	movlw	2
  1752  007E9E  6E30               	movwf	setup_AD7147@AD7147Registers+1,c
  1753  007EA0  0EB2               	movlw	178
  1754  007EA2  6E2F               	movwf	setup_AD7147@AD7147Registers,c
  1755                           
  1756                           ;AD7147.c: 183: write_AD7147(0x000, 1, AD7147Registers,0);
  1757  007EA4  0E00               	movlw	0
  1758  007EA6  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1759  007EA8  0E00               	movlw	0
  1760  007EAA  6E17               	movwf	write_AD7147@RegisterAddress,c
  1761  007EAC  0E00               	movlw	0
  1762  007EAE  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1763  007EB0  0E01               	movlw	1
  1764  007EB2  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1765  007EB4  0E2F               	movlw	low setup_AD7147@AD7147Registers
  1766  007EB6  6E1B               	movwf	write_AD7147@DataBuffer,c
  1767  007EB8  0E00               	movlw	high setup_AD7147@AD7147Registers
  1768  007EBA  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1769  007EBC  0E00               	movlw	0
  1770  007EBE  6E1E               	movwf	write_AD7147@index+1,c
  1771  007EC0  0E00               	movlw	0
  1772  007EC2  6E1D               	movwf	write_AD7147@index,c
  1773  007EC4  ECC2  F03B         	call	_write_AD7147	;wreg free
  1774                           
  1775                           ;AD7147.c: 185: unsigned int int_low = read_AD7147_interrupt(0x008);
  1776  007EC8  0E00               	movlw	0
  1777  007ECA  6E18               	movwf	read_AD7147_interrupt@RegisterAddress+1,c
  1778  007ECC  0E08               	movlw	8
  1779  007ECE  6E17               	movwf	read_AD7147_interrupt@RegisterAddress,c
  1780  007ED0  EC91  F03A         	call	_read_AD7147_interrupt	;wreg free
  1781  007ED4  C017  F029         	movff	?_read_AD7147_interrupt,setup_AD7147@int_low
  1782  007ED8  C018  F02A         	movff	?_read_AD7147_interrupt+1,setup_AD7147@int_low+1
  1783                           
  1784                           ;AD7147.c: 186: unsigned int int_high = read_AD7147_interrupt(0x009);
  1785  007EDC  0E00               	movlw	0
  1786  007EDE  6E18               	movwf	read_AD7147_interrupt@RegisterAddress+1,c
  1787  007EE0  0E09               	movlw	9
  1788  007EE2  6E17               	movwf	read_AD7147_interrupt@RegisterAddress,c
  1789  007EE4  EC91  F03A         	call	_read_AD7147_interrupt	;wreg free
  1790  007EE8  C017  F02B         	movff	?_read_AD7147_interrupt,setup_AD7147@int_high
  1791  007EEC  C018  F02C         	movff	?_read_AD7147_interrupt+1,setup_AD7147@int_high+1
  1792                           
  1793                           ;AD7147.c: 187: unsigned int int_complete = read_AD7147_interrupt(0x00A);
  1794  007EF0  0E00               	movlw	0
  1795  007EF2  6E18               	movwf	read_AD7147_interrupt@RegisterAddress+1,c
  1796  007EF4  0E0A               	movlw	10
  1797  007EF6  6E17               	movwf	read_AD7147_interrupt@RegisterAddress,c
  1798  007EF8  EC91  F03A         	call	_read_AD7147_interrupt	;wreg free
  1799  007EFC  C017  F02D         	movff	?_read_AD7147_interrupt,setup_AD7147@int_complete
  1800  007F00  C018  F02E         	movff	?_read_AD7147_interrupt+1,setup_AD7147@int_complete+1
  1801                           
  1802                           ;AD7147.c: 189: AD7147Registers[2] = 0x3230;
  1803  007F04  0E32               	movlw	50
  1804  007F06  6E34               	movwf	setup_AD7147@AD7147Registers+5,c
  1805  007F08  0E30               	movlw	48
  1806  007F0A  6E33               	movwf	setup_AD7147@AD7147Registers+4,c
  1807                           
  1808                           ;AD7147.c: 190: AD7147Registers[3] = 0x0419;
  1809  007F0C  0E04               	movlw	4
  1810  007F0E  6E36               	movwf	setup_AD7147@AD7147Registers+7,c
  1811  007F10  0E19               	movlw	25
  1812  007F12  6E35               	movwf	setup_AD7147@AD7147Registers+6,c
  1813                           
  1814                           ;AD7147.c: 191: AD7147Registers[4] = 0x0832;
  1815  007F14  0E08               	movlw	8
  1816  007F16  6E38               	movwf	setup_AD7147@AD7147Registers+9,c
  1817  007F18  0E32               	movlw	50
  1818  007F1A  6E37               	movwf	setup_AD7147@AD7147Registers+8,c
  1819                           
  1820                           ;AD7147.c: 192: AD7147Registers[5] = 0x0000;
  1821  007F1C  0E00               	movlw	0
  1822  007F1E  6E3A               	movwf	setup_AD7147@AD7147Registers+11,c
  1823  007F20  0E00               	movlw	0
  1824  007F22  6E39               	movwf	setup_AD7147@AD7147Registers+10,c
  1825                           
  1826                           ;AD7147.c: 193: AD7147Registers[6] = 0x0000;
  1827  007F24  0E00               	movlw	0
  1828  007F26  6E3C               	movwf	setup_AD7147@AD7147Registers+13,c
  1829  007F28  0E00               	movlw	0
  1830  007F2A  6E3B               	movwf	setup_AD7147@AD7147Registers+12,c
  1831                           
  1832                           ;AD7147.c: 194: AD7147Registers[7] = 0x0001;
  1833  007F2C  0E00               	movlw	0
  1834  007F2E  6E3E               	movwf	setup_AD7147@AD7147Registers+15,c
  1835  007F30  0E01               	movlw	1
  1836  007F32  6E3D               	movwf	setup_AD7147@AD7147Registers+14,c
  1837                           
  1838                           ;AD7147.c: 195: write_AD7147(0x002, 6, AD7147Registers,2);
  1839  007F34  0E00               	movlw	0
  1840  007F36  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1841  007F38  0E02               	movlw	2
  1842  007F3A  6E17               	movwf	write_AD7147@RegisterAddress,c
  1843  007F3C  0E00               	movlw	0
  1844  007F3E  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1845  007F40  0E06               	movlw	6
  1846  007F42  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1847  007F44  0E2F               	movlw	low setup_AD7147@AD7147Registers
  1848  007F46  6E1B               	movwf	write_AD7147@DataBuffer,c
  1849  007F48  0E00               	movlw	high setup_AD7147@AD7147Registers
  1850  007F4A  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1851  007F4C  0E00               	movlw	0
  1852  007F4E  6E1E               	movwf	write_AD7147@index+1,c
  1853  007F50  0E02               	movlw	2
  1854  007F52  6E1D               	movwf	write_AD7147@index,c
  1855  007F54  ECC2  F03B         	call	_write_AD7147	;wreg free
  1856                           
  1857                           ;AD7147.c: 198: AD7147Registers[1] = 0x00FF;
  1858  007F58  0E00               	movlw	0
  1859  007F5A  6E32               	movwf	setup_AD7147@AD7147Registers+3,c
  1860  007F5C  6831               	setf	setup_AD7147@AD7147Registers+2,c
  1861                           
  1862                           ;AD7147.c: 199: write_AD7147(0x001, 1, AD7147Registers,1);
  1863  007F5E  0E00               	movlw	0
  1864  007F60  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1865  007F62  0E01               	movlw	1
  1866  007F64  6E17               	movwf	write_AD7147@RegisterAddress,c
  1867  007F66  0E00               	movlw	0
  1868  007F68  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1869  007F6A  0E01               	movlw	1
  1870  007F6C  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1871  007F6E  0E2F               	movlw	low setup_AD7147@AD7147Registers
  1872  007F70  6E1B               	movwf	write_AD7147@DataBuffer,c
  1873  007F72  0E00               	movlw	high setup_AD7147@AD7147Registers
  1874  007F74  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1875  007F76  0E00               	movlw	0
  1876  007F78  6E1E               	movwf	write_AD7147@index+1,c
  1877  007F7A  0E01               	movlw	1
  1878  007F7C  6E1D               	movwf	write_AD7147@index,c
  1879  007F7E  ECC2  F03B         	call	_write_AD7147	;wreg free
  1880                           
  1881                           ;AD7147.c: 201: AD7147Registers[0] = 0x0200;
  1882  007F82  0E02               	movlw	2
  1883  007F84  6E30               	movwf	setup_AD7147@AD7147Registers+1,c
  1884  007F86  0E00               	movlw	0
  1885  007F88  6E2F               	movwf	setup_AD7147@AD7147Registers,c
  1886                           
  1887                           ;AD7147.c: 202: write_AD7147(0x000, 1, AD7147Registers,0);
  1888  007F8A  0E00               	movlw	0
  1889  007F8C  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1890  007F8E  0E00               	movlw	0
  1891  007F90  6E17               	movwf	write_AD7147@RegisterAddress,c
  1892  007F92  0E00               	movlw	0
  1893  007F94  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1894  007F96  0E01               	movlw	1
  1895  007F98  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1896  007F9A  0E2F               	movlw	low setup_AD7147@AD7147Registers
  1897  007F9C  6E1B               	movwf	write_AD7147@DataBuffer,c
  1898  007F9E  0E00               	movlw	high setup_AD7147@AD7147Registers
  1899  007FA0  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1900  007FA2  0E00               	movlw	0
  1901  007FA4  6E1E               	movwf	write_AD7147@index+1,c
  1902  007FA6  0E00               	movlw	0
  1903  007FA8  6E1D               	movwf	write_AD7147@index,c
  1904  007FAA  ECC2  F03B         	call	_write_AD7147	;wreg free
  1905                           
  1906                           ;AD7147.c: 206: int_low = read_AD7147_interrupt(0x008);
  1907  007FAE  0E00               	movlw	0
  1908  007FB0  6E18               	movwf	read_AD7147_interrupt@RegisterAddress+1,c
  1909  007FB2  0E08               	movlw	8
  1910  007FB4  6E17               	movwf	read_AD7147_interrupt@RegisterAddress,c
  1911  007FB6  EC91  F03A         	call	_read_AD7147_interrupt	;wreg free
  1912  007FBA  C017  F029         	movff	?_read_AD7147_interrupt,setup_AD7147@int_low
  1913  007FBE  C018  F02A         	movff	?_read_AD7147_interrupt+1,setup_AD7147@int_low+1
  1914                           
  1915                           ;AD7147.c: 207: int_high = read_AD7147_interrupt(0x009);
  1916  007FC2  0E00               	movlw	0
  1917  007FC4  6E18               	movwf	read_AD7147_interrupt@RegisterAddress+1,c
  1918  007FC6  0E09               	movlw	9
  1919  007FC8  6E17               	movwf	read_AD7147_interrupt@RegisterAddress,c
  1920  007FCA  EC91  F03A         	call	_read_AD7147_interrupt	;wreg free
  1921  007FCE  C017  F02B         	movff	?_read_AD7147_interrupt,setup_AD7147@int_high
  1922  007FD2  C018  F02C         	movff	?_read_AD7147_interrupt+1,setup_AD7147@int_high+1
  1923                           
  1924                           ;AD7147.c: 208: int_complete = read_AD7147_interrupt(0x00A);
  1925  007FD6  0E00               	movlw	0
  1926  007FD8  6E18               	movwf	read_AD7147_interrupt@RegisterAddress+1,c
  1927  007FDA  0E0A               	movlw	10
  1928  007FDC  6E17               	movwf	read_AD7147_interrupt@RegisterAddress,c
  1929  007FDE  EC91  F03A         	call	_read_AD7147_interrupt	;wreg free
  1930  007FE2  C017  F02D         	movff	?_read_AD7147_interrupt,setup_AD7147@int_complete
  1931  007FE6  C018  F02E         	movff	?_read_AD7147_interrupt+1,setup_AD7147@int_complete+1
  1932                           
  1933                           ;AD7147.c: 209: get_CDC(cdc,1);
  1934  007FEA  C027  F001         	movff	setup_AD7147@cdc,get_CDC@cdc
  1935  007FEE  C028  F002         	movff	setup_AD7147@cdc+1,get_CDC@cdc+1
  1936  007FF2  0E00               	movlw	0
  1937  007FF4  6E04               	movwf	get_CDC@state+1,c
  1938  007FF6  0E01               	movlw	1
  1939  007FF8  6E03               	movwf	get_CDC@state,c
  1940  007FFA  EC80  F03A         	call	_get_CDC	;wreg free
  1941  007FFE  0012               	return		;funcret
  1942  008000                     __end_of_setup_AD7147:
  1943                           	opt stack 0
  1944                           postinc0	equ	0xFEE
  1945                           wreg	equ	0xFE8
  1946                           status	equ	0xFD8
  1947                           
  1948 ;; *************** function _write_AD7147 *****************
  1949 ;; Defined at:
  1950 ;;		line 212 in file "AD7147.c"
  1951 ;; Parameters:    Size  Location     Type
  1952 ;;  RegisterAddr    2   22[COMRAM] unsigned int 
  1953 ;;  NumberOfRegi    2   24[COMRAM] unsigned int 
  1954 ;;  DataBuffer      2   26[COMRAM] PTR unsigned int 
  1955 ;;		 -> setup_AD7147@AD7147Registers(16), setup_AD7147@StageBuffer(16), 
  1956 ;;  index           2   28[COMRAM] unsigned int 
  1957 ;; Auto vars:     Size  Location     Type
  1958 ;;  i               2   36[COMRAM] unsigned int 
  1959 ;;  Data_Value      2   34[COMRAM] unsigned int 
  1960 ;;  Register_Val    2   32[COMRAM] unsigned int 
  1961 ;; Return value:  Size  Location     Type
  1962 ;;                  1    wreg      void 
  1963 ;; Registers used:
  1964 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1965 ;; Tracked objects:
  1966 ;;		On entry : 0/0
  1967 ;;		On exit  : 0/0
  1968 ;;		Unchanged: 0/0
  1969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1970 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1971 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1972 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1973 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1974 ;;Total ram usage:       16 bytes
  1975 ;; Hardware stack levels used:    1
  1976 ;; Hardware stack levels required when called:    1
  1977 ;; This function calls:
  1978 ;;		_w32_spi
  1979 ;; This function is called by:
  1980 ;;		_setup_AD7147
  1981 ;; This function uses a non-reentrant model
  1982 ;;
  1983                           
  1984                           	psect	text8
  1985  007784                     __ptext8:
  1986                           	opt stack 0
  1987  007784                     _write_AD7147:
  1988                           	opt stack 28
  1989                           
  1990                           ;AD7147.c: 214: unsigned int Register_Value = 0;
  1991                           
  1992                           ;incstack = 0
  1993  007784  0E00               	movlw	0
  1994  007786  6E22               	movwf	write_AD7147@Register_Value+1,c
  1995  007788  0E00               	movlw	0
  1996  00778A  6E21               	movwf	write_AD7147@Register_Value,c
  1997                           
  1998                           ;AD7147.c: 215: unsigned int Data_Value = 0;
  1999  00778C  0E00               	movlw	0
  2000  00778E  6E24               	movwf	write_AD7147@Data_Value+1,c
  2001  007790  0E00               	movlw	0
  2002  007792  6E23               	movwf	write_AD7147@Data_Value,c
  2003                           
  2004                           ;AD7147.c: 217: for (unsigned int i=0; i<NumberOfRegisters; i++)
  2005  007794  0E00               	movlw	0
  2006  007796  6E26               	movwf	write_AD7147@i+1,c
  2007  007798  0E00               	movlw	0
  2008  00779A  6E25               	movwf	write_AD7147@i,c
  2009  00779C  D02B               	goto	l1571
  2010  00779E                     l1563:
  2011                           
  2012                           ;AD7147.c: 218: {
  2013                           ;AD7147.c: 219: Register_Value = 0xE000 + RegisterAddress + i;
  2014  00779E  5025               	movf	write_AD7147@i,w,c
  2015  0077A0  2417               	addwf	write_AD7147@RegisterAddress,w,c
  2016  0077A2  6E1F               	movwf	??_write_AD7147& (0+255),c
  2017  0077A4  5026               	movf	write_AD7147@i+1,w,c
  2018  0077A6  2018               	addwfc	write_AD7147@RegisterAddress+1,w,c
  2019  0077A8  6E20               	movwf	(??_write_AD7147+1)& (0+255),c
  2020  0077AA  0E00               	movlw	0
  2021  0077AC  241F               	addwf	??_write_AD7147,w,c
  2022  0077AE  6E21               	movwf	write_AD7147@Register_Value,c
  2023  0077B0  0EE0               	movlw	224
  2024  0077B2  2020               	addwfc	??_write_AD7147+1,w,c
  2025  0077B4  6E22               	movwf	write_AD7147@Register_Value+1,c
  2026                           
  2027                           ;AD7147.c: 220: Data_Value = DataBuffer[index+i];
  2028  0077B6  5025               	movf	write_AD7147@i,w,c
  2029  0077B8  241D               	addwf	write_AD7147@index,w,c
  2030  0077BA  6E1F               	movwf	??_write_AD7147& (0+255),c
  2031  0077BC  5026               	movf	write_AD7147@i+1,w,c
  2032  0077BE  201E               	addwfc	write_AD7147@index+1,w,c
  2033  0077C0  6E20               	movwf	(??_write_AD7147+1)& (0+255),c
  2034  0077C2  90D8               	bcf	status,0,c
  2035  0077C4  361F               	rlcf	??_write_AD7147,f,c
  2036  0077C6  3620               	rlcf	??_write_AD7147+1,f,c
  2037  0077C8  501F               	movf	??_write_AD7147,w,c
  2038  0077CA  241B               	addwf	write_AD7147@DataBuffer,w,c
  2039  0077CC  6ED9               	movwf	fsr2l,c
  2040  0077CE  5020               	movf	??_write_AD7147+1,w,c
  2041  0077D0  201C               	addwfc	write_AD7147@DataBuffer+1,w,c
  2042  0077D2  6EDA               	movwf	fsr2h,c
  2043  0077D4  CFDE F023          	movff	postinc2,write_AD7147@Data_Value
  2044  0077D8  CFDD F024          	movff	postdec2,write_AD7147@Data_Value+1
  2045                           
  2046                           ;AD7147.c: 222: w32_spi(Register_Value,Data_Value);
  2047  0077DC  C021  F001         	movff	write_AD7147@Register_Value,w32_spi@address
  2048  0077E0  C022  F002         	movff	write_AD7147@Register_Value+1,w32_spi@address+1
  2049  0077E4  C023  F003         	movff	write_AD7147@Data_Value,w32_spi@data
  2050  0077E8  C024  F004         	movff	write_AD7147@Data_Value+1,w32_spi@data+1
  2051  0077EC  EC0E  F03B         	call	_w32_spi	;wreg free
  2052  0077F0  4A25               	infsnz	write_AD7147@i,f,c
  2053  0077F2  2A26               	incf	write_AD7147@i+1,f,c
  2054  0077F4                     l1571:
  2055  0077F4  5019               	movf	write_AD7147@NumberOfRegisters,w,c
  2056  0077F6  5C25               	subwf	write_AD7147@i,w,c
  2057  0077F8  501A               	movf	write_AD7147@NumberOfRegisters+1,w,c
  2058  0077FA  5826               	subwfb	write_AD7147@i+1,w,c
  2059  0077FC  B0D8               	btfsc	status,0,c
  2060  0077FE  0012               	return	
  2061  007800  D7CE               	goto	l1563
  2062  007802                     __end_of_write_AD7147:
  2063                           	opt stack 0
  2064                           postinc0	equ	0xFEE
  2065                           wreg	equ	0xFE8
  2066                           postinc2	equ	0xFDE
  2067                           postdec2	equ	0xFDD
  2068                           fsr2h	equ	0xFDA
  2069                           fsr2l	equ	0xFD9
  2070                           status	equ	0xFD8
  2071                           
  2072 ;; *************** function _read_AD7147_interrupt *****************
  2073 ;; Defined at:
  2074 ;;		line 240 in file "AD7147.c"
  2075 ;; Parameters:    Size  Location     Type
  2076 ;;  RegisterAddr    2   22[COMRAM] unsigned int 
  2077 ;; Auto vars:     Size  Location     Type
  2078 ;;  interrupt_cl    2   26[COMRAM] unsigned int 
  2079 ;;  Register_Val    2   24[COMRAM] unsigned int 
  2080 ;; Return value:  Size  Location     Type
  2081 ;;                  2   22[COMRAM] unsigned int 
  2082 ;; Registers used:
  2083 ;;		wreg, status,2, status,0, cstack
  2084 ;; Tracked objects:
  2085 ;;		On entry : 0/0
  2086 ;;		On exit  : 0/0
  2087 ;;		Unchanged: 0/0
  2088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2089 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2090 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2092 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2093 ;;Total ram usage:        6 bytes
  2094 ;; Hardware stack levels used:    1
  2095 ;; Hardware stack levels required when called:    1
  2096 ;; This function calls:
  2097 ;;		_w16_r16_spi
  2098 ;; This function is called by:
  2099 ;;		_setup_AD7147
  2100 ;; This function uses a non-reentrant model
  2101 ;;
  2102                           
  2103                           	psect	text9
  2104  007522                     __ptext9:
  2105                           	opt stack 0
  2106  007522                     _read_AD7147_interrupt:
  2107                           	opt stack 28
  2108                           
  2109                           ;AD7147.c: 242: unsigned int Register_Values = 0xE400 + RegisterAddress;
  2110                           
  2111                           ;incstack = 0
  2112  007522  0E00               	movlw	0
  2113  007524  2417               	addwf	read_AD7147_interrupt@RegisterAddress,w,c
  2114  007526  6E19               	movwf	read_AD7147_interrupt@Register_Values,c
  2115  007528  0EE4               	movlw	228
  2116  00752A  2018               	addwfc	read_AD7147_interrupt@RegisterAddress+1,w,c
  2117  00752C  6E1A               	movwf	read_AD7147_interrupt@Register_Values+1,c
  2118                           
  2119                           ;AD7147.c: 243: unsigned int interrupt_clear = w16_r16_spi(Register_Values);
  2120  00752E  C019  F001         	movff	read_AD7147_interrupt@Register_Values,w16_r16_spi@address
  2121  007532  C01A  F002         	movff	read_AD7147_interrupt@Register_Values+1,w16_r16_spi@address+1
  2122  007536  EC83  F03B         	call	_w16_r16_spi	;wreg free
  2123  00753A  C001  F01B         	movff	?_w16_r16_spi,read_AD7147_interrupt@interrupt_clear
  2124  00753E  C002  F01C         	movff	?_w16_r16_spi+1,read_AD7147_interrupt@interrupt_clear+1
  2125                           
  2126                           ;AD7147.c: 246: return interrupt_clear;
  2127  007542  C01B  F017         	movff	read_AD7147_interrupt@interrupt_clear,?_read_AD7147_interrupt
  2128  007546  C01C  F018         	movff	read_AD7147_interrupt@interrupt_clear+1,?_read_AD7147_interrupt+1
  2129  00754A  0012               	return	
  2130  00754C                     __end_of_read_AD7147_interrupt:
  2131                           	opt stack 0
  2132                           postinc0	equ	0xFEE
  2133                           wreg	equ	0xFE8
  2134                           postinc2	equ	0xFDE
  2135                           postdec2	equ	0xFDD
  2136                           fsr2h	equ	0xFDA
  2137                           fsr2l	equ	0xFD9
  2138                           status	equ	0xFD8
  2139                           
  2140 ;; *************** function _read_sensor *****************
  2141 ;; Defined at:
  2142 ;;		line 249 in file "AD7147.c"
  2143 ;; Parameters:    Size  Location     Type
  2144 ;;  sensor          2   22[COMRAM] unsigned int 
  2145 ;; Auto vars:     Size  Location     Type
  2146 ;;  cdc_sensor      2   28[COMRAM] unsigned int 
  2147 ;;  sensor_value    2   26[COMRAM] unsigned int 
  2148 ;;  register1       2   24[COMRAM] unsigned int 
  2149 ;; Return value:  Size  Location     Type
  2150 ;;                  2   22[COMRAM] unsigned int 
  2151 ;; Registers used:
  2152 ;;		wreg, status,2, status,0, cstack
  2153 ;; Tracked objects:
  2154 ;;		On entry : 0/0
  2155 ;;		On exit  : 0/0
  2156 ;;		Unchanged: 0/0
  2157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2158 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2159 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2161 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2162 ;;Total ram usage:        8 bytes
  2163 ;; Hardware stack levels used:    1
  2164 ;; Hardware stack levels required when called:    2
  2165 ;; This function calls:
  2166 ;;		_sensor_CDC
  2167 ;;		_w16_r16_spi
  2168 ;; This function is called by:
  2169 ;;		_main
  2170 ;; This function uses a non-reentrant model
  2171 ;;
  2172                           
  2173                           	psect	text10
  2174  00768A                     __ptext10:
  2175                           	opt stack 0
  2176  00768A                     _read_sensor:
  2177                           	opt stack 28
  2178                           
  2179                           ;AD7147.c: 251: unsigned int cdc_sensor = 0;
  2180                           
  2181                           ;incstack = 0
  2182  00768A  0E00               	movlw	0
  2183  00768C  6E1E               	movwf	read_sensor@cdc_sensor+1,c
  2184  00768E  0E00               	movlw	0
  2185  007690  6E1D               	movwf	read_sensor@cdc_sensor,c
  2186                           
  2187                           ;AD7147.c: 252: if (sensor > 12)
  2188  007692  5018               	movf	read_sensor@sensor+1,w,c
  2189  007694  E104               	bnz	u700
  2190  007696  0E0D               	movlw	13
  2191  007698  5C17               	subwf	read_sensor@sensor,w,c
  2192  00769A  A0D8               	btfss	status,0,c
  2193  00769C  D007               	goto	l41
  2194  00769E                     u700:
  2195                           
  2196                           ;AD7147.c: 253: {
  2197                           ;AD7147.c: 254: cdc_sensor = sensor - 12;
  2198  00769E  0EF4               	movlw	244
  2199  0076A0  2417               	addwf	read_sensor@sensor,w,c
  2200  0076A2  6E1D               	movwf	read_sensor@cdc_sensor,c
  2201  0076A4  0EFF               	movlw	255
  2202  0076A6  2018               	addwfc	read_sensor@sensor+1,w,c
  2203  0076A8  6E1E               	movwf	read_sensor@cdc_sensor+1,c
  2204                           
  2205                           ;AD7147.c: 255: }
  2206  0076AA  D004               	goto	l1853
  2207  0076AC                     l41:
  2208                           
  2209                           ;AD7147.c: 256: else
  2210                           ;AD7147.c: 257: {
  2211                           ;AD7147.c: 258: cdc_sensor = sensor;
  2212  0076AC  C017  F01D         	movff	read_sensor@sensor,read_sensor@cdc_sensor
  2213  0076B0  C018  F01E         	movff	read_sensor@sensor+1,read_sensor@cdc_sensor+1
  2214  0076B4                     l1853:
  2215                           
  2216                           ;AD7147.c: 259: }
  2217                           ;AD7147.c: 260: unsigned int register1 = 0xE400 + 0x00A + cdc_sensor;
  2218  0076B4  0E0A               	movlw	10
  2219  0076B6  241D               	addwf	read_sensor@cdc_sensor,w,c
  2220  0076B8  6E19               	movwf	read_sensor@register1,c
  2221  0076BA  0EE4               	movlw	228
  2222  0076BC  201E               	addwfc	read_sensor@cdc_sensor+1,w,c
  2223  0076BE  6E1A               	movwf	read_sensor@register1+1,c
  2224                           
  2225                           ;AD7147.c: 262: sensor_CDC(sensor, 0);
  2226  0076C0  C017  F005         	movff	read_sensor@sensor,sensor_CDC@sensor
  2227  0076C4  C018  F006         	movff	read_sensor@sensor+1,sensor_CDC@sensor+1
  2228  0076C8  0E00               	movlw	0
  2229  0076CA  6E08               	movwf	sensor_CDC@state+1,c
  2230  0076CC  0E00               	movlw	0
  2231  0076CE  6E07               	movwf	sensor_CDC@state,c
  2232  0076D0  ECA6  F03A         	call	_sensor_CDC	;wreg free
  2233                           
  2234                           ;AD7147.c: 263: unsigned int sensor_value = w16_r16_spi(register1);
  2235  0076D4  C019  F001         	movff	read_sensor@register1,w16_r16_spi@address
  2236  0076D8  C01A  F002         	movff	read_sensor@register1+1,w16_r16_spi@address+1
  2237  0076DC  EC83  F03B         	call	_w16_r16_spi	;wreg free
  2238  0076E0  C001  F01B         	movff	?_w16_r16_spi,read_sensor@sensor_value
  2239  0076E4  C002  F01C         	movff	?_w16_r16_spi+1,read_sensor@sensor_value+1
  2240                           
  2241                           ;AD7147.c: 264: sensor_CDC(sensor, 1);
  2242  0076E8  C017  F005         	movff	read_sensor@sensor,sensor_CDC@sensor
  2243  0076EC  C018  F006         	movff	read_sensor@sensor+1,sensor_CDC@sensor+1
  2244  0076F0  0E00               	movlw	0
  2245  0076F2  6E08               	movwf	sensor_CDC@state+1,c
  2246  0076F4  0E01               	movlw	1
  2247  0076F6  6E07               	movwf	sensor_CDC@state,c
  2248  0076F8  ECA6  F03A         	call	_sensor_CDC	;wreg free
  2249                           
  2250                           ;AD7147.c: 271: return sensor_value;
  2251  0076FC  C01B  F017         	movff	read_sensor@sensor_value,?_read_sensor
  2252  007700  C01C  F018         	movff	read_sensor@sensor_value+1,?_read_sensor+1
  2253  007704  0012               	return	
  2254  007706                     __end_of_read_sensor:
  2255                           	opt stack 0
  2256                           postinc0	equ	0xFEE
  2257                           wreg	equ	0xFE8
  2258                           postinc2	equ	0xFDE
  2259                           postdec2	equ	0xFDD
  2260                           fsr2h	equ	0xFDA
  2261                           fsr2l	equ	0xFD9
  2262                           status	equ	0xFD8
  2263                           
  2264 ;; *************** function _sensor_CDC *****************
  2265 ;; Defined at:
  2266 ;;		line 279 in file "AD7147.c"
  2267 ;; Parameters:    Size  Location     Type
  2268 ;;  sensor          2    4[COMRAM] unsigned int 
  2269 ;;  state           2    6[COMRAM] unsigned int 
  2270 ;; Auto vars:     Size  Location     Type
  2271 ;;		None
  2272 ;; Return value:  Size  Location     Type
  2273 ;;                  1    wreg      void 
  2274 ;; Registers used:
  2275 ;;		wreg, status,2, status,0, cstack
  2276 ;; Tracked objects:
  2277 ;;		On entry : 0/0
  2278 ;;		On exit  : 0/0
  2279 ;;		Unchanged: 0/0
  2280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2281 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2284 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2285 ;;Total ram usage:        4 bytes
  2286 ;; Hardware stack levels used:    1
  2287 ;; Hardware stack levels required when called:    1
  2288 ;; This function calls:
  2289 ;;		_get_CDC
  2290 ;; This function is called by:
  2291 ;;		_read_sensor
  2292 ;; This function uses a non-reentrant model
  2293 ;;
  2294                           
  2295                           	psect	text11
  2296  00754C                     __ptext11:
  2297                           	opt stack 0
  2298  00754C                     _sensor_CDC:
  2299                           	opt stack 28
  2300                           
  2301                           ;AD7147.c: 283: if (sensor > 12)
  2302                           
  2303                           ;incstack = 0
  2304  00754C  5006               	movf	sensor_CDC@sensor+1,w,c
  2305  00754E  E104               	bnz	u680
  2306  007550  0E0D               	movlw	13
  2307  007552  5C05               	subwf	sensor_CDC@sensor,w,c
  2308  007554  A0D8               	btfss	status,0,c
  2309  007556  D00B               	goto	l1585
  2310  007558                     u680:
  2311                           
  2312                           ;AD7147.c: 284: {
  2313                           ;AD7147.c: 285: get_CDC(2,state);
  2314  007558  0E00               	movlw	0
  2315  00755A  6E02               	movwf	get_CDC@cdc+1,c
  2316  00755C  0E02               	movlw	2
  2317  00755E  6E01               	movwf	get_CDC@cdc,c
  2318  007560  C007  F003         	movff	sensor_CDC@state,get_CDC@state
  2319  007564  C008  F004         	movff	sensor_CDC@state+1,get_CDC@state+1
  2320  007568  EC80  F03A         	call	_get_CDC	;wreg free
  2321                           
  2322                           ;AD7147.c: 286: }
  2323  00756C  0012               	return	
  2324  00756E                     l1585:
  2325                           
  2326                           ;AD7147.c: 287: else
  2327                           ;AD7147.c: 288: {
  2328                           ;AD7147.c: 289: get_CDC(1,state);
  2329  00756E  0E00               	movlw	0
  2330  007570  6E02               	movwf	get_CDC@cdc+1,c
  2331  007572  0E01               	movlw	1
  2332  007574  6E01               	movwf	get_CDC@cdc,c
  2333  007576  C007  F003         	movff	sensor_CDC@state,get_CDC@state
  2334  00757A  C008  F004         	movff	sensor_CDC@state+1,get_CDC@state+1
  2335  00757E  EC80  F03A         	call	_get_CDC	;wreg free
  2336  007582  0012               	return	
  2337  007584                     __end_of_sensor_CDC:
  2338                           	opt stack 0
  2339                           postinc0	equ	0xFEE
  2340                           wreg	equ	0xFE8
  2341                           postinc2	equ	0xFDE
  2342                           postdec2	equ	0xFDD
  2343                           fsr2h	equ	0xFDA
  2344                           fsr2l	equ	0xFD9
  2345                           status	equ	0xFD8
  2346                           
  2347 ;; *************** function _get_ID *****************
  2348 ;; Defined at:
  2349 ;;		line 339 in file "AD7147.c"
  2350 ;; Parameters:    Size  Location     Type
  2351 ;;  cdc             2   22[COMRAM] unsigned int 
  2352 ;; Auto vars:     Size  Location     Type
  2353 ;;  result          2   25[COMRAM] unsigned int 
  2354 ;; Return value:  Size  Location     Type
  2355 ;;                  2   22[COMRAM] unsigned int 
  2356 ;; Registers used:
  2357 ;;		wreg, status,2, status,0, cstack
  2358 ;; Tracked objects:
  2359 ;;		On entry : 0/0
  2360 ;;		On exit  : 0/0
  2361 ;;		Unchanged: 0/0
  2362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2363 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2364 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2365 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2366 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2367 ;;Total ram usage:        5 bytes
  2368 ;; Hardware stack levels used:    1
  2369 ;; Hardware stack levels required when called:    1
  2370 ;; This function calls:
  2371 ;;		_get_CDC
  2372 ;;		_w16_r16_spi
  2373 ;; This function is called by:
  2374 ;;		_main
  2375 ;; This function uses a non-reentrant model
  2376 ;;
  2377                           
  2378                           	psect	text12
  2379  0075C4                     __ptext12:
  2380                           	opt stack 0
  2381  0075C4                     _get_ID:
  2382                           	opt stack 29
  2383                           
  2384                           ;AD7147.c: 341: get_CDC(cdc,0);
  2385                           
  2386                           ;incstack = 0
  2387  0075C4  C017  F001         	movff	get_ID@cdc,get_CDC@cdc
  2388  0075C8  C018  F002         	movff	get_ID@cdc+1,get_CDC@cdc+1
  2389  0075CC  0E00               	movlw	0
  2390  0075CE  6E04               	movwf	get_CDC@state+1,c
  2391  0075D0  0E00               	movlw	0
  2392  0075D2  6E03               	movwf	get_CDC@state,c
  2393  0075D4  EC80  F03A         	call	_get_CDC	;wreg free
  2394                           
  2395                           ;AD7147.c: 342: unsigned int result = (w16_r16_spi(0xE400 + 0x017) & 0b1111111111110000)
      +                           >> 4;
  2396  0075D8  0EE4               	movlw	228
  2397  0075DA  6E02               	movwf	w16_r16_spi@address+1,c
  2398  0075DC  0E17               	movlw	23
  2399  0075DE  6E01               	movwf	w16_r16_spi@address,c
  2400  0075E0  EC83  F03B         	call	_w16_r16_spi	;wreg free
  2401  0075E4  0E04               	movlw	4
  2402  0075E6  6E19               	movwf	??_get_ID& (0+255),c
  2403  0075E8                     u715:
  2404  0075E8  90D8               	bcf	status,0,c
  2405  0075EA  3202               	rrcf	?_w16_r16_spi+1,f,c
  2406  0075EC  3201               	rrcf	?_w16_r16_spi,f,c
  2407  0075EE  2E19               	decfsz	??_get_ID& (0+255),f,c
  2408  0075F0  D7FB               	goto	u715
  2409  0075F2  0EFF               	movlw	255
  2410  0075F4  1401               	andwf	?_w16_r16_spi,w,c
  2411  0075F6  6E1A               	movwf	get_ID@result,c
  2412  0075F8  0E0F               	movlw	15
  2413  0075FA  1402               	andwf	?_w16_r16_spi+1,w,c
  2414  0075FC  6E1B               	movwf	get_ID@result+1,c
  2415                           
  2416                           ;AD7147.c: 343: get_CDC(cdc,1);
  2417  0075FE  C017  F001         	movff	get_ID@cdc,get_CDC@cdc
  2418  007602  C018  F002         	movff	get_ID@cdc+1,get_CDC@cdc+1
  2419  007606  0E00               	movlw	0
  2420  007608  6E04               	movwf	get_CDC@state+1,c
  2421  00760A  0E01               	movlw	1
  2422  00760C  6E03               	movwf	get_CDC@state,c
  2423  00760E  EC80  F03A         	call	_get_CDC	;wreg free
  2424                           
  2425                           ;AD7147.c: 344: return result;
  2426  007612  C01A  F017         	movff	get_ID@result,?_get_ID
  2427  007616  C01B  F018         	movff	get_ID@result+1,?_get_ID+1
  2428  00761A  0012               	return	
  2429  00761C                     __end_of_get_ID:
  2430                           	opt stack 0
  2431                           postinc0	equ	0xFEE
  2432                           wreg	equ	0xFE8
  2433                           postinc2	equ	0xFDE
  2434                           postdec2	equ	0xFDD
  2435                           fsr2h	equ	0xFDA
  2436                           fsr2l	equ	0xFD9
  2437                           status	equ	0xFD8
  2438                           
  2439 ;; *************** function _w16_r16_spi *****************
  2440 ;; Defined at:
  2441 ;;		line 92 in file "spi.c"
  2442 ;; Parameters:    Size  Location     Type
  2443 ;;  address         2    0[COMRAM] unsigned int 
  2444 ;; Auto vars:     Size  Location     Type
  2445 ;;  p4              2   20[COMRAM] unsigned int 
  2446 ;;  p3              2   18[COMRAM] unsigned int 
  2447 ;;  blank_high      2   16[COMRAM] unsigned int 
  2448 ;;  blank_low       2   14[COMRAM] unsigned int 
  2449 ;;  result          2   12[COMRAM] unsigned int 
  2450 ;;  address_high    2   10[COMRAM] unsigned int 
  2451 ;;  address_low     2    8[COMRAM] unsigned int 
  2452 ;;  p2              2    6[COMRAM] unsigned int 
  2453 ;;  p1              2    4[COMRAM] unsigned int 
  2454 ;; Return value:  Size  Location     Type
  2455 ;;                  2    0[COMRAM] unsigned int 
  2456 ;; Registers used:
  2457 ;;		wreg, status,2, status,0
  2458 ;; Tracked objects:
  2459 ;;		On entry : 0/0
  2460 ;;		On exit  : 0/0
  2461 ;;		Unchanged: 0/0
  2462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2463 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2464 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2465 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2466 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2467 ;;Total ram usage:       22 bytes
  2468 ;; Hardware stack levels used:    1
  2469 ;; This function calls:
  2470 ;;		Nothing
  2471 ;; This function is called by:
  2472 ;;		_read_AD7147_interrupt
  2473 ;;		_read_sensor
  2474 ;;		_get_ID
  2475 ;;		_read_AD7147
  2476 ;; This function uses a non-reentrant model
  2477 ;;
  2478                           
  2479                           	psect	text13
  2480  007706                     __ptext13:
  2481                           	opt stack 0
  2482  007706                     _w16_r16_spi:
  2483                           	opt stack 28
  2484                           
  2485                           ;spi.c: 94: unsigned int address_low, address_high, result;
  2486                           ;spi.c: 95: unsigned int blank_low = 0x000;
  2487                           
  2488                           ;incstack = 0
  2489  007706  0E00               	movlw	0
  2490  007708  6E10               	movwf	w16_r16_spi@blank_low+1,c
  2491  00770A  0E00               	movlw	0
  2492  00770C  6E0F               	movwf	w16_r16_spi@blank_low,c
  2493                           
  2494                           ;spi.c: 96: unsigned int blank_high = 0x000;
  2495  00770E  0E00               	movlw	0
  2496  007710  6E12               	movwf	w16_r16_spi@blank_high+1,c
  2497  007712  0E00               	movlw	0
  2498  007714  6E11               	movwf	w16_r16_spi@blank_high,c
  2499                           
  2500                           ;spi.c: 97: unsigned int p1, p2, p3, p4;
  2501                           ;spi.c: 99: address_low = address & 0xFF;
  2502  007716  5001               	movf	w16_r16_spi@address,w,c
  2503  007718  6E09               	movwf	w16_r16_spi@address_low,c
  2504  00771A  6A0A               	clrf	w16_r16_spi@address_low+1,c
  2505                           
  2506                           ;spi.c: 100: address_high = (address >> 8) & 0xFF;
  2507  00771C  C001  F003         	movff	w16_r16_spi@address,??_w16_r16_spi
  2508  007720  C002  F004         	movff	w16_r16_spi@address+1,??_w16_r16_spi+1
  2509  007724  C004  F003         	movff	??_w16_r16_spi+1,??_w16_r16_spi
  2510  007728  6A04               	clrf	??_w16_r16_spi+1,c
  2511  00772A  5003               	movf	??_w16_r16_spi,w,c
  2512  00772C  6E0B               	movwf	w16_r16_spi@address_high,c
  2513  00772E  6A0C               	clrf	w16_r16_spi@address_high+1,c
  2514                           
  2515                           ;spi.c: 102: SSPBUF = address_high;
  2516  007730  C00B  FFC9         	movff	w16_r16_spi@address_high,4041	;volatile
  2517  007734                     l200:
  2518  007734  A0C7               	btfss	4039,0,c	;volatile
  2519  007736  D7FE               	goto	l200
  2520                           
  2521                           ;spi.c: 104: p1 = SSPBUF;
  2522  007738  CFC9 F005          	movff	4041,w16_r16_spi@p1	;volatile
  2523  00773C  6A06               	clrf	w16_r16_spi@p1+1,c
  2524                           
  2525                           ;spi.c: 106: SSPBUF = address_low;
  2526  00773E  C009  FFC9         	movff	w16_r16_spi@address_low,4041	;volatile
  2527  007742                     l203:
  2528  007742  A0C7               	btfss	4039,0,c	;volatile
  2529  007744  D7FE               	goto	l203
  2530                           
  2531                           ;spi.c: 108: p2 = SSPBUF;
  2532  007746  CFC9 F007          	movff	4041,w16_r16_spi@p2	;volatile
  2533  00774A  6A08               	clrf	w16_r16_spi@p2+1,c
  2534                           
  2535                           ;spi.c: 110: SSPBUF = blank_high;
  2536  00774C  C011  FFC9         	movff	w16_r16_spi@blank_high,4041	;volatile
  2537  007750                     l206:
  2538  007750  A0C7               	btfss	4039,0,c	;volatile
  2539  007752  D7FE               	goto	l206
  2540                           
  2541                           ;spi.c: 112: p3 = SSPBUF;
  2542  007754  CFC9 F013          	movff	4041,w16_r16_spi@p3	;volatile
  2543  007758  6A14               	clrf	w16_r16_spi@p3+1,c
  2544                           
  2545                           ;spi.c: 114: SSPBUF = blank_low;
  2546  00775A  C00F  FFC9         	movff	w16_r16_spi@blank_low,4041	;volatile
  2547  00775E                     l209:
  2548  00775E  A0C7               	btfss	4039,0,c	;volatile
  2549  007760  D7FE               	goto	l209
  2550                           
  2551                           ;spi.c: 116: p4 = SSPBUF;
  2552  007762  CFC9 F015          	movff	4041,w16_r16_spi@p4	;volatile
  2553  007766  6A16               	clrf	w16_r16_spi@p4+1,c
  2554                           
  2555                           ;spi.c: 118: result = (p3 << 8) + p4;
  2556  007768  5013               	movf	w16_r16_spi@p3,w,c
  2557  00776A  6E04               	movwf	(??_w16_r16_spi+1)& (0+255),c
  2558  00776C  6A03               	clrf	??_w16_r16_spi& (0+255),c
  2559  00776E  5015               	movf	w16_r16_spi@p4,w,c
  2560  007770  2403               	addwf	??_w16_r16_spi,w,c
  2561  007772  6E0D               	movwf	w16_r16_spi@result,c
  2562  007774  5016               	movf	w16_r16_spi@p4+1,w,c
  2563  007776  2004               	addwfc	??_w16_r16_spi+1,w,c
  2564  007778  6E0E               	movwf	w16_r16_spi@result+1,c
  2565                           
  2566                           ;spi.c: 119: return result;
  2567  00777A  C00D  F001         	movff	w16_r16_spi@result,?_w16_r16_spi
  2568  00777E  C00E  F002         	movff	w16_r16_spi@result+1,?_w16_r16_spi+1
  2569  007782  0012               	return	
  2570  007784                     __end_of_w16_r16_spi:
  2571                           	opt stack 0
  2572                           postinc0	equ	0xFEE
  2573                           wreg	equ	0xFE8
  2574                           postinc2	equ	0xFDE
  2575                           postdec2	equ	0xFDD
  2576                           fsr2h	equ	0xFDA
  2577                           fsr2l	equ	0xFD9
  2578                           status	equ	0xFD8
  2579                           
  2580 ;; *************** function _blink_LED *****************
  2581 ;; Defined at:
  2582 ;;		line 363 in file "AD7147.c"
  2583 ;; Parameters:    Size  Location     Type
  2584 ;;  cdc             2   22[COMRAM] unsigned int 
  2585 ;; Auto vars:     Size  Location     Type
  2586 ;;  message         2   24[COMRAM] unsigned int 
  2587 ;; Return value:  Size  Location     Type
  2588 ;;                  1    wreg      void 
  2589 ;; Registers used:
  2590 ;;		wreg, status,2, status,0, cstack
  2591 ;; Tracked objects:
  2592 ;;		On entry : 0/0
  2593 ;;		On exit  : 0/0
  2594 ;;		Unchanged: 0/0
  2595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2596 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2597 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2599 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2600 ;;Total ram usage:        4 bytes
  2601 ;; Hardware stack levels used:    1
  2602 ;; Hardware stack levels required when called:    2
  2603 ;; This function calls:
  2604 ;;		_delay_ms
  2605 ;;		_get_CDC
  2606 ;;		_w32_spi
  2607 ;; This function is called by:
  2608 ;;		_main
  2609 ;; This function uses a non-reentrant model
  2610 ;;
  2611                           
  2612                           	psect	text14
  2613  007886                     __ptext14:
  2614                           	opt stack 0
  2615  007886                     _blink_LED:
  2616                           	opt stack 28
  2617                           
  2618                           ;AD7147.c: 365: get_CDC(cdc,0);
  2619                           
  2620                           ;incstack = 0
  2621  007886  C017  F001         	movff	blink_LED@cdc,get_CDC@cdc
  2622  00788A  C018  F002         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  2623  00788E  0E00               	movlw	0
  2624  007890  6E04               	movwf	get_CDC@state+1,c
  2625  007892  0E00               	movlw	0
  2626  007894  6E03               	movwf	get_CDC@state,c
  2627  007896  EC80  F03A         	call	_get_CDC	;wreg free
  2628                           
  2629                           ;AD7147.c: 366: unsigned int message = 0b0010000000000000;
  2630  00789A  0E20               	movlw	32
  2631  00789C  6E1A               	movwf	blink_LED@message+1,c
  2632  00789E  0E00               	movlw	0
  2633  0078A0  6E19               	movwf	blink_LED@message,c
  2634                           
  2635                           ;AD7147.c: 367: w32_spi((0xE000 + 0x005),message);
  2636  0078A2  0EE0               	movlw	224
  2637  0078A4  6E02               	movwf	w32_spi@address+1,c
  2638  0078A6  0E05               	movlw	5
  2639  0078A8  6E01               	movwf	w32_spi@address,c
  2640  0078AA  C019  F003         	movff	blink_LED@message,w32_spi@data
  2641  0078AE  C01A  F004         	movff	blink_LED@message+1,w32_spi@data+1
  2642  0078B2  EC0E  F03B         	call	_w32_spi	;wreg free
  2643                           
  2644                           ;AD7147.c: 368: delay_ms(10);
  2645  0078B6  0E00               	movlw	0
  2646  0078B8  6E0A               	movwf	delay_ms@n+1,c
  2647  0078BA  0E0A               	movlw	10
  2648  0078BC  6E09               	movwf	delay_ms@n,c
  2649  0078BE  ECC2  F03A         	call	_delay_ms	;wreg free
  2650                           
  2651                           ;AD7147.c: 369: get_CDC(cdc,1);
  2652  0078C2  C017  F001         	movff	blink_LED@cdc,get_CDC@cdc
  2653  0078C6  C018  F002         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  2654  0078CA  0E00               	movlw	0
  2655  0078CC  6E04               	movwf	get_CDC@state+1,c
  2656  0078CE  0E01               	movlw	1
  2657  0078D0  6E03               	movwf	get_CDC@state,c
  2658  0078D2  EC80  F03A         	call	_get_CDC	;wreg free
  2659                           
  2660                           ;AD7147.c: 370: delay_ms(1000);
  2661  0078D6  0E03               	movlw	3
  2662  0078D8  6E0A               	movwf	delay_ms@n+1,c
  2663  0078DA  0EE8               	movlw	232
  2664  0078DC  6E09               	movwf	delay_ms@n,c
  2665  0078DE  ECC2  F03A         	call	_delay_ms	;wreg free
  2666                           
  2667                           ;AD7147.c: 371: get_CDC(cdc,0);
  2668  0078E2  C017  F001         	movff	blink_LED@cdc,get_CDC@cdc
  2669  0078E6  C018  F002         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  2670  0078EA  0E00               	movlw	0
  2671  0078EC  6E04               	movwf	get_CDC@state+1,c
  2672  0078EE  0E00               	movlw	0
  2673  0078F0  6E03               	movwf	get_CDC@state,c
  2674  0078F2  EC80  F03A         	call	_get_CDC	;wreg free
  2675                           
  2676                           ;AD7147.c: 372: unsigned int message = 0b0011000000000000;
  2677  0078F6  0E30               	movlw	48
  2678  0078F8  6E1A               	movwf	blink_LED@message+1,c
  2679  0078FA  0E00               	movlw	0
  2680  0078FC  6E19               	movwf	blink_LED@message,c
  2681                           
  2682                           ;AD7147.c: 373: w32_spi((0xE000 + 0x005),message);
  2683  0078FE  0EE0               	movlw	224
  2684  007900  6E02               	movwf	w32_spi@address+1,c
  2685  007902  0E05               	movlw	5
  2686  007904  6E01               	movwf	w32_spi@address,c
  2687  007906  C019  F003         	movff	blink_LED@message,w32_spi@data
  2688  00790A  C01A  F004         	movff	blink_LED@message+1,w32_spi@data+1
  2689  00790E  EC0E  F03B         	call	_w32_spi	;wreg free
  2690                           
  2691                           ;AD7147.c: 374: delay_ms(10);
  2692  007912  0E00               	movlw	0
  2693  007914  6E0A               	movwf	delay_ms@n+1,c
  2694  007916  0E0A               	movlw	10
  2695  007918  6E09               	movwf	delay_ms@n,c
  2696  00791A  ECC2  F03A         	call	_delay_ms	;wreg free
  2697                           
  2698                           ;AD7147.c: 375: get_CDC(cdc,1);
  2699  00791E  C017  F001         	movff	blink_LED@cdc,get_CDC@cdc
  2700  007922  C018  F002         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  2701  007926  0E00               	movlw	0
  2702  007928  6E04               	movwf	get_CDC@state+1,c
  2703  00792A  0E01               	movlw	1
  2704  00792C  6E03               	movwf	get_CDC@state,c
  2705  00792E  EC80  F03A         	call	_get_CDC	;wreg free
  2706  007932  0012               	return		;funcret
  2707  007934                     __end_of_blink_LED:
  2708                           	opt stack 0
  2709                           postinc0	equ	0xFEE
  2710                           wreg	equ	0xFE8
  2711                           postinc2	equ	0xFDE
  2712                           postdec2	equ	0xFDD
  2713                           fsr2h	equ	0xFDA
  2714                           fsr2l	equ	0xFD9
  2715                           status	equ	0xFD8
  2716                           
  2717 ;; *************** function _w32_spi *****************
  2718 ;; Defined at:
  2719 ;;		line 26 in file "spi.c"
  2720 ;; Parameters:    Size  Location     Type
  2721 ;;  address         2    0[COMRAM] unsigned int 
  2722 ;;  data            2    2[COMRAM] unsigned int 
  2723 ;; Auto vars:     Size  Location     Type
  2724 ;;  data_high       2   20[COMRAM] unsigned int 
  2725 ;;  data_low        2   18[COMRAM] unsigned int 
  2726 ;;  address_high    2   16[COMRAM] unsigned int 
  2727 ;;  address_low     2   14[COMRAM] unsigned int 
  2728 ;;  p4              2   12[COMRAM] unsigned int 
  2729 ;;  p3              2   10[COMRAM] unsigned int 
  2730 ;;  p2              2    8[COMRAM] unsigned int 
  2731 ;;  p1              2    6[COMRAM] unsigned int 
  2732 ;; Return value:  Size  Location     Type
  2733 ;;                  1    wreg      void 
  2734 ;; Registers used:
  2735 ;;		wreg, status,2
  2736 ;; Tracked objects:
  2737 ;;		On entry : 0/0
  2738 ;;		On exit  : 0/0
  2739 ;;		Unchanged: 0/0
  2740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2741 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2742 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2743 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2744 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2745 ;;Total ram usage:       22 bytes
  2746 ;; Hardware stack levels used:    1
  2747 ;; This function calls:
  2748 ;;		Nothing
  2749 ;; This function is called by:
  2750 ;;		_write_AD7147
  2751 ;;		_blink_LED
  2752 ;;		_switch_LED
  2753 ;; This function uses a non-reentrant model
  2754 ;;
  2755                           
  2756                           	psect	text15
  2757  00761C                     __ptext15:
  2758                           	opt stack 0
  2759  00761C                     _w32_spi:
  2760                           	opt stack 28
  2761                           
  2762                           ;spi.c: 28: unsigned int address_low, address_high, data_low, data_high;
  2763                           ;spi.c: 30: address_low = address & 0xFF;
  2764                           
  2765                           ;incstack = 0
  2766  00761C  5001               	movf	w32_spi@address,w,c
  2767  00761E  6E0F               	movwf	w32_spi@address_low,c
  2768  007620  6A10               	clrf	w32_spi@address_low+1,c
  2769                           
  2770                           ;spi.c: 31: address_high = (address >> 8) & 0xFF;
  2771  007622  C001  F005         	movff	w32_spi@address,??_w32_spi
  2772  007626  C002  F006         	movff	w32_spi@address+1,??_w32_spi+1
  2773  00762A  C006  F005         	movff	??_w32_spi+1,??_w32_spi
  2774  00762E  6A06               	clrf	??_w32_spi+1,c
  2775  007630  5005               	movf	??_w32_spi,w,c
  2776  007632  6E11               	movwf	w32_spi@address_high,c
  2777  007634  6A12               	clrf	w32_spi@address_high+1,c
  2778                           
  2779                           ;spi.c: 33: data_low = data & 0xFF;
  2780  007636  5003               	movf	w32_spi@data,w,c
  2781  007638  6E13               	movwf	w32_spi@data_low,c
  2782  00763A  6A14               	clrf	w32_spi@data_low+1,c
  2783                           
  2784                           ;spi.c: 34: data_high = (data >> 8) & 0xFF;
  2785  00763C  C003  F005         	movff	w32_spi@data,??_w32_spi
  2786  007640  C004  F006         	movff	w32_spi@data+1,??_w32_spi+1
  2787  007644  C006  F005         	movff	??_w32_spi+1,??_w32_spi
  2788  007648  6A06               	clrf	??_w32_spi+1,c
  2789  00764A  5005               	movf	??_w32_spi,w,c
  2790  00764C  6E15               	movwf	w32_spi@data_high,c
  2791  00764E  6A16               	clrf	w32_spi@data_high+1,c
  2792                           
  2793                           ;spi.c: 36: SSPBUF = address_high;
  2794  007650  C011  FFC9         	movff	w32_spi@address_high,4041	;volatile
  2795  007654                     l167:
  2796  007654  A0C7               	btfss	4039,0,c	;volatile
  2797  007656  D7FE               	goto	l167
  2798                           
  2799                           ;spi.c: 38: unsigned int p1 = SSPBUF;
  2800  007658  CFC9 F007          	movff	4041,w32_spi@p1	;volatile
  2801  00765C  6A08               	clrf	w32_spi@p1+1,c
  2802                           
  2803                           ;spi.c: 40: SSPBUF = address_low;
  2804  00765E  C00F  FFC9         	movff	w32_spi@address_low,4041	;volatile
  2805  007662                     l170:
  2806  007662  A0C7               	btfss	4039,0,c	;volatile
  2807  007664  D7FE               	goto	l170
  2808                           
  2809                           ;spi.c: 42: unsigned int p2 = SSPBUF;
  2810  007666  CFC9 F009          	movff	4041,w32_spi@p2	;volatile
  2811  00766A  6A0A               	clrf	w32_spi@p2+1,c
  2812                           
  2813                           ;spi.c: 44: SSPBUF = data_high;
  2814  00766C  C015  FFC9         	movff	w32_spi@data_high,4041	;volatile
  2815  007670                     l173:
  2816  007670  A0C7               	btfss	4039,0,c	;volatile
  2817  007672  D7FE               	goto	l173
  2818                           
  2819                           ;spi.c: 46: unsigned int p3 = SSPBUF;
  2820  007674  CFC9 F00B          	movff	4041,w32_spi@p3	;volatile
  2821  007678  6A0C               	clrf	w32_spi@p3+1,c
  2822                           
  2823                           ;spi.c: 48: SSPBUF = data_low;
  2824  00767A  C013  FFC9         	movff	w32_spi@data_low,4041	;volatile
  2825  00767E                     l176:
  2826  00767E  A0C7               	btfss	4039,0,c	;volatile
  2827  007680  D7FE               	goto	l176
  2828                           
  2829                           ;spi.c: 50: unsigned int p4 = SSPBUF;
  2830  007682  CFC9 F00D          	movff	4041,w32_spi@p4	;volatile
  2831  007686  6A0E               	clrf	w32_spi@p4+1,c
  2832  007688  0012               	return		;funcret
  2833  00768A                     __end_of_w32_spi:
  2834                           	opt stack 0
  2835                           postinc0	equ	0xFEE
  2836                           wreg	equ	0xFE8
  2837                           postinc2	equ	0xFDE
  2838                           postdec2	equ	0xFDD
  2839                           fsr2h	equ	0xFDA
  2840                           fsr2l	equ	0xFD9
  2841                           status	equ	0xFD8
  2842                           
  2843 ;; *************** function _get_CDC *****************
  2844 ;; Defined at:
  2845 ;;		line 377 in file "AD7147.c"
  2846 ;; Parameters:    Size  Location     Type
  2847 ;;  cdc             2    0[COMRAM] unsigned int 
  2848 ;;  state           2    2[COMRAM] unsigned int 
  2849 ;; Auto vars:     Size  Location     Type
  2850 ;;		None
  2851 ;; Return value:  Size  Location     Type
  2852 ;;                  1    wreg      void 
  2853 ;; Registers used:
  2854 ;;		wreg, status,2, status,0
  2855 ;; Tracked objects:
  2856 ;;		On entry : 0/0
  2857 ;;		On exit  : 0/0
  2858 ;;		Unchanged: 0/0
  2859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2860 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2863 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2864 ;;Total ram usage:        4 bytes
  2865 ;; Hardware stack levels used:    1
  2866 ;; This function calls:
  2867 ;;		Nothing
  2868 ;; This function is called by:
  2869 ;;		_setup_AD7147
  2870 ;;		_sensor_CDC
  2871 ;;		_get_ID
  2872 ;;		_blink_LED
  2873 ;;		_switch_LED
  2874 ;; This function uses a non-reentrant model
  2875 ;;
  2876                           
  2877                           	psect	text16
  2878  007500                     __ptext16:
  2879                           	opt stack 0
  2880  007500                     _get_CDC:
  2881                           	opt stack 29
  2882                           
  2883                           ;AD7147.c: 379: if (state == 1)
  2884                           
  2885                           ;incstack = 0
  2886  007500  0403               	decf	get_CDC@state,w,c
  2887  007502  1004               	iorwf	get_CDC@state+1,w,c
  2888  007504  A4D8               	btfss	status,2,c
  2889  007506  D003               	goto	l1499
  2890                           
  2891                           ;AD7147.c: 380: {
  2892                           ;AD7147.c: 381: LATCbits.LATC1 = 1;
  2893  007508  828B               	bsf	3979,1,c	;volatile
  2894                           
  2895                           ;AD7147.c: 382: LATCbits.LATC0 = 1;
  2896  00750A  808B               	bsf	3979,0,c	;volatile
  2897                           
  2898                           ;AD7147.c: 383: }
  2899  00750C  0012               	return	
  2900  00750E                     l1499:
  2901                           
  2902                           ;AD7147.c: 384: else
  2903                           ;AD7147.c: 385: {
  2904                           ;AD7147.c: 386: if (cdc == 1)
  2905  00750E  0401               	decf	get_CDC@cdc,w,c
  2906  007510  1002               	iorwf	get_CDC@cdc+1,w,c
  2907  007512  A4D8               	btfss	status,2,c
  2908  007514  D003               	goto	l83
  2909                           
  2910                           ;AD7147.c: 387: {
  2911                           ;AD7147.c: 388: LATCbits.LATC1 = 0;
  2912  007516  928B               	bcf	3979,1,c	;volatile
  2913                           
  2914                           ;AD7147.c: 389: LATCbits.LATC0 = 1;
  2915  007518  808B               	bsf	3979,0,c	;volatile
  2916                           
  2917                           ;AD7147.c: 390: }
  2918  00751A  0012               	return	
  2919  00751C                     l83:
  2920                           
  2921                           ;AD7147.c: 391: else
  2922                           ;AD7147.c: 392: {
  2923                           ;AD7147.c: 393: LATCbits.LATC0 = 0;
  2924  00751C  908B               	bcf	3979,0,c	;volatile
  2925                           
  2926                           ;AD7147.c: 394: LATCbits.LATC1 = 1;
  2927  00751E  828B               	bsf	3979,1,c	;volatile
  2928  007520  0012               	return	
  2929  007522                     __end_of_get_CDC:
  2930                           	opt stack 0
  2931                           postinc0	equ	0xFEE
  2932                           wreg	equ	0xFE8
  2933                           postinc2	equ	0xFDE
  2934                           postdec2	equ	0xFDD
  2935                           fsr2h	equ	0xFDA
  2936                           fsr2l	equ	0xFD9
  2937                           status	equ	0xFD8
  2938                           
  2939 ;; *************** function _delay_ms *****************
  2940 ;; Defined at:
  2941 ;;		line 67 in file "micro_setup.c"
  2942 ;; Parameters:    Size  Location     Type
  2943 ;;  n               2    8[COMRAM] int 
  2944 ;; Auto vars:     Size  Location     Type
  2945 ;;  j               2   11[COMRAM] int 
  2946 ;; Return value:  Size  Location     Type
  2947 ;;                  1    wreg      void 
  2948 ;; Registers used:
  2949 ;;		wreg, status,2, status,0, cstack
  2950 ;; Tracked objects:
  2951 ;;		On entry : 0/0
  2952 ;;		On exit  : 0/0
  2953 ;;		Unchanged: 0/0
  2954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2955 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2956 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2957 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2958 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2959 ;;Total ram usage:        5 bytes
  2960 ;; Hardware stack levels used:    1
  2961 ;; Hardware stack levels required when called:    1
  2962 ;; This function calls:
  2963 ;;		___awdiv
  2964 ;; This function is called by:
  2965 ;;		_blink_LED
  2966 ;;		_main
  2967 ;;		_switch_LED
  2968 ;; This function uses a non-reentrant model
  2969 ;;
  2970                           
  2971                           	psect	text17
  2972  007584                     __ptext17:
  2973                           	opt stack 0
  2974  007584                     _delay_ms:
  2975                           	opt stack 29
  2976                           
  2977                           ;micro_setup.c: 69: int j = n/10;
  2978                           
  2979                           ;incstack = 0
  2980  007584  C009  F001         	movff	delay_ms@n,___awdiv@dividend
  2981  007588  C00A  F002         	movff	delay_ms@n+1,___awdiv@dividend+1
  2982  00758C  0E00               	movlw	0
  2983  00758E  6E04               	movwf	___awdiv@divisor+1,c
  2984  007590  0E0A               	movlw	10
  2985  007592  6E03               	movwf	___awdiv@divisor,c
  2986  007594  EC01  F03C         	call	___awdiv	;wreg free
  2987  007598  C001  F00C         	movff	?___awdiv,delay_ms@j
  2988  00759C  C002  F00D         	movff	?___awdiv+1,delay_ms@j+1
  2989                           
  2990                           ;micro_setup.c: 70: while(j--)
  2991  0075A0  D008               	goto	l1591
  2992  0075A2                     l1589:
  2993                           
  2994                           ;micro_setup.c: 71: {
  2995                           ;micro_setup.c: 72: _delay((unsigned long)((10)*(8000000/4000.0)));
  2996  0075A2  0E1A               	movlw	26
  2997  0075A4  6E0B               	movwf	??_delay_ms& (0+255),c
  2998  0075A6  0EF8               	movlw	248
  2999  0075A8                     u797:
  3000  0075A8  2EE8               	decfsz	wreg,f,c
  3001  0075AA  D7FE               	bra	u797
  3002  0075AC  2E0B               	decfsz	??_delay_ms& (0+255),f,c
  3003  0075AE  D7FC               	bra	u797
  3004  0075B0  D000               	nop2	
  3005  0075B2                     l1591:
  3006  0075B2  060C               	decf	delay_ms@j,f,c
  3007  0075B4  A0D8               	btfss	status,0,c
  3008  0075B6  060D               	decf	delay_ms@j+1,f,c
  3009  0075B8  280C               	incf	delay_ms@j,w,c
  3010  0075BA  E1F3               	bnz	l1589
  3011  0075BC  280D               	incf	delay_ms@j+1,w,c
  3012  0075BE  B4D8               	btfsc	status,2,c
  3013  0075C0  0012               	return	
  3014  0075C2  D7EF               	goto	l1589
  3015  0075C4                     __end_of_delay_ms:
  3016                           	opt stack 0
  3017                           postinc0	equ	0xFEE
  3018                           wreg	equ	0xFE8
  3019                           postinc2	equ	0xFDE
  3020                           postdec2	equ	0xFDD
  3021                           fsr2h	equ	0xFDA
  3022                           fsr2l	equ	0xFD9
  3023                           status	equ	0xFD8
  3024                           
  3025 ;; *************** function ___awdiv *****************
  3026 ;; Defined at:
  3027 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  3028 ;; Parameters:    Size  Location     Type
  3029 ;;  dividend        2    0[COMRAM] int 
  3030 ;;  divisor         2    2[COMRAM] int 
  3031 ;; Auto vars:     Size  Location     Type
  3032 ;;  quotient        2    6[COMRAM] int 
  3033 ;;  sign            1    5[COMRAM] unsigned char 
  3034 ;;  counter         1    4[COMRAM] unsigned char 
  3035 ;; Return value:  Size  Location     Type
  3036 ;;                  2    0[COMRAM] int 
  3037 ;; Registers used:
  3038 ;;		wreg, status,2, status,0
  3039 ;; Tracked objects:
  3040 ;;		On entry : 0/0
  3041 ;;		On exit  : 0/0
  3042 ;;		Unchanged: 0/0
  3043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3044 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3045 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3047 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3048 ;;Total ram usage:        8 bytes
  3049 ;; Hardware stack levels used:    1
  3050 ;; This function calls:
  3051 ;;		Nothing
  3052 ;; This function is called by:
  3053 ;;		_delay_ms
  3054 ;; This function uses a non-reentrant model
  3055 ;;
  3056                           
  3057                           	psect	text18
  3058  007802                     __ptext18:
  3059                           	opt stack 0
  3060  007802                     ___awdiv:
  3061                           	opt stack 29
  3062                           
  3063                           ;incstack = 0
  3064  007802  0E00               	movlw	0
  3065  007804  6E06               	movwf	___awdiv@sign,c
  3066  007806  AE04               	btfss	___awdiv@divisor+1,7,c
  3067  007808  D006               	goto	l1525
  3068  00780A  6C03               	negf	___awdiv@divisor,c
  3069  00780C  1E04               	comf	___awdiv@divisor+1,f,c
  3070  00780E  B0D8               	btfsc	status,0,c
  3071  007810  2A04               	incf	___awdiv@divisor+1,f,c
  3072  007812  0E01               	movlw	1
  3073  007814  6E06               	movwf	___awdiv@sign,c
  3074  007816                     l1525:
  3075  007816  AE02               	btfss	___awdiv@dividend+1,7,c
  3076  007818  D006               	goto	l1531
  3077  00781A  6C01               	negf	___awdiv@dividend,c
  3078  00781C  1E02               	comf	___awdiv@dividend+1,f,c
  3079  00781E  B0D8               	btfsc	status,0,c
  3080  007820  2A02               	incf	___awdiv@dividend+1,f,c
  3081  007822  0E01               	movlw	1
  3082  007824  1A06               	xorwf	___awdiv@sign,f,c
  3083  007826                     l1531:
  3084  007826  0E00               	movlw	0
  3085  007828  6E08               	movwf	___awdiv@quotient+1,c
  3086  00782A  0E00               	movlw	0
  3087  00782C  6E07               	movwf	___awdiv@quotient,c
  3088  00782E  5003               	movf	___awdiv@divisor,w,c
  3089  007830  1004               	iorwf	___awdiv@divisor+1,w,c
  3090  007832  B4D8               	btfsc	status,2,c
  3091  007834  D01C               	goto	l1553
  3092  007836  0E01               	movlw	1
  3093  007838  6E05               	movwf	___awdiv@counter,c
  3094  00783A  D004               	goto	l1539
  3095  00783C                     l1537:
  3096  00783C  90D8               	bcf	status,0,c
  3097  00783E  3603               	rlcf	___awdiv@divisor,f,c
  3098  007840  3604               	rlcf	___awdiv@divisor+1,f,c
  3099  007842  2A05               	incf	___awdiv@counter,f,c
  3100  007844                     l1539:
  3101  007844  AE04               	btfss	___awdiv@divisor+1,7,c
  3102  007846  D7FA               	goto	l1537
  3103  007848                     l1541:
  3104  007848  90D8               	bcf	status,0,c
  3105  00784A  3607               	rlcf	___awdiv@quotient,f,c
  3106  00784C  3608               	rlcf	___awdiv@quotient+1,f,c
  3107  00784E  5003               	movf	___awdiv@divisor,w,c
  3108  007850  5C01               	subwf	___awdiv@dividend,w,c
  3109  007852  5004               	movf	___awdiv@divisor+1,w,c
  3110  007854  5802               	subwfb	___awdiv@dividend+1,w,c
  3111  007856  A0D8               	btfss	status,0,c
  3112  007858  D005               	goto	l1549
  3113  00785A  5003               	movf	___awdiv@divisor,w,c
  3114  00785C  5E01               	subwf	___awdiv@dividend,f,c
  3115  00785E  5004               	movf	___awdiv@divisor+1,w,c
  3116  007860  5A02               	subwfb	___awdiv@dividend+1,f,c
  3117  007862  8007               	bsf	___awdiv@quotient,0,c
  3118  007864                     l1549:
  3119  007864  90D8               	bcf	status,0,c
  3120  007866  3204               	rrcf	___awdiv@divisor+1,f,c
  3121  007868  3203               	rrcf	___awdiv@divisor,f,c
  3122  00786A  2E05               	decfsz	___awdiv@counter,f,c
  3123  00786C  D7ED               	goto	l1541
  3124  00786E                     l1553:
  3125  00786E  5006               	movf	___awdiv@sign,w,c
  3126  007870  B4D8               	btfsc	status,2,c
  3127  007872  D004               	goto	l1557
  3128  007874  6C07               	negf	___awdiv@quotient,c
  3129  007876  1E08               	comf	___awdiv@quotient+1,f,c
  3130  007878  B0D8               	btfsc	status,0,c
  3131  00787A  2A08               	incf	___awdiv@quotient+1,f,c
  3132  00787C                     l1557:
  3133  00787C  C007  F001         	movff	___awdiv@quotient,?___awdiv
  3134  007880  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  3135  007884  0012               	return	
  3136  007886                     __end_of___awdiv:
  3137                           	opt stack 0
  3138  0000                     postinc0	equ	0xFEE
  3139                           wreg	equ	0xFE8
  3140                           postinc2	equ	0xFDE
  3141                           postdec2	equ	0xFDD
  3142                           fsr2h	equ	0xFDA
  3143                           fsr2l	equ	0xFD9
  3144                           status	equ	0xFD8
  3145                           postinc0	equ	0xFEE
  3146                           wreg	equ	0xFE8
  3147                           postinc2	equ	0xFDE
  3148                           postdec2	equ	0xFDD
  3149                           fsr2h	equ	0xFDA
  3150                           fsr2l	equ	0xFD9
  3151                           status	equ	0xFD8
  3152                           
  3153                           	psect	rparam
  3154  0000                     postinc0	equ	0xFEE
  3155                           wreg	equ	0xFE8
  3156                           postinc2	equ	0xFDE
  3157                           postdec2	equ	0xFDD
  3158                           fsr2h	equ	0xFDA
  3159                           fsr2l	equ	0xFD9
  3160                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         24
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     85      85
    BANK0           160      0      24
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    CDC_RESULT	PTR unsigned int [12] size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    write_AD7147@DataBuffer	PTR unsigned int  size(2) Largest target is 16
		 -> setup_AD7147@AD7147Registers(COMRAM[16]), setup_AD7147@StageBuffer(COMRAM[16]), 


Critical Paths under _main in COMRAM

    _main->_setup_AD7147
    _setup_AD7147->_write_AD7147
    _write_AD7147->_w32_spi
    _read_AD7147_interrupt->_w16_r16_spi
    _read_sensor->_w16_r16_spi
    _sensor_CDC->_get_CDC
    _get_ID->_w16_r16_spi
    _blink_LED->_w32_spi
    _delay_ms->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0   22670
                                             78 COMRAM     7     7      0
                          _blink_LED
                           _delay_ms
                             _get_ID
                        _read_sensor
                       _setup_AD7147
                          _setup_mcu
                          _setup_spi
                    _uart_write_char
            _uart_write_unsigned_int
 ---------------------------------------------------------------------------------
 (1) _uart_write_unsigned_int                              4     2      2     318
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _uart_write_char                                      1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setup_spi                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_mcu                                            0     0      0       0
                          _init_uart
                         _setup_port
 ---------------------------------------------------------------------------------
 (2) _setup_port                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_uart                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_AD7147                                        40    38      2   11669
                                             38 COMRAM    40    38      2
                            _get_CDC
              _read_AD7147_interrupt
                       _write_AD7147
 ---------------------------------------------------------------------------------
 (2) _write_AD7147                                        16     8      8    6012
                                             22 COMRAM    16     8      8
                            _w32_spi
 ---------------------------------------------------------------------------------
 (2) _read_AD7147_interrupt                                6     4      2    1035
                                             22 COMRAM     6     4      2
                        _w16_r16_spi
 ---------------------------------------------------------------------------------
 (1) _read_sensor                                          8     6      2    3006
                                             22 COMRAM     8     6      2
                         _sensor_CDC
                        _w16_r16_spi
 ---------------------------------------------------------------------------------
 (2) _sensor_CDC                                           4     0      4    2238
                                              4 COMRAM     4     0      4
                            _get_CDC
 ---------------------------------------------------------------------------------
 (1) _get_ID                                               5     3      2    2522
                                             22 COMRAM     5     3      2
                            _get_CDC
                        _w16_r16_spi
 ---------------------------------------------------------------------------------
 (3) _w16_r16_spi                                         22    20      2     511
                                              0 COMRAM    22    20      2
 ---------------------------------------------------------------------------------
 (1) _blink_LED                                            4     2      2    4051
                                             22 COMRAM     4     2      2
                           _delay_ms
                            _get_CDC
                            _w32_spi
 ---------------------------------------------------------------------------------
 (3) _w32_spi                                             22    18      4     944
                                              0 COMRAM    22    18      4
 ---------------------------------------------------------------------------------
 (2) _get_CDC                                              4     0      4    1868
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             5     3      2     953
                                              8 COMRAM     5     3      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _blink_LED
     _delay_ms
       ___awdiv
     _get_CDC
     _w32_spi
   _delay_ms
     ___awdiv
   _get_ID
     _get_CDC
     _w16_r16_spi
   _read_sensor
     _sensor_CDC
       _get_CDC
     _w16_r16_spi
   _setup_AD7147
     _get_CDC
     _read_AD7147_interrupt
       _w16_r16_spi
     _write_AD7147
       _w32_spi
   _setup_mcu
     _init_uart
     _setup_port
   _setup_spi
   _uart_write_char
   _uart_write_unsigned_int

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      18       5       15.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     55      55       1       89.5%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      6D       6        0.0%
DATA                 0      0      6D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Thu Jul 27 19:05:47 2017

                         _SSPSTATbits 000FC7                                    l41 76AC  
                                  l83 751C                          ___awdiv@sign 0006  
                        __CFG_CP0$OFF 000000                                   l200 7734  
                                 l203 7742                                   l206 7750  
                                 l209 775E                                   l170 7662  
                                 l234 7490                                   l173 7670  
                                 l246 74EE                                   l167 7654  
                                 l176 767E                                   l249 74F6  
                                 u700 769E                                   u715 75E8  
                                 u680 7558                                   u797 75A8  
            setup_AD7147@int_complete 002D                                   wreg 000FE8  
                          _TXSTA1bits 000FAC                     write_AD7147@index 001D  
         write_AD7147@RegisterAddress 0017                                  l1531 7826  
                                l1541 7848                                  l1525 7816  
                                l1537 783C                                  l1553 786E  
                                l1539 7844                                  l1563 779E  
                                l1571 77F4                                  l1557 787C  
                                l1549 7864                                  l1591 75B2  
                                l1585 756E                                  l1499 750E  
                                l1589 75A2                                  l1853 76B4  
                                l1953 79E0                                  l1945 79B2  
                                l1937 7984                                  l1959 79FA  
                                _main 7934                                  fsr2l 000FD9  
    __size_of_uart_write_unsigned_int 001A                                  start 0002  
                       ??_w16_r16_spi 0003                         __CFG_IESO$OFF 000000  
                       __CFG_FOSC$HS1 000000                          ___param_bank 000000  
                     __end_of_w32_spi 768A              __size_of_uart_write_char 000C  
                               ?_main 0001                       __end_of___awdiv 7886  
                     ___awdiv@divisor 0003                                 _RC1IF 007CF5  
               w16_r16_spi@blank_high 0011                       ___awdiv@counter 0005  
                               _TRISB 000F93                                 _TRISC 000F94  
                     __end_of_get_CDC 7522                        __CFG_FCMEN$OFF 000000  
               __size_of_write_AD7147 007E                          ?_read_sensor 0017  
                        main@sensor_1 0053                                 status 000FD8  
              w16_r16_spi@address_low 0009           setup_AD7147@AD7147Registers 002F  
                     __initialization 74AA                          __end_of_main 7A08  
                 __end_of_w16_r16_spi 7784                          _write_AD7147 7784  
                              ??_main 004F                         main@device_ID 0051  
                       __activetblptr 000000                      ___awdiv@dividend 0001  
                         w32_spi@data 0003                         main@indicator 0055  
read_AD7147_interrupt@interrupt_clear 001B                        __CFG_WDTEN$OFF 000000  
                              _RCREG1 000FAE                                _SPBRG1 000FAF  
                              _SSPBUF 000FC9                                _TXREG1 000FAD  
                              _TXSTA1 000FAC                      __end_of_delay_ms 75C4  
                           ??_w32_spi 0005                        __CFG_XINST$OFF 000000  
                           ??___awdiv 0005                        __CFG_STVREN$ON 000000  
                              _get_ID 75C4                                clear_0 74B0  
                    ___awdiv@quotient 0007                             ??_get_CDC 0005  
                              main@bb 004F            write_AD7147@Register_Value 0021  
                   ??_uart_write_char 0001        __size_of_read_AD7147_interrupt 002A  
       __end_of_read_AD7147_interrupt 754C               w16_r16_spi@address_high 000B  
             _uart_write_unsigned_int 74E6                            __accesstop 0060  
             __end_of__initialization 74B6                         ___rparam_used 000001  
                         _w16_r16_spi 7706                        __pcstackCOMRAM 0001  
                  __size_of_blink_LED 00AE                            __pbssBANK0 0060  
                __size_of_read_sensor 007C                    __size_of_init_uart 0014  
                             ?_get_ID 0017                      __CFG_CANMX$PORTB 000000  
                  __size_of_setup_mcu 000A                    __size_of_setup_spi 0016  
                           ?_delay_ms 0009                         w16_r16_spi@p1 0005  
                       w16_r16_spi@p2 0007                         w16_r16_spi@p3 0013  
                       w16_r16_spi@p4 0015             ??_uart_write_unsigned_int 0003  
                   __end_of_blink_LED 7934                               _w32_spi 761C  
                             __Hparam 0000                               __Lparam 0000  
                             ___awdiv 7802                       __size_of_get_ID 0058  
                     sensor_CDC@state 0007                               __pcinit 74AA  
                             _get_CDC 7500                               __ramtop 0F00  
                             __ptext0 7934                               __ptext1 74E6  
                             __ptext2 748E                               __ptext3 74D0  
                             __ptext4 7484                               __ptext5 749A  
                             __ptext6 74BC                               __ptext7 7A08  
                             __ptext8 7784                               __ptext9 7522  
                      w32_spi@address 0001                     __end_of_init_uart 74D0  
                          ??_delay_ms 000B                            get_CDC@cdc 0001  
                end_of_initialization 74B6                         ?_setup_AD7147 0027  
                   __end_of_setup_mcu 748E                     __end_of_setup_spi 74E6  
                             postdec2 000FDD       __end_of_uart_write_unsigned_int 7500  
                             postinc0 000FEE                               postinc2 000FDE  
                          _sensor_CDC 754C                       _uart_write_char 748E  
                          _setup_port 749A                        ??_setup_AD7147 0029  
               read_sensor@cdc_sensor 001D                          ?_w16_r16_spi 0001  
                           w32_spi@p1 0007                             w32_spi@p2 0009  
                           w32_spi@p3 000B                             w32_spi@p4 000D  
                w16_r16_spi@blank_low 000F                        __end_of_get_ID 761C  
                 w32_spi@address_high 0011                   start_initialization 74AA  
                 uart_write_char@data 0001                 _read_AD7147_interrupt 7522  
             __end_of_uart_write_char 749A               setup_AD7147@StageBuffer 003F  
                         ?_sensor_CDC 0005                              ??_get_ID 0019  
                         ?_setup_port 0001                write_AD7147@DataBuffer 001B  
                       ??_read_sensor 0019                     __size_of_delay_ms 0040  
              write_AD7147@Data_Value 0023                              ?_w32_spi 0001  
                           _blink_LED 7886                              ?___awdiv 0001  
                __end_of_setup_AD7147 8000                              ?_get_CDC 0001  
                       ?_write_AD7147 0017                              _BAUDCON1 000FA7  
        uart_write_unsigned_int@char1 0003          uart_write_unsigned_int@char2 0004  
                    w32_spi@data_high 0015                             _init_uart 74BC  
                 __size_of_sensor_CDC 0038                ?_read_AD7147_interrupt 0017  
                            _LATCbits 000F8B                             delay_ms@j 000C  
                           delay_ms@n 0009                   __end_of_read_sensor 7706  
       write_AD7147@NumberOfRegisters 0019                             get_ID@cdc 0017  
                            _PIE1bits 000F9D                   __size_of_setup_port 0010  
                    ?_uart_write_char 0001                              _PIR1bits 000F9E  
                          ?_blink_LED 0017                  __size_of_w16_r16_spi 007E  
                           _setup_mcu 7484                             _setup_spi 74D0  
                      ??_write_AD7147 001F                       setup_AD7147@cdc 0027  
                        get_CDC@state 0003                      __CFG_SOSCSEL$DIG 000000  
            ?_uart_write_unsigned_int 0001                            ?_init_uart 0001  
                  w32_spi@address_low 000F                            _CDC_RESULT 0060  
                            __Hrparam 0000                          get_ID@result 001A  
                    __size_of_w32_spi 006E                              __Lrparam 0000  
                        blink_LED@cdc 0017               read_sensor@sensor_value 001B  
                    __size_of___awdiv 0084                            ?_setup_mcu 0001  
                          ?_setup_spi 0001                      __size_of_get_CDC 0022  
                    sensor_CDC@sensor 0005                              _delay_ms 7584  
                read_sensor@register1 0019                              __ptext10 768A  
                            __ptext11 754C                              __ptext12 75C4  
                            __ptext13 7706                              __ptext14 7886  
                            __ptext15 761C                              __ptext16 7500  
                            __ptext17 7584                              __ptext18 7802  
                         _read_sensor 768A                         __size_of_main 00D4  
                     w32_spi@data_low 0013                     read_sensor@sensor 0017  
                         ??_blink_LED 0019                 __size_of_setup_AD7147 05F8  
                        ??_sensor_CDC 0009                         write_AD7147@i 0025  
                  w16_r16_spi@address 0001                          ??_setup_port 0001  
                         ??_init_uart 0001  read_AD7147_interrupt@RegisterAddress 0017  
                  __end_of_sensor_CDC 7584                  __end_of_write_AD7147 7802  
                        _setup_AD7147 7A08                            _RCSTA1bits 000FAB  
read_AD7147_interrupt@Register_Values 0019                    __end_of_setup_port 74AA  
                         ??_setup_mcu 0001                           ??_setup_spi 0001  
                   w16_r16_spi@result 000D                           _SSPCON1bits 000FC6  
             ??_read_AD7147_interrupt 0019                      blink_LED@message 0019  
       uart_write_unsigned_int@number 0001                   setup_AD7147@int_low 0029  
                setup_AD7147@int_high 002B  
