

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Mon Sep 04 21:43:49 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F25K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    46                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    47                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    48  0000                     
    49                           ; Version 1.42
    50                           ; Generated 13/04/2017 GMT
    51                           ; 
    52                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    53                           ; All rights reserved.
    54                           ; 
    55                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    56                           ; 
    57                           ; Redistribution and use in source and binary forms, with or without modification, are
    58                           ; permitted provided that the following conditions are met:
    59                           ; 
    60                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    61                           ;        conditions and the following disclaimer.
    62                           ; 
    63                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    64                           ;        of conditions and the following disclaimer in the documentation and/or other
    65                           ;        materials provided with the distribution.
    66                           ; 
    67                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    68                           ;        software without specific prior written permission.
    69                           ; 
    70                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    71                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    72                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    73                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    74                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    75                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    76                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    77                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    78                           ; 
    79                           ; 
    80                           ; Code-generator required, PIC18F25K80 Definitions
    81                           ; 
    82                           ; SFR Addresses
    83  0000                     
    84                           	psect	idataBANK0
    85  0016B8                     __pidataBANK0:
    86                           	opt stack 0
    87                           
    88                           ;initializer for _start_stop
    89  0016B8  0001               	dw	1
    90                           
    91                           ;initializer for _state
    92  0016BA  72                 	db	114
    93  0000                     _ANCON1bits	set	3932
    94  0000                     _RCREG1	set	4014
    95  0000                     _PIR1bits	set	3998
    96  0000                     _TXREG1	set	4013
    97  0000                     _TXSTA1bits	set	4012
    98  0000                     _SSPBUF	set	4041
    99  0000                     _PIE1bits	set	3997
   100  0000                     _SSPCON1bits	set	4038
   101  0000                     _SSPSTATbits	set	4039
   102  0000                     _RCSTA1bits	set	4011
   103  0000                     _BAUDCON1	set	4007
   104  0000                     _SPBRG1	set	4015
   105  0000                     _TXSTA1	set	4012
   106  0000                     _INTCON2bits	set	4081
   107  0000                     _RCONbits	set	4048
   108  0000                     _TRISBbits	set	3987
   109  0000                     _TRISC	set	3988
   110  0000                     _INTCON3bits	set	4080
   111  0000                     _INTCONbits	set	4082
   112  0000                     _LATCbits	set	3979
   113  0000                     _RC1IF	set	31989
   114                           
   115                           ; #config settings
   116  0000                     
   117                           	psect	cinit
   118  001434                     __pcinit:
   119                           	opt stack 0
   120  001434                     start_initialization:
   121                           	opt stack 0
   122  001434                     __initialization:
   123                           	opt stack 0
   124                           
   125                           ; Initialize objects allocated to BANK0 (3 bytes)
   126                           ; load TBLPTR registers with __pidataBANK0
   127  001434  0EB8               	movlw	low __pidataBANK0
   128  001436  6EF6               	movwf	tblptrl,c
   129  001438  0E16               	movlw	high __pidataBANK0
   130  00143A  6EF7               	movwf	tblptrh,c
   131  00143C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   132  00143E  6EF8               	movwf	tblptru,c
   133  001440  0009               	tblrd		*+	;fetch initializer
   134  001442  CFF5 F0F2          	movff	tablat,__pdataBANK0
   135  001446  0009               	tblrd		*+	;fetch initializer
   136  001448  CFF5 F0F3          	movff	tablat,__pdataBANK0+1
   137  00144C  0009               	tblrd		*+	;fetch initializer
   138  00144E  CFF5 F0F4          	movff	tablat,__pdataBANK0+2
   139                           
   140                           ; Clear objects allocated to BANK1 (48 bytes)
   141  001452  EE01  F000         	lfsr	0,__pbssBANK1
   142  001456  0E30               	movlw	48
   143  001458                     clear_0:
   144  001458  6AEE               	clrf	postinc0,c
   145  00145A  06E8               	decf	wreg,f,c
   146  00145C  E1FD               	bnz	clear_0
   147                           
   148                           ; Clear objects allocated to BANK0 (76 bytes)
   149  00145E  EE00  F060         	lfsr	0,__pbssBANK0
   150  001462  0E4C               	movlw	76
   151  001464                     clear_1:
   152  001464  6AEE               	clrf	postinc0,c
   153  001466  06E8               	decf	wreg,f,c
   154  001468  E1FD               	bnz	clear_1
   155                           
   156                           ; Clear objects allocated to COMRAM (38 bytes)
   157  00146A  EE00  F031         	lfsr	0,__pbssCOMRAM
   158  00146E  0E26               	movlw	38
   159  001470                     clear_2:
   160  001470  6AEE               	clrf	postinc0,c
   161  001472  06E8               	decf	wreg,f,c
   162  001474  E1FD               	bnz	clear_2
   163  001476                     end_of_initialization:
   164                           	opt stack 0
   165  001476                     __end_of__initialization:
   166                           	opt stack 0
   167  001476  9057               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   168  001478  9257               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   169  00147A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   170  00147C  6EF8               	movwf	tblptru,c
   171  00147E  0100               	movlb	0
   172  001480  EF4A  F004         	goto	_main	;jump to C main() function
   173                           tblptru	equ	0xFF8
   174                           tblptrh	equ	0xFF7
   175                           tblptrl	equ	0xFF6
   176                           tablat	equ	0xFF5
   177                           postinc0	equ	0xFEE
   178                           wreg	equ	0xFE8
   179                           
   180                           	psect	bssCOMRAM
   181  000031                     __pbssCOMRAM:
   182                           	opt stack 0
   183  000031                     _CDC_RESULT:
   184                           	opt stack 0
   185  000031                     	ds	24
   186  000049                     _second_sensor:
   187                           	opt stack 0
   188  000049                     	ds	2
   189  00004B                     _interrupt_values_cdc2:
   190                           	opt stack 0
   191  00004B                     	ds	6
   192  000051                     _interrupt_values_cdc1:
   193                           	opt stack 0
   194  000051                     	ds	6
   195                           tblptru	equ	0xFF8
   196                           tblptrh	equ	0xFF7
   197                           tblptrl	equ	0xFF6
   198                           tablat	equ	0xFF5
   199                           postinc0	equ	0xFEE
   200                           wreg	equ	0xFE8
   201                           
   202                           	psect	bssBANK0
   203  000060                     __pbssBANK0:
   204                           	opt stack 0
   205  000060                     setup_AD7147@F14884:
   206                           	opt stack 0
   207  000060                     	ds	16
   208  000070                     _num_sensors:
   209                           	opt stack 0
   210  000070                     	ds	2
   211  000072                     _on_off:
   212                           	opt stack 0
   213  000072                     	ds	2
   214  000074                     _cdc:
   215                           	opt stack 0
   216  000074                     	ds	2
   217  000076                     _device_ID:
   218                           	opt stack 0
   219  000076                     	ds	2
   220  000078                     _single_sensor:
   221                           	opt stack 0
   222  000078                     	ds	2
   223  00007A                     _break_loop:
   224                           	opt stack 0
   225  00007A                     	ds	1
   226  00007B                     _indicator:
   227                           	opt stack 0
   228  00007B                     	ds	1
   229  00007C                     _sensor_values:
   230                           	opt stack 0
   231  00007C                     	ds	48
   232                           tblptru	equ	0xFF8
   233                           tblptrh	equ	0xFF7
   234                           tblptrl	equ	0xFF6
   235                           tablat	equ	0xFF5
   236                           postinc0	equ	0xFEE
   237                           wreg	equ	0xFE8
   238                           
   239                           	psect	dataBANK0
   240  0000F2                     __pdataBANK0:
   241                           	opt stack 0
   242  0000F2                     _start_stop:
   243                           	opt stack 0
   244  0000F2                     	ds	2
   245  0000F4                     _state:
   246                           	opt stack 0
   247  0000F4                     	ds	1
   248                           tblptru	equ	0xFF8
   249                           tblptrh	equ	0xFF7
   250                           tblptrl	equ	0xFF6
   251                           tablat	equ	0xFF5
   252                           postinc0	equ	0xFEE
   253                           wreg	equ	0xFE8
   254                           
   255                           	psect	bssBANK1
   256  000100                     __pbssBANK1:
   257                           	opt stack 0
   258  000100                     _avail_sensors:
   259                           	opt stack 0
   260  000100                     	ds	48
   261                           tblptru	equ	0xFF8
   262                           tblptrh	equ	0xFF7
   263                           tblptrl	equ	0xFF6
   264                           tablat	equ	0xFF5
   265                           postinc0	equ	0xFEE
   266                           wreg	equ	0xFE8
   267                           
   268                           	psect	cstackBANK0
   269  0000AC                     __pcstackBANK0:
   270                           	opt stack 0
   271  0000AC                     ?_w16_r16_spi:
   272                           	opt stack 0
   273  0000AC                     ?_uart_read_unsigned_int:
   274                           	opt stack 0
   275  0000AC                     ?___awdiv:
   276                           	opt stack 0
   277  0000AC                     uart_write_char@data:
   278                           	opt stack 0
   279  0000AC                     get_CDC@cdc:
   280                           	opt stack 0
   281  0000AC                     w32_spi@address:
   282                           	opt stack 0
   283  0000AC                     w16_r16_spi@address:
   284                           	opt stack 0
   285  0000AC                     uart_write_unsigned_int@number:
   286                           	opt stack 0
   287  0000AC                     uart_read_indicator@count:
   288                           	opt stack 0
   289  0000AC                     ___awdiv@dividend:
   290                           	opt stack 0
   291  0000AC                     memset@p1:
   292                           	opt stack 0
   293                           
   294                           ; 2 bytes @ 0x0
   295  0000AC                     	ds	2
   296  0000AE                     ??_w16_r16_spi:
   297  0000AE                     ??_uart_read_unsigned_int:
   298  0000AE                     uart_write_unsigned_int@char1:
   299                           	opt stack 0
   300  0000AE                     get_CDC@state:
   301                           	opt stack 0
   302  0000AE                     w32_spi@data:
   303                           	opt stack 0
   304  0000AE                     ___awdiv@divisor:
   305                           	opt stack 0
   306  0000AE                     memset@c:
   307                           	opt stack 0
   308                           
   309                           ; 2 bytes @ 0x2
   310  0000AE                     	ds	1
   311  0000AF                     uart_write_unsigned_int@char2:
   312                           	opt stack 0
   313                           
   314                           ; 1 bytes @ 0x3
   315  0000AF                     	ds	1
   316  0000B0                     ??_w32_spi:
   317  0000B0                     ___awdiv@counter:
   318                           	opt stack 0
   319  0000B0                     sensor_CDC@sensor:
   320                           	opt stack 0
   321  0000B0                     w16_r16_spi@p1:
   322                           	opt stack 0
   323  0000B0                     uart_read_unsigned_int@message:
   324                           	opt stack 0
   325  0000B0                     memset@n:
   326                           	opt stack 0
   327                           
   328                           ; 2 bytes @ 0x4
   329  0000B0                     	ds	1
   330  0000B1                     ___awdiv@sign:
   331                           	opt stack 0
   332                           
   333                           ; 1 bytes @ 0x5
   334  0000B1                     	ds	1
   335  0000B2                     uart_read_unsigned_int@part1:
   336                           	opt stack 0
   337  0000B2                     sensor_CDC@state:
   338                           	opt stack 0
   339  0000B2                     w32_spi@p1:
   340                           	opt stack 0
   341  0000B2                     w16_r16_spi@p2:
   342                           	opt stack 0
   343  0000B2                     ___awdiv@quotient:
   344                           	opt stack 0
   345  0000B2                     memset@p:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x6
   349  0000B2                     	ds	1
   350  0000B3                     uart_read_unsigned_int@part2:
   351                           	opt stack 0
   352                           
   353                           ; 1 bytes @ 0x7
   354  0000B3                     	ds	1
   355  0000B4                     delay_ms@n:
   356                           	opt stack 0
   357  0000B4                     w32_spi@p2:
   358                           	opt stack 0
   359  0000B4                     w16_r16_spi@address_low:
   360                           	opt stack 0
   361                           
   362                           ; 2 bytes @ 0x8
   363  0000B4                     	ds	2
   364  0000B6                     ??_delay_ms:
   365  0000B6                     w32_spi@p3:
   366                           	opt stack 0
   367  0000B6                     w16_r16_spi@address_high:
   368                           	opt stack 0
   369                           
   370                           ; 2 bytes @ 0xA
   371  0000B6                     	ds	1
   372  0000B7                     delay_ms@j:
   373                           	opt stack 0
   374                           
   375                           ; 2 bytes @ 0xB
   376  0000B7                     	ds	1
   377  0000B8                     w32_spi@p4:
   378                           	opt stack 0
   379  0000B8                     w16_r16_spi@result:
   380                           	opt stack 0
   381                           
   382                           ; 2 bytes @ 0xC
   383  0000B8                     	ds	2
   384  0000BA                     w32_spi@address_low:
   385                           	opt stack 0
   386  0000BA                     w16_r16_spi@blank_low:
   387                           	opt stack 0
   388                           
   389                           ; 2 bytes @ 0xE
   390  0000BA                     	ds	2
   391  0000BC                     w32_spi@address_high:
   392                           	opt stack 0
   393  0000BC                     w16_r16_spi@blank_high:
   394                           	opt stack 0
   395                           
   396                           ; 2 bytes @ 0x10
   397  0000BC                     	ds	2
   398  0000BE                     w32_spi@data_low:
   399                           	opt stack 0
   400  0000BE                     w16_r16_spi@p3:
   401                           	opt stack 0
   402                           
   403                           ; 2 bytes @ 0x12
   404  0000BE                     	ds	2
   405  0000C0                     w32_spi@data_high:
   406                           	opt stack 0
   407  0000C0                     w16_r16_spi@p4:
   408                           	opt stack 0
   409                           
   410                           ; 2 bytes @ 0x14
   411  0000C0                     	ds	2
   412  0000C2                     ?_get_ID:
   413                           	opt stack 0
   414  0000C2                     write_AD7147@RegisterStartAddress:
   415                           	opt stack 0
   416  0000C2                     read_AD7147@DataBuffer:
   417                           	opt stack 0
   418  0000C2                     read_sensor@sensor_values:
   419                           	opt stack 0
   420  0000C2                     get_ID@cdc:
   421                           	opt stack 0
   422  0000C2                     switch_LED@cdc:
   423                           	opt stack 0
   424  0000C2                     blink_LED@cdc:
   425                           	opt stack 0
   426                           
   427                           ; 2 bytes @ 0x16
   428  0000C2                     	ds	2
   429  0000C4                     ??_get_ID:
   430  0000C4                     write_AD7147@NumberOfRegisters:
   431                           	opt stack 0
   432  0000C4                     read_AD7147@RegisterStartAddress:
   433                           	opt stack 0
   434  0000C4                     read_sensor@sensor:
   435                           	opt stack 0
   436  0000C4                     switch_LED@state:
   437                           	opt stack 0
   438  0000C4                     blink_LED@message:
   439                           	opt stack 0
   440                           
   441                           ; 2 bytes @ 0x18
   442  0000C4                     	ds	1
   443  0000C5                     get_ID@result:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0x19
   447  0000C5                     	ds	1
   448  0000C6                     ??_read_sensor:
   449  0000C6                     write_AD7147@OutputBuffer:
   450                           	opt stack 0
   451  0000C6                     read_AD7147@NumberOfRegisters:
   452                           	opt stack 0
   453  0000C6                     switch_LED@message:
   454                           	opt stack 0
   455                           
   456                           ; 2 bytes @ 0x1A
   457  0000C6                     	ds	2
   458  0000C8                     write_AD7147@index:
   459                           	opt stack 0
   460  0000C8                     read_AD7147@cdc:
   461                           	opt stack 0
   462  0000C8                     switch_LED@message_160:
   463                           	opt stack 0
   464                           
   465                           ; 2 bytes @ 0x1C
   466  0000C8                     	ds	2
   467  0000CA                     write_AD7147@cdc:
   468                           	opt stack 0
   469  0000CA                     read_AD7147@Register_Values:
   470                           	opt stack 0
   471  0000CA                     read_sensor@register1:
   472                           	opt stack 0
   473                           
   474                           ; 2 bytes @ 0x1E
   475  0000CA                     	ds	2
   476  0000CC                     ??_write_AD7147:
   477  0000CC                     read_AD7147@i:
   478                           	opt stack 0
   479  0000CC                     read_sensor@cdc_sensor:
   480                           	opt stack 0
   481                           
   482                           ; 2 bytes @ 0x20
   483  0000CC                     	ds	2
   484  0000CE                     write_AD7147@Register_Value:
   485                           	opt stack 0
   486                           
   487                           ; 2 bytes @ 0x22
   488  0000CE                     	ds	2
   489  0000D0                     write_AD7147@Data_Value:
   490                           	opt stack 0
   491                           
   492                           ; 2 bytes @ 0x24
   493  0000D0                     	ds	2
   494  0000D2                     write_AD7147@i:
   495                           	opt stack 0
   496                           
   497                           ; 2 bytes @ 0x26
   498  0000D2                     	ds	2
   499  0000D4                     setup_AD7147@DataBuffer:
   500                           	opt stack 0
   501                           
   502                           ; 2 bytes @ 0x28
   503  0000D4                     	ds	2
   504  0000D6                     setup_AD7147@cdc:
   505                           	opt stack 0
   506                           
   507                           ; 2 bytes @ 0x2A
   508  0000D6                     	ds	2
   509  0000D8                     setup_AD7147@StageBuffer:
   510                           	opt stack 0
   511                           
   512                           ; 16 bytes @ 0x2C
   513  0000D8                     	ds	16
   514  0000E8                     ??_main:
   515                           
   516                           ; 1 bytes @ 0x3C
   517  0000E8                     	ds	4
   518  0000EC                     main@index:
   519                           	opt stack 0
   520                           
   521                           ; 2 bytes @ 0x40
   522  0000EC                     	ds	2
   523  0000EE                     main@k:
   524                           	opt stack 0
   525                           
   526                           ; 2 bytes @ 0x42
   527  0000EE                     	ds	2
   528  0000F0                     main@i:
   529                           	opt stack 0
   530                           
   531                           ; 2 bytes @ 0x44
   532  0000F0                     	ds	2
   533                           tblptru	equ	0xFF8
   534                           tblptrh	equ	0xFF7
   535                           tblptrl	equ	0xFF6
   536                           tablat	equ	0xFF5
   537                           postinc0	equ	0xFEE
   538                           wreg	equ	0xFE8
   539                           
   540                           	psect	cstackCOMRAM
   541  000001                     __pcstackCOMRAM:
   542                           	opt stack 0
   543  000001                     ?_r16_spi:
   544                           	opt stack 0
   545  000001                     ?i2_w16_r16_spi:
   546                           	opt stack 0
   547  000001                     i2get_CDC@cdc:
   548                           	opt stack 0
   549  000001                     i2w16_r16_spi@address:
   550                           	opt stack 0
   551                           
   552                           ; 2 bytes @ 0x0
   553  000001                     	ds	2
   554  000003                     ??_r16_spi:
   555  000003                     ??i2_w16_r16_spi:
   556  000003                     i2get_CDC@state:
   557                           	opt stack 0
   558                           
   559                           ; 2 bytes @ 0x2
   560  000003                     	ds	2
   561  000005                     r16_spi@blank_low:
   562                           	opt stack 0
   563  000005                     i2w16_r16_spi@p1:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0x4
   567  000005                     	ds	2
   568  000007                     r16_spi@blank_high:
   569                           	opt stack 0
   570  000007                     i2w16_r16_spi@p2:
   571                           	opt stack 0
   572                           
   573                           ; 2 bytes @ 0x6
   574  000007                     	ds	2
   575  000009                     r16_spi@p1:
   576                           	opt stack 0
   577  000009                     i2w16_r16_spi@address_low:
   578                           	opt stack 0
   579                           
   580                           ; 2 bytes @ 0x8
   581  000009                     	ds	2
   582  00000B                     r16_spi@p2:
   583                           	opt stack 0
   584  00000B                     i2w16_r16_spi@address_high:
   585                           	opt stack 0
   586                           
   587                           ; 2 bytes @ 0xA
   588  00000B                     	ds	2
   589  00000D                     r16_spi@result:
   590                           	opt stack 0
   591  00000D                     i2w16_r16_spi@result:
   592                           	opt stack 0
   593                           
   594                           ; 2 bytes @ 0xC
   595  00000D                     	ds	2
   596  00000F                     i2w16_r16_spi@blank_low:
   597                           	opt stack 0
   598                           
   599                           ; 2 bytes @ 0xE
   600  00000F                     	ds	2
   601  000011                     i2w16_r16_spi@blank_high:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0x10
   605  000011                     	ds	2
   606  000013                     i2w16_r16_spi@p3:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0x12
   610  000013                     	ds	2
   611  000015                     i2w16_r16_spi@p4:
   612                           	opt stack 0
   613                           
   614                           ; 2 bytes @ 0x14
   615  000015                     	ds	2
   616  000017                     read_cdc1@sensor_values:
   617                           	opt stack 0
   618  000017                     read_cdc2@sensor_values:
   619                           	opt stack 0
   620  000017                     i2read_AD7147@DataBuffer:
   621                           	opt stack 0
   622                           
   623                           ; 2 bytes @ 0x16
   624  000017                     	ds	2
   625  000019                     read_cdc1@i:
   626                           	opt stack 0
   627  000019                     read_cdc2@i:
   628                           	opt stack 0
   629  000019                     i2read_AD7147@RegisterStartAddress:
   630                           	opt stack 0
   631                           
   632                           ; 2 bytes @ 0x18
   633  000019                     	ds	2
   634  00001B                     i2read_AD7147@NumberOfRegisters:
   635                           	opt stack 0
   636                           
   637                           ; 2 bytes @ 0x1A
   638  00001B                     	ds	2
   639  00001D                     i2read_AD7147@cdc:
   640                           	opt stack 0
   641                           
   642                           ; 2 bytes @ 0x1C
   643  00001D                     	ds	2
   644  00001F                     i2read_AD7147@Register_Values:
   645                           	opt stack 0
   646                           
   647                           ; 2 bytes @ 0x1E
   648  00001F                     	ds	2
   649  000021                     i2read_AD7147@i:
   650                           	opt stack 0
   651                           
   652                           ; 2 bytes @ 0x20
   653  000021                     	ds	2
   654  000023                     ??_ISR:
   655                           
   656                           ; 1 bytes @ 0x22
   657  000023                     	ds	14
   658                           tblptru	equ	0xFF8
   659                           tblptrh	equ	0xFF7
   660                           tblptrl	equ	0xFF6
   661                           tablat	equ	0xFF5
   662                           postinc0	equ	0xFEE
   663                           wreg	equ	0xFE8
   664                           
   665 ;;
   666 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   667 ;;
   668 ;; *************** function _main *****************
   669 ;; Defined at:
   670 ;;		line 39 in file "main.c"
   671 ;; Parameters:    Size  Location     Type
   672 ;;		None
   673 ;; Auto vars:     Size  Location     Type
   674 ;;  index           2   64[BANK0 ] unsigned int 
   675 ;;  i               2   68[BANK0 ] unsigned int 
   676 ;;  k               2   66[BANK0 ] unsigned int 
   677 ;; Return value:  Size  Location     Type
   678 ;;                  1    wreg      void 
   679 ;; Registers used:
   680 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   681 ;; Tracked objects:
   682 ;;		On entry : 0/0
   683 ;;		On exit  : 0/0
   684 ;;		Unchanged: 0/0
   685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   687 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   688 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   689 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   690 ;;Total ram usage:       10 bytes
   691 ;; Hardware stack levels required when called:    6
   692 ;; This function calls:
   693 ;;		_blink_LED
   694 ;;		_delay_ms
   695 ;;		_get_ID
   696 ;;		_init_interrupts
   697 ;;		_memset
   698 ;;		_read_AD7147
   699 ;;		_read_sensor
   700 ;;		_setup_AD7147
   701 ;;		_setup_mcu
   702 ;;		_setup_spi
   703 ;;		_switch_LED
   704 ;;		_uart_read_char
   705 ;;		_uart_read_indicator
   706 ;;		_uart_read_unsigned_int
   707 ;;		_uart_write_char
   708 ;;		_uart_write_unsigned_int
   709 ;; This function is called by:
   710 ;;		Startup code after reset
   711 ;; This function uses a non-reentrant model
   712 ;;
   713                           
   714                           	psect	text0
   715  000894                     __ptext0:
   716                           	opt stack 0
   717  000894                     _main:
   718                           	opt stack 25
   719                           
   720                           ;main.c: 41: delay_ms(500);
   721                           
   722                           ;incstack = 0
   723  000894  0E01               	movlw	1
   724  000896  0100               	movlb	0	; () banked
   725  000898  6FB5               	movwf	(delay_ms@n+1)& (0+255),b
   726  00089A  0EF4               	movlw	244
   727  00089C  6FB4               	movwf	delay_ms@n& (0+255),b
   728  00089E  EC42  F00A         	call	_delay_ms	;wreg free
   729                           
   730                           ;main.c: 42: setup_mcu();
   731  0008A2  EC57  F00B         	call	_setup_mcu	;wreg free
   732                           
   733                           ;main.c: 43: setup_spi();
   734  0008A6  EC2B  F00B         	call	_setup_spi	;wreg free
   735                           
   736                           ;main.c: 44: setup_AD7147(interrupt_values_cdc1, 1);
   737  0008AA  0E51               	movlw	low _interrupt_values_cdc1
   738  0008AC  0100               	movlb	0	; () banked
   739  0008AE  6FD4               	movwf	setup_AD7147@DataBuffer& (0+255),b
   740  0008B0  0E00               	movlw	high _interrupt_values_cdc1
   741  0008B2  0100               	movlb	0	; () banked
   742  0008B4  6FD5               	movwf	(setup_AD7147@DataBuffer+1)& (0+255),b
   743  0008B6  0E00               	movlw	0
   744  0008B8  0100               	movlb	0	; () banked
   745  0008BA  6FD7               	movwf	(setup_AD7147@cdc+1)& (0+255),b
   746  0008BC  0E01               	movlw	1
   747  0008BE  6FD6               	movwf	setup_AD7147@cdc& (0+255),b
   748  0008C0  EC79  F000         	call	_setup_AD7147	;wreg free
   749                           
   750                           ;main.c: 47: blink_LED(1);
   751  0008C4  0E00               	movlw	0
   752  0008C6  0100               	movlb	0	; () banked
   753  0008C8  6FC3               	movwf	(blink_LED@cdc+1)& (0+255),b
   754  0008CA  0E01               	movlw	1
   755  0008CC  6FC2               	movwf	blink_LED@cdc& (0+255),b
   756  0008CE  ECCB  F006         	call	_blink_LED	;wreg free
   757                           
   758                           ;main.c: 48: read_AD7147(interrupt_values_cdc1, 0x008, 3, 1);
   759  0008D2  0E51               	movlw	low _interrupt_values_cdc1
   760  0008D4  0100               	movlb	0	; () banked
   761  0008D6  6FC2               	movwf	read_AD7147@DataBuffer& (0+255),b
   762  0008D8  0E00               	movlw	high _interrupt_values_cdc1
   763  0008DA  0100               	movlb	0	; () banked
   764  0008DC  6FC3               	movwf	(read_AD7147@DataBuffer+1)& (0+255),b
   765  0008DE  0E00               	movlw	0
   766  0008E0  0100               	movlb	0	; () banked
   767  0008E2  6FC5               	movwf	(read_AD7147@RegisterStartAddress+1)& (0+255),b
   768  0008E4  0E08               	movlw	8
   769  0008E6  6FC4               	movwf	read_AD7147@RegisterStartAddress& (0+255),b
   770  0008E8  0E00               	movlw	0
   771  0008EA  0100               	movlb	0	; () banked
   772  0008EC  6FC7               	movwf	(read_AD7147@NumberOfRegisters+1)& (0+255),b
   773  0008EE  0E03               	movlw	3
   774  0008F0  6FC6               	movwf	read_AD7147@NumberOfRegisters& (0+255),b
   775  0008F2  0E00               	movlw	0
   776  0008F4  0100               	movlb	0	; () banked
   777  0008F6  6FC9               	movwf	(read_AD7147@cdc+1)& (0+255),b
   778  0008F8  0E01               	movlw	1
   779  0008FA  6FC8               	movwf	read_AD7147@cdc& (0+255),b
   780  0008FC  EC8C  F007         	call	_read_AD7147	;wreg free
   781                           
   782                           ;main.c: 49: init_interrupts();
   783  000900  ECF9  F00A         	call	_init_interrupts	;wreg free
   784  000904                     l2419:
   785                           
   786                           ;main.c: 51: {
   787                           ;main.c: 52: indicator = uart_read_char();
   788  000904  EC36  F00B         	call	_uart_read_char	;wreg free
   789  000908  0100               	movlb	0	; () banked
   790  00090A  6F7B               	movwf	_indicator& (0+255),b
   791                           
   792                           ;main.c: 53: switch (state)
   793  00090C  D163               	goto	l2523
   794  00090E                     l2421:
   795                           
   796                           ; BSR set to: 0
   797                           ;main.c: 59: single_sensor = uart_read_unsigned_int();
   798  00090E  ECAB  F00A         	call	_uart_read_unsigned_int	;wreg free
   799  000912  C0AC  F078         	movff	?_uart_read_unsigned_int,_single_sensor
   800  000916  C0AD  F079         	movff	?_uart_read_unsigned_int+1,_single_sensor+1
   801                           
   802                           ;main.c: 60: read_sensor(sensor_values, single_sensor);
   803  00091A  0E7C               	movlw	low _sensor_values
   804  00091C  0100               	movlb	0	; () banked
   805  00091E  6FC2               	movwf	read_sensor@sensor_values& (0+255),b
   806  000920  0E00               	movlw	high _sensor_values
   807  000922  0100               	movlb	0	; () banked
   808  000924  6FC3               	movwf	(read_sensor@sensor_values+1)& (0+255),b
   809  000926  C078  F0C4         	movff	_single_sensor,read_sensor@sensor
   810  00092A  C079  F0C5         	movff	_single_sensor+1,read_sensor@sensor+1
   811  00092E  EC62  F006         	call	_read_sensor	;wreg free
   812                           
   813                           ;main.c: 61: uart_write_unsigned_int(sensor_values[single_sensor]);
   814  000932  90D8               	bcf	status,0,c
   815  000934  0100               	movlb	0	; () banked
   816  000936  3578               	rlcf	_single_sensor& (0+255),w,b
   817  000938  6ED9               	movwf	fsr2l,c
   818  00093A  0100               	movlb	0	; () banked
   819  00093C  3579               	rlcf	(_single_sensor+1)& (0+255),w,b
   820  00093E  6EDA               	movwf	fsr2h,c
   821  000940  0E7C               	movlw	low _sensor_values
   822  000942  26D9               	addwf	fsr2l,f,c
   823  000944  0E00               	movlw	high _sensor_values
   824  000946  22DA               	addwfc	fsr2h,f,c
   825  000948  CFDE F0AC          	movff	postinc2,uart_write_unsigned_int@number
   826  00094C  CFDD F0AD          	movff	postdec2,uart_write_unsigned_int@number+1
   827  000950  EC1C  F00B         	call	_uart_write_unsigned_int	;wreg free
   828  000954  D12F               	goto	l2515
   829  000956                     l2429:
   830                           
   831                           ; BSR set to: 0
   832                           ;main.c: 65: cdc = uart_read_unsigned_int();
   833  000956  ECAB  F00A         	call	_uart_read_unsigned_int	;wreg free
   834  00095A  C0AC  F074         	movff	?_uart_read_unsigned_int,_cdc
   835  00095E  C0AD  F075         	movff	?_uart_read_unsigned_int+1,_cdc+1
   836                           
   837                           ;main.c: 66: blink_LED(cdc);
   838  000962  C074  F0C2         	movff	_cdc,blink_LED@cdc
   839  000966  C075  F0C3         	movff	_cdc+1,blink_LED@cdc+1
   840  00096A  ECCB  F006         	call	_blink_LED	;wreg free
   841  00096E  D122               	goto	l2515
   842  000970                     l2433:
   843                           
   844                           ; BSR set to: 0
   845                           ;main.c: 70: cdc = uart_read_unsigned_int();
   846  000970  ECAB  F00A         	call	_uart_read_unsigned_int	;wreg free
   847  000974  C0AC  F074         	movff	?_uart_read_unsigned_int,_cdc
   848  000978  C0AD  F075         	movff	?_uart_read_unsigned_int+1,_cdc+1
   849                           
   850                           ;main.c: 71: on_off = uart_read_unsigned_int();
   851  00097C  ECAB  F00A         	call	_uart_read_unsigned_int	;wreg free
   852  000980  C0AC  F072         	movff	?_uart_read_unsigned_int,_on_off
   853  000984  C0AD  F073         	movff	?_uart_read_unsigned_int+1,_on_off+1
   854                           
   855                           ;main.c: 72: switch_LED(cdc, on_off);
   856  000988  C074  F0C2         	movff	_cdc,switch_LED@cdc
   857  00098C  C075  F0C3         	movff	_cdc+1,switch_LED@cdc+1
   858  000990  C072  F0C4         	movff	_on_off,switch_LED@state
   859  000994  C073  F0C5         	movff	_on_off+1,switch_LED@state+1
   860  000998  EC33  F008         	call	_switch_LED	;wreg free
   861  00099C  D10B               	goto	l2515
   862  00099E                     l2437:
   863                           
   864                           ; BSR set to: 0
   865                           ;main.c: 76: cdc = uart_read_unsigned_int();
   866  00099E  ECAB  F00A         	call	_uart_read_unsigned_int	;wreg free
   867  0009A2  C0AC  F074         	movff	?_uart_read_unsigned_int,_cdc
   868  0009A6  C0AD  F075         	movff	?_uart_read_unsigned_int+1,_cdc+1
   869                           
   870                           ;main.c: 77: device_ID = get_ID(cdc);
   871  0009AA  C074  F0C2         	movff	_cdc,get_ID@cdc
   872  0009AE  C075  F0C3         	movff	_cdc+1,get_ID@cdc+1
   873  0009B2  ECB9  F009         	call	_get_ID	;wreg free
   874  0009B6  C0C2  F076         	movff	?_get_ID,_device_ID
   875  0009BA  C0C3  F077         	movff	?_get_ID+1,_device_ID+1
   876                           
   877                           ;main.c: 78: uart_write_unsigned_int(device_ID);
   878  0009BE  C076  F0AC         	movff	_device_ID,uart_write_unsigned_int@number
   879  0009C2  C077  F0AD         	movff	_device_ID+1,uart_write_unsigned_int@number+1
   880  0009C6  EC1C  F00B         	call	_uart_write_unsigned_int	;wreg free
   881  0009CA  D0F4               	goto	l2515
   882  0009CC                     l2445:
   883                           
   884                           ; BSR set to: 0
   885  0009CC  0100               	movlb	0	; () banked
   886  0009CE  517B               	movf	_indicator& (0+255),w,b
   887                           
   888                           ; Switch size 1, requested type "space"
   889                           ; Number of cases is 4, Range of values is 98 to 119
   890                           ; switch strategies available:
   891                           ; Name         Instructions Cycles
   892                           ; simple_byte           13     7 (average)
   893                           ;	Chosen strategy is simple_byte
   894  0009D0  0A62               	xorlw	98	; case 98
   895  0009D2  B4D8               	btfsc	status,2,c
   896  0009D4  D79C               	goto	l2421
   897  0009D6  0A04               	xorlw	4	; case 102
   898  0009D8  B4D8               	btfsc	status,2,c
   899  0009DA  D7BD               	goto	l2429
   900  0009DC  0A0E               	xorlw	14	; case 104
   901  0009DE  B4D8               	btfsc	status,2,c
   902  0009E0  D7C7               	goto	l2433
   903  0009E2  0A1F               	xorlw	31	; case 119
   904  0009E4  B4D8               	btfsc	status,2,c
   905  0009E6  D7DB               	goto	l2437
   906                           
   907                           ; BSR set to: 0
   908                           ;main.c: 82: break;
   909  0009E8  D78D               	goto	l2419
   910  0009EA                     l2447:
   911                           
   912                           ; BSR set to: 0
   913                           ;main.c: 88: single_sensor = uart_read_unsigned_int();
   914  0009EA  ECAB  F00A         	call	_uart_read_unsigned_int	;wreg free
   915  0009EE  C0AC  F078         	movff	?_uart_read_unsigned_int,_single_sensor
   916  0009F2  C0AD  F079         	movff	?_uart_read_unsigned_int+1,_single_sensor+1
   917                           
   918                           ;main.c: 89: read_sensor(sensor_values, single_sensor);
   919  0009F6  0E7C               	movlw	low _sensor_values
   920  0009F8  0100               	movlb	0	; () banked
   921  0009FA  6FC2               	movwf	read_sensor@sensor_values& (0+255),b
   922  0009FC  0E00               	movlw	high _sensor_values
   923  0009FE  0100               	movlb	0	; () banked
   924  000A00  6FC3               	movwf	(read_sensor@sensor_values+1)& (0+255),b
   925  000A02  C078  F0C4         	movff	_single_sensor,read_sensor@sensor
   926  000A06  C079  F0C5         	movff	_single_sensor+1,read_sensor@sensor+1
   927  000A0A  EC62  F006         	call	_read_sensor	;wreg free
   928                           
   929                           ;main.c: 90: uart_write_unsigned_int(sensor_values[single_sensor]);
   930  000A0E  90D8               	bcf	status,0,c
   931  000A10  0100               	movlb	0	; () banked
   932  000A12  3578               	rlcf	_single_sensor& (0+255),w,b
   933  000A14  6ED9               	movwf	fsr2l,c
   934  000A16  0100               	movlb	0	; () banked
   935  000A18  3579               	rlcf	(_single_sensor+1)& (0+255),w,b
   936  000A1A  6EDA               	movwf	fsr2h,c
   937  000A1C  0E7C               	movlw	low _sensor_values
   938  000A1E  26D9               	addwf	fsr2l,f,c
   939  000A20  0E00               	movlw	high _sensor_values
   940  000A22  22DA               	addwfc	fsr2h,f,c
   941  000A24  CFDE F0AC          	movff	postinc2,uart_write_unsigned_int@number
   942  000A28  CFDD F0AD          	movff	postdec2,uart_write_unsigned_int@number+1
   943  000A2C  EC1C  F00B         	call	_uart_write_unsigned_int	;wreg free
   944                           
   945                           ;main.c: 91: break;
   946  000A30  D769               	goto	l2419
   947  000A32                     l2453:
   948                           
   949                           ;main.c: 94: {
   950                           ;main.c: 95: uart_write_char('s');
   951  000A32  0E73               	movlw	115
   952  000A34  EC4A  F00B         	call	_uart_write_char
   953                           
   954                           ;main.c: 96: for(unsigned int i = 0; i<24; i++)
   955  000A38  0E00               	movlw	0
   956  000A3A  0100               	movlb	0	; () banked
   957  000A3C  6FF1               	movwf	(main@i+1)& (0+255),b
   958  000A3E  0E00               	movlw	0
   959  000A40  6FF0               	movwf	main@i& (0+255),b
   960  000A42                     l2457:
   961                           
   962                           ; BSR set to: 0
   963  000A42  0100               	movlb	0	; () banked
   964  000A44  51F1               	movf	(main@i+1)& (0+255),w,b
   965  000A46  E129               	bnz	l2469
   966  000A48  0E18               	movlw	24
   967  000A4A  0100               	movlb	0	; () banked
   968  000A4C  5DF0               	subwf	main@i& (0+255),w,b
   969  000A4E  B0D8               	btfsc	status,0,c
   970  000A50  D024               	goto	l2469
   971                           
   972                           ; BSR set to: 0
   973                           ;main.c: 97: {
   974                           ;main.c: 98: if(avail_sensors[i] == 1)
   975                           
   976                           ; BSR set to: 0
   977                           
   978                           ; BSR set to: 0
   979  000A52  90D8               	bcf	status,0,c
   980  000A54  0100               	movlb	0	; () banked
   981  000A56  35F0               	rlcf	main@i& (0+255),w,b
   982  000A58  6ED9               	movwf	fsr2l,c
   983  000A5A  0100               	movlb	0	; () banked
   984  000A5C  35F1               	rlcf	(main@i+1)& (0+255),w,b
   985  000A5E  6EDA               	movwf	fsr2h,c
   986  000A60  0E00               	movlw	low _avail_sensors
   987  000A62  26D9               	addwf	fsr2l,f,c
   988  000A64  0E01               	movlw	high _avail_sensors
   989  000A66  22DA               	addwfc	fsr2h,f,c
   990  000A68  04DE               	decf	postinc2,w,c
   991  000A6A  10DE               	iorwf	postinc2,w,c
   992  000A6C  A4D8               	btfss	status,2,c
   993  000A6E  D011               	goto	l2465
   994                           
   995                           ; BSR set to: 0
   996                           ;main.c: 99: {
   997                           ;main.c: 100: uart_write_unsigned_int(sensor_values[i]);
   998  000A70  90D8               	bcf	status,0,c
   999  000A72  0100               	movlb	0	; () banked
  1000  000A74  35F0               	rlcf	main@i& (0+255),w,b
  1001  000A76  6ED9               	movwf	fsr2l,c
  1002  000A78  0100               	movlb	0	; () banked
  1003  000A7A  35F1               	rlcf	(main@i+1)& (0+255),w,b
  1004  000A7C  6EDA               	movwf	fsr2h,c
  1005  000A7E  0E7C               	movlw	low _sensor_values
  1006  000A80  26D9               	addwf	fsr2l,f,c
  1007  000A82  0E00               	movlw	high _sensor_values
  1008  000A84  22DA               	addwfc	fsr2h,f,c
  1009  000A86  CFDE F0AC          	movff	postinc2,uart_write_unsigned_int@number
  1010  000A8A  CFDD F0AD          	movff	postdec2,uart_write_unsigned_int@number+1
  1011  000A8E  EC1C  F00B         	call	_uart_write_unsigned_int	;wreg free
  1012  000A92                     l2465:
  1013  000A92  0100               	movlb	0	; () banked
  1014  000A94  4BF0               	infsnz	main@i& (0+255),f,b
  1015  000A96  2BF1               	incf	(main@i+1)& (0+255),f,b
  1016  000A98  D7D4               	goto	l2457
  1017  000A9A                     l2469:
  1018                           
  1019                           ; BSR set to: 0
  1020                           ;main.c: 101: }
  1021                           ;main.c: 102: }
  1022                           ;main.c: 103: break_loop = uart_read_indicator();
  1023  000A9A  ECEF  F009         	call	_uart_read_indicator	;wreg free
  1024  000A9E  0100               	movlb	0	; () banked
  1025  000AA0  6F7A               	movwf	_break_loop& (0+255),b
  1026                           
  1027                           ; BSR set to: 0
  1028                           ;main.c: 104: if(break_loop == 'z')
  1029  000AA2  0E7A               	movlw	122
  1030  000AA4  0100               	movlb	0	; () banked
  1031  000AA6  197A               	xorwf	_break_loop& (0+255),w,b
  1032  000AA8  A4D8               	btfss	status,2,c
  1033  000AAA  D008               	goto	l2475
  1034                           
  1035                           ; BSR set to: 0
  1036                           ;main.c: 105: {
  1037                           ;main.c: 106: start_stop = 0;
  1038  000AAC  0E00               	movlw	0
  1039  000AAE  0100               	movlb	0	; () banked
  1040  000AB0  6FF3               	movwf	(_start_stop+1)& (0+255),b
  1041  000AB2  0E00               	movlw	0
  1042  000AB4  6FF2               	movwf	_start_stop& (0+255),b
  1043                           
  1044                           ;main.c: 107: state = 'r';
  1045  000AB6  0E72               	movlw	114
  1046  000AB8  0100               	movlb	0	; () banked
  1047  000ABA  6FF4               	movwf	_state& (0+255),b
  1048  000ABC                     l2475:
  1049  000ABC  0100               	movlb	0	; () banked
  1050  000ABE  05F2               	decf	_start_stop& (0+255),w,b
  1051  000AC0  0100               	movlb	0	; () banked
  1052  000AC2  11F3               	iorwf	(_start_stop+1)& (0+255),w,b
  1053  000AC4  B4D8               	btfsc	status,2,c
  1054  000AC6  D7B5               	goto	l2453
  1055                           
  1056                           ; BSR set to: 0
  1057                           ;main.c: 108: }
  1058                           ;main.c: 109: }
  1059                           ;main.c: 110: start_stop = 1;
  1060                           
  1061                           ; BSR set to: 0
  1062  000AC8  0E00               	movlw	0
  1063  000ACA  0100               	movlb	0	; () banked
  1064  000ACC  6FF3               	movwf	(_start_stop+1)& (0+255),b
  1065  000ACE  0E01               	movlw	1
  1066  000AD0  6FF2               	movwf	_start_stop& (0+255),b
  1067                           
  1068                           ;main.c: 111: break;
  1069  000AD2  D718               	goto	l2419
  1070  000AD4                     l2483:
  1071                           
  1072                           ; BSR set to: 0
  1073  000AD4  0100               	movlb	0	; () banked
  1074  000AD6  517B               	movf	_indicator& (0+255),w,b
  1075                           
  1076                           ; Switch size 1, requested type "space"
  1077                           ; Number of cases is 2, Range of values is 117 to 118
  1078                           ; switch strategies available:
  1079                           ; Name         Instructions Cycles
  1080                           ; simple_byte            7     4 (average)
  1081                           ;	Chosen strategy is simple_byte
  1082  000AD8  0A75               	xorlw	117	; case 117
  1083  000ADA  B4D8               	btfsc	status,2,c
  1084  000ADC  D786               	goto	l2447
  1085  000ADE  0A03               	xorlw	3	; case 118
  1086  000AE0  B4D8               	btfsc	status,2,c
  1087  000AE2  D7EC               	goto	l2475
  1088  000AE4  D067               	goto	l2515
  1089  000AE6                     l2485:
  1090                           
  1091                           ; BSR set to: 0
  1092                           ;main.c: 122: memset(avail_sensors, 0, 24*sizeof(avail_sensors[0]));
  1093  000AE6  0E00               	movlw	low _avail_sensors
  1094  000AE8  0100               	movlb	0	; () banked
  1095  000AEA  6FAC               	movwf	memset@p1& (0+255),b
  1096  000AEC  0E01               	movlw	high _avail_sensors
  1097  000AEE  0100               	movlb	0	; () banked
  1098  000AF0  6FAD               	movwf	(memset@p1+1)& (0+255),b
  1099  000AF2  0E00               	movlw	0
  1100  000AF4  0100               	movlb	0	; () banked
  1101  000AF6  6FAF               	movwf	(memset@c+1)& (0+255),b
  1102  000AF8  0E00               	movlw	0
  1103  000AFA  6FAE               	movwf	memset@c& (0+255),b
  1104  000AFC  0E00               	movlw	0
  1105  000AFE  0100               	movlb	0	; () banked
  1106  000B00  6FB1               	movwf	(memset@n+1)& (0+255),b
  1107  000B02  0E30               	movlw	48
  1108  000B04  6FB0               	movwf	memset@n& (0+255),b
  1109  000B06  ECCA  F00A         	call	_memset	;wreg free
  1110                           
  1111                           ;main.c: 123: num_sensors = uart_read_unsigned_int();
  1112  000B0A  ECAB  F00A         	call	_uart_read_unsigned_int	;wreg free
  1113  000B0E  C0AC  F070         	movff	?_uart_read_unsigned_int,_num_sensors
  1114  000B12  C0AD  F071         	movff	?_uart_read_unsigned_int+1,_num_sensors+1
  1115                           
  1116                           ;main.c: 124: for(unsigned int k = 0; k < num_sensors; k++)
  1117  000B16  0E00               	movlw	0
  1118  000B18  0100               	movlb	0	; () banked
  1119  000B1A  6FEF               	movwf	(main@k+1)& (0+255),b
  1120  000B1C  0E00               	movlw	0
  1121  000B1E  6FEE               	movwf	main@k& (0+255),b
  1122  000B20  D02B               	goto	l2497
  1123  000B22                     l2491:
  1124                           
  1125                           ; BSR set to: 0
  1126                           ;main.c: 125: {
  1127                           ;main.c: 126: unsigned int index = uart_read_unsigned_int();
  1128  000B22  ECAB  F00A         	call	_uart_read_unsigned_int	;wreg free
  1129  000B26  C0AC  F0EC         	movff	?_uart_read_unsigned_int,main@index
  1130  000B2A  C0AD  F0ED         	movff	?_uart_read_unsigned_int+1,main@index+1
  1131                           
  1132                           ;main.c: 127: avail_sensors[index-1] = 1;
  1133  000B2E  0EFE               	movlw	254
  1134  000B30  0100               	movlb	0	; () banked
  1135  000B32  6FE8               	movwf	??_main& (0+255),b
  1136  000B34  0EFF               	movlw	255
  1137  000B36  0100               	movlb	0	; () banked
  1138  000B38  6FE9               	movwf	(??_main+1)& (0+255),b
  1139  000B3A  C0EC  F0EA         	movff	main@index,??_main+2
  1140  000B3E  C0ED  F0EB         	movff	main@index+1,??_main+3
  1141  000B42  90D8               	bcf	status,0,c
  1142  000B44  0100               	movlb	0	; () banked
  1143  000B46  37EA               	rlcf	(??_main+2)& (0+255),f,b
  1144  000B48  37EB               	rlcf	(??_main+3)& (0+255),f,b
  1145  000B4A  0100               	movlb	0	; () banked
  1146  000B4C  51E8               	movf	??_main& (0+255),w,b
  1147  000B4E  0100               	movlb	0	; () banked
  1148  000B50  27EA               	addwf	(??_main+2)& (0+255),f,b
  1149  000B52  0100               	movlb	0	; () banked
  1150  000B54  51E9               	movf	(??_main+1)& (0+255),w,b
  1151  000B56  0100               	movlb	0	; () banked
  1152  000B58  23EB               	addwfc	(??_main+3)& (0+255),f,b
  1153  000B5A  0E00               	movlw	low _avail_sensors
  1154  000B5C  0100               	movlb	0	; () banked
  1155  000B5E  25EA               	addwf	(??_main+2)& (0+255),w,b
  1156  000B60  6ED9               	movwf	fsr2l,c
  1157  000B62  0E01               	movlw	high _avail_sensors
  1158  000B64  0100               	movlb	0	; () banked
  1159  000B66  21EB               	addwfc	(??_main+3)& (0+255),w,b
  1160  000B68  6EDA               	movwf	fsr2h,c
  1161  000B6A  0E01               	movlw	1
  1162  000B6C  6EDE               	movwf	postinc2,c
  1163  000B6E  0E00               	movlw	0
  1164  000B70  6EDD               	movwf	postdec2,c
  1165                           
  1166                           ; BSR set to: 0
  1167  000B72  0100               	movlb	0	; () banked
  1168  000B74  4BEE               	infsnz	main@k& (0+255),f,b
  1169  000B76  2BEF               	incf	(main@k+1)& (0+255),f,b
  1170  000B78                     l2497:
  1171                           
  1172                           ; BSR set to: 0
  1173  000B78  0100               	movlb	0	; () banked
  1174  000B7A  5170               	movf	_num_sensors& (0+255),w,b
  1175  000B7C  0100               	movlb	0	; () banked
  1176  000B7E  5DEE               	subwf	main@k& (0+255),w,b
  1177  000B80  0100               	movlb	0	; () banked
  1178  000B82  5171               	movf	(_num_sensors+1)& (0+255),w,b
  1179  000B84  0100               	movlb	0	; () banked
  1180  000B86  59EF               	subwfb	(main@k+1)& (0+255),w,b
  1181  000B88  B0D8               	btfsc	status,0,c
  1182  000B8A  D014               	goto	l2515
  1183  000B8C  D7CA               	goto	l2491
  1184  000B8E                     l2501:
  1185                           
  1186                           ; BSR set to: 0
  1187                           ;main.c: 132: uart_write_char('e');
  1188  000B8E  0E65               	movlw	101
  1189  000B90  EC4A  F00B         	call	_uart_write_char
  1190  000B94  D00F               	goto	l2515
  1191  000B96                     l2507:
  1192                           
  1193                           ; BSR set to: 0
  1194  000B96  0100               	movlb	0	; () banked
  1195  000B98  517B               	movf	_indicator& (0+255),w,b
  1196                           
  1197                           ; Switch size 1, requested type "space"
  1198                           ; Number of cases is 2, Range of values is 101 to 110
  1199                           ; switch strategies available:
  1200                           ; Name         Instructions Cycles
  1201                           ; simple_byte            7     4 (average)
  1202                           ;	Chosen strategy is simple_byte
  1203  000B9A  0A65               	xorlw	101	; case 101
  1204  000B9C  B4D8               	btfsc	status,2,c
  1205  000B9E  D7F7               	goto	l2501
  1206  000BA0  0A0B               	xorlw	11	; case 110
  1207  000BA2  B4D8               	btfsc	status,2,c
  1208  000BA4  D7A0               	goto	l2485
  1209                           
  1210                           ; BSR set to: 0
  1211                           ;main.c: 138: break;
  1212  000BA6  D6AE               	goto	l2419
  1213  000BA8                     l2509:
  1214                           
  1215                           ; BSR set to: 0
  1216                           ;main.c: 144: state = 's';
  1217  000BA8  0E73               	movlw	115
  1218  000BAA  D005               	goto	L4
  1219  000BAC                     l2511:
  1220                           
  1221                           ; BSR set to: 0
  1222                           ;main.c: 147: state = 'c';
  1223  000BAC  0E63               	movlw	99
  1224  000BAE  D003               	goto	L4
  1225  000BB0                     l2513:
  1226                           
  1227                           ; BSR set to: 0
  1228                           ;main.c: 150: state = 'p';
  1229  000BB0  0E70               	movlw	112
  1230  000BB2  D001               	goto	L4
  1231  000BB4                     l2515:
  1232                           
  1233                           ; BSR set to: 0
  1234                           ;main.c: 153: state = 'r';
  1235  000BB4  0E72               	movlw	114
  1236  000BB6                     L4:
  1237  000BB6  0100               	movlb	0	; () banked
  1238  000BB8  6FF4               	movwf	_state& (0+255),b
  1239                           
  1240                           ; BSR set to: 0
  1241                           ;main.c: 155: }
  1242                           
  1243                           ;main.c: 154: break;
  1244  000BBA  D6A4               	goto	l2419
  1245  000BBC                     l2519:
  1246                           
  1247                           ; BSR set to: 0
  1248  000BBC  0100               	movlb	0	; () banked
  1249  000BBE  517B               	movf	_indicator& (0+255),w,b
  1250                           
  1251                           ; Switch size 1, requested type "space"
  1252                           ; Number of cases is 3, Range of values is 99 to 115
  1253                           ; switch strategies available:
  1254                           ; Name         Instructions Cycles
  1255                           ; simple_byte           10     6 (average)
  1256                           ;	Chosen strategy is simple_byte
  1257  000BC0  0A63               	xorlw	99	; case 99
  1258  000BC2  B4D8               	btfsc	status,2,c
  1259  000BC4  D7F3               	goto	l2511
  1260  000BC6  0A13               	xorlw	19	; case 112
  1261  000BC8  B4D8               	btfsc	status,2,c
  1262  000BCA  D7F2               	goto	l2513
  1263  000BCC  0A03               	xorlw	3	; case 115
  1264  000BCE  B4D8               	btfsc	status,2,c
  1265  000BD0  D7EB               	goto	l2509
  1266  000BD2  D7F0               	goto	l2515
  1267  000BD4                     l2523:
  1268                           
  1269                           ; BSR set to: 0
  1270  000BD4  0100               	movlb	0	; () banked
  1271  000BD6  51F4               	movf	_state& (0+255),w,b
  1272                           
  1273                           ; Switch size 1, requested type "space"
  1274                           ; Number of cases is 4, Range of values is 99 to 115
  1275                           ; switch strategies available:
  1276                           ; Name         Instructions Cycles
  1277                           ; simple_byte           13     7 (average)
  1278                           ;	Chosen strategy is simple_byte
  1279  000BD8  0A63               	xorlw	99	; case 99
  1280  000BDA  B4D8               	btfsc	status,2,c
  1281  000BDC  D77B               	goto	l2483
  1282  000BDE  0A13               	xorlw	19	; case 112
  1283  000BE0  B4D8               	btfsc	status,2,c
  1284  000BE2  D7D9               	goto	l2507
  1285  000BE4  0A02               	xorlw	2	; case 114
  1286  000BE6  B4D8               	btfsc	status,2,c
  1287  000BE8  D7E9               	goto	l2519
  1288  000BEA  0A01               	xorlw	1	; case 115
  1289  000BEC  B4D8               	btfsc	status,2,c
  1290  000BEE  D6EE               	goto	l2445
  1291                           
  1292                           ; BSR set to: 0
  1293                           
  1294                           ; BSR set to: 0
  1295  000BF0  D689               	goto	l2419
  1296  000BF2                     __end_of_main:
  1297                           	opt stack 0
  1298                           tblptru	equ	0xFF8
  1299                           tblptrh	equ	0xFF7
  1300                           tblptrl	equ	0xFF6
  1301                           tablat	equ	0xFF5
  1302                           postinc0	equ	0xFEE
  1303                           wreg	equ	0xFE8
  1304                           postinc2	equ	0xFDE
  1305                           postdec2	equ	0xFDD
  1306                           fsr2h	equ	0xFDA
  1307                           fsr2l	equ	0xFD9
  1308                           status	equ	0xFD8
  1309                           
  1310 ;; *************** function _uart_write_unsigned_int *****************
  1311 ;; Defined at:
  1312 ;;		line 39 in file "uart.c"
  1313 ;; Parameters:    Size  Location     Type
  1314 ;;  number          2    0[BANK0 ] unsigned int 
  1315 ;; Auto vars:     Size  Location     Type
  1316 ;;  char2           1    3[BANK0 ] unsigned char 
  1317 ;;  char1           1    2[BANK0 ] unsigned char 
  1318 ;; Return value:  Size  Location     Type
  1319 ;;                  1    wreg      void 
  1320 ;; Registers used:
  1321 ;;		wreg, status,2
  1322 ;; Tracked objects:
  1323 ;;		On entry : 0/0
  1324 ;;		On exit  : 0/0
  1325 ;;		Unchanged: 0/0
  1326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1327 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1328 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1330 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1331 ;;Total ram usage:        4 bytes
  1332 ;; Hardware stack levels used:    1
  1333 ;; Hardware stack levels required when called:    3
  1334 ;; This function calls:
  1335 ;;		Nothing
  1336 ;; This function is called by:
  1337 ;;		_main
  1338 ;;		_uart_send_sensors
  1339 ;; This function uses a non-reentrant model
  1340 ;;
  1341                           
  1342                           	psect	text1
  1343  001638                     __ptext1:
  1344                           	opt stack 0
  1345  001638                     _uart_write_unsigned_int:
  1346                           	opt stack 27
  1347                           
  1348                           ;uart.c: 41: char char1 = number & 0xFF;
  1349                           
  1350                           ; BSR set to: 0
  1351                           ;incstack = 0
  1352  001638  C0AC  F0AE         	movff	uart_write_unsigned_int@number,uart_write_unsigned_int@char1
  1353                           
  1354                           ;uart.c: 42: char char2 = number >> 8;
  1355  00163C  0100               	movlb	0	; () banked
  1356  00163E  51AD               	movf	(uart_write_unsigned_int@number+1)& (0+255),w,b
  1357  001640  0100               	movlb	0	; () banked
  1358  001642  6FAF               	movwf	uart_write_unsigned_int@char2& (0+255),b
  1359  001644                     l346:
  1360  001644  A2AC               	btfss	4012,1,c	;volatile
  1361  001646  D7FE               	goto	l346
  1362                           
  1363                           ;uart.c: 45: TXREG1 = char1;
  1364  001648  C0AE  FFAD         	movff	uart_write_unsigned_int@char1,4013	;volatile
  1365  00164C                     l349:
  1366  00164C  A2AC               	btfss	4012,1,c	;volatile
  1367  00164E  D7FE               	goto	l349
  1368                           
  1369                           ;uart.c: 47: TXREG1 = char2;
  1370  001650  C0AF  FFAD         	movff	uart_write_unsigned_int@char2,4013	;volatile
  1371  001654  0012               	return		;funcret
  1372  001656                     __end_of_uart_write_unsigned_int:
  1373                           	opt stack 0
  1374                           tblptru	equ	0xFF8
  1375                           tblptrh	equ	0xFF7
  1376                           tblptrl	equ	0xFF6
  1377                           tablat	equ	0xFF5
  1378                           postinc0	equ	0xFEE
  1379                           wreg	equ	0xFE8
  1380                           postinc2	equ	0xFDE
  1381                           postdec2	equ	0xFDD
  1382                           fsr2h	equ	0xFDA
  1383                           fsr2l	equ	0xFD9
  1384                           status	equ	0xFD8
  1385                           
  1386 ;; *************** function _uart_write_char *****************
  1387 ;; Defined at:
  1388 ;;		line 24 in file "uart.c"
  1389 ;; Parameters:    Size  Location     Type
  1390 ;;  data            1    wreg     unsigned char 
  1391 ;; Auto vars:     Size  Location     Type
  1392 ;;  data            1    0[BANK0 ] unsigned char 
  1393 ;; Return value:  Size  Location     Type
  1394 ;;                  1    wreg      void 
  1395 ;; Registers used:
  1396 ;;		wreg
  1397 ;; Tracked objects:
  1398 ;;		On entry : 0/0
  1399 ;;		On exit  : 0/0
  1400 ;;		Unchanged: 0/0
  1401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1403 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1405 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1406 ;;Total ram usage:        1 bytes
  1407 ;; Hardware stack levels used:    1
  1408 ;; Hardware stack levels required when called:    3
  1409 ;; This function calls:
  1410 ;;		Nothing
  1411 ;; This function is called by:
  1412 ;;		_main
  1413 ;;		_uart_write_string
  1414 ;; This function uses a non-reentrant model
  1415 ;;
  1416                           
  1417                           	psect	text2
  1418  001694                     __ptext2:
  1419                           	opt stack 0
  1420  001694                     _uart_write_char:
  1421                           	opt stack 27
  1422                           
  1423                           ;incstack = 0
  1424                           ;uart_write_char@data stored from wreg
  1425  001694  0100               	movlb	0	; () banked
  1426  001696  6FAC               	movwf	uart_write_char@data& (0+255),b
  1427  001698                     l334:
  1428  001698  A2AC               	btfss	4012,1,c	;volatile
  1429  00169A  D7FE               	goto	l334
  1430                           
  1431                           ;uart.c: 28: TXREG1 = data;
  1432  00169C  C0AC  FFAD         	movff	uart_write_char@data,4013	;volatile
  1433  0016A0  0012               	return		;funcret
  1434  0016A2                     __end_of_uart_write_char:
  1435                           	opt stack 0
  1436                           tblptru	equ	0xFF8
  1437                           tblptrh	equ	0xFF7
  1438                           tblptrl	equ	0xFF6
  1439                           tablat	equ	0xFF5
  1440                           postinc0	equ	0xFEE
  1441                           wreg	equ	0xFE8
  1442                           postinc2	equ	0xFDE
  1443                           postdec2	equ	0xFDD
  1444                           fsr2h	equ	0xFDA
  1445                           fsr2l	equ	0xFD9
  1446                           status	equ	0xFD8
  1447                           
  1448 ;; *************** function _uart_read_unsigned_int *****************
  1449 ;; Defined at:
  1450 ;;		line 131 in file "uart.c"
  1451 ;; Parameters:    Size  Location     Type
  1452 ;;		None
  1453 ;; Auto vars:     Size  Location     Type
  1454 ;;  message         2    4[BANK0 ] unsigned int 
  1455 ;;  part2           1    7[BANK0 ] unsigned char 
  1456 ;;  part1           1    6[BANK0 ] unsigned char 
  1457 ;; Return value:  Size  Location     Type
  1458 ;;                  2    0[BANK0 ] unsigned int 
  1459 ;; Registers used:
  1460 ;;		wreg, status,2, status,0, cstack
  1461 ;; Tracked objects:
  1462 ;;		On entry : 0/0
  1463 ;;		On exit  : 0/0
  1464 ;;		Unchanged: 0/0
  1465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1466 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1467 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1468 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1469 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1470 ;;Total ram usage:        8 bytes
  1471 ;; Hardware stack levels used:    1
  1472 ;; Hardware stack levels required when called:    4
  1473 ;; This function calls:
  1474 ;;		_uart_read_char
  1475 ;; This function is called by:
  1476 ;;		_main
  1477 ;; This function uses a non-reentrant model
  1478 ;;
  1479                           
  1480                           	psect	text3
  1481  001556                     __ptext3:
  1482                           	opt stack 0
  1483  001556                     _uart_read_unsigned_int:
  1484                           	opt stack 26
  1485                           
  1486                           ;uart.c: 133: unsigned char part1 = uart_read_char();
  1487                           
  1488                           ;incstack = 0
  1489  001556  EC36  F00B         	call	_uart_read_char	;wreg free
  1490  00155A  0100               	movlb	0	; () banked
  1491  00155C  6FB2               	movwf	uart_read_unsigned_int@part1& (0+255),b
  1492                           
  1493                           ;uart.c: 134: unsigned char part2 = uart_read_char();
  1494  00155E  EC36  F00B         	call	_uart_read_char	;wreg free
  1495  001562  0100               	movlb	0	; () banked
  1496  001564  6FB3               	movwf	uart_read_unsigned_int@part2& (0+255),b
  1497                           
  1498                           ; BSR set to: 0
  1499                           ;uart.c: 135: unsigned int message = (unsigned int)((part1 << 8) | part2);
  1500  001566  0100               	movlb	0	; () banked
  1501  001568  51B3               	movf	uart_read_unsigned_int@part2& (0+255),w,b
  1502  00156A  C0B2  F0AE         	movff	uart_read_unsigned_int@part1,??_uart_read_unsigned_int
  1503  00156E  0100               	movlb	0	; () banked
  1504  001570  6BAF               	clrf	(??_uart_read_unsigned_int+1)& (0+255),b
  1505  001572  C0AE  F0AF         	movff	??_uart_read_unsigned_int,??_uart_read_unsigned_int+1
  1506  001576  0100               	movlb	0	; () banked
  1507  001578  6BAE               	clrf	??_uart_read_unsigned_int& (0+255),b
  1508  00157A  0100               	movlb	0	; () banked
  1509  00157C  11AE               	iorwf	??_uart_read_unsigned_int& (0+255),w,b
  1510  00157E  0100               	movlb	0	; () banked
  1511  001580  6FB0               	movwf	uart_read_unsigned_int@message& (0+255),b
  1512  001582  0100               	movlb	0	; () banked
  1513  001584  51AF               	movf	(??_uart_read_unsigned_int+1)& (0+255),w,b
  1514  001586  0100               	movlb	0	; () banked
  1515  001588  6FB1               	movwf	(uart_read_unsigned_int@message+1)& (0+255),b
  1516                           
  1517                           ; BSR set to: 0
  1518                           ;uart.c: 136: return message;
  1519  00158A  C0B0  F0AC         	movff	uart_read_unsigned_int@message,?_uart_read_unsigned_int
  1520  00158E  C0B1  F0AD         	movff	uart_read_unsigned_int@message+1,?_uart_read_unsigned_int+1
  1521  001592  0012               	return	
  1522  001594                     __end_of_uart_read_unsigned_int:
  1523                           	opt stack 0
  1524                           tblptru	equ	0xFF8
  1525                           tblptrh	equ	0xFF7
  1526                           tblptrl	equ	0xFF6
  1527                           tablat	equ	0xFF5
  1528                           postinc0	equ	0xFEE
  1529                           wreg	equ	0xFE8
  1530                           postinc2	equ	0xFDE
  1531                           postdec2	equ	0xFDD
  1532                           fsr2h	equ	0xFDA
  1533                           fsr2l	equ	0xFD9
  1534                           status	equ	0xFD8
  1535                           
  1536 ;; *************** function _uart_read_char *****************
  1537 ;; Defined at:
  1538 ;;		line 94 in file "uart.c"
  1539 ;; Parameters:    Size  Location     Type
  1540 ;;		None
  1541 ;; Auto vars:     Size  Location     Type
  1542 ;;		None
  1543 ;; Return value:  Size  Location     Type
  1544 ;;                  1    wreg      unsigned char 
  1545 ;; Registers used:
  1546 ;;		wreg, status,2
  1547 ;; Tracked objects:
  1548 ;;		On entry : 0/0
  1549 ;;		On exit  : 0/0
  1550 ;;		Unchanged: 0/0
  1551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1555 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1556 ;;Total ram usage:        0 bytes
  1557 ;; Hardware stack levels used:    1
  1558 ;; Hardware stack levels required when called:    3
  1559 ;; This function calls:
  1560 ;;		Nothing
  1561 ;; This function is called by:
  1562 ;;		_main
  1563 ;;		_uart_read_unsigned_int
  1564 ;; This function uses a non-reentrant model
  1565 ;;
  1566                           
  1567                           	psect	text4
  1568  00166C                     __ptext4:
  1569                           	opt stack 0
  1570  00166C                     _uart_read_char:
  1571                           	opt stack 26
  1572                           
  1573                           ;uart.c: 96: while(PIR1bits.RC1IF == 0)
  1574                           
  1575                           ; BSR set to: 0
  1576                           ;incstack = 0
  1577  00166C  D005               	goto	l385
  1578  00166E                     l386:
  1579                           
  1580                           ;uart.c: 97: {
  1581                           ;uart.c: 98: if(RCSTA1bits.OERR == 1)
  1582  00166E  A2AB               	btfss	4011,1,c	;volatile
  1583  001670  D003               	goto	l385
  1584                           
  1585                           ;uart.c: 99: {
  1586                           ;uart.c: 100: RCSTA1bits.OERR = 0;
  1587  001672  92AB               	bcf	4011,1,c	;volatile
  1588                           
  1589                           ;uart.c: 101: RCSTA1bits.CREN = 0;
  1590  001674  98AB               	bcf	4011,4,c	;volatile
  1591                           
  1592                           ;uart.c: 102: RCSTA1bits.CREN = 1;
  1593  001676  88AB               	bsf	4011,4,c	;volatile
  1594  001678                     l385:
  1595  001678  AA9E               	btfss	3998,5,c	;volatile
  1596  00167A  D7F9               	goto	l386
  1597                           
  1598                           ;uart.c: 103: }
  1599                           ;uart.c: 104: }
  1600                           ;uart.c: 105: return RCREG1;
  1601  00167C  50AE               	movf	4014,w,c	;volatile
  1602  00167E  0012               	return	
  1603  001680                     __end_of_uart_read_char:
  1604                           	opt stack 0
  1605                           tblptru	equ	0xFF8
  1606                           tblptrh	equ	0xFF7
  1607                           tblptrl	equ	0xFF6
  1608                           tablat	equ	0xFF5
  1609                           postinc0	equ	0xFEE
  1610                           wreg	equ	0xFE8
  1611                           postinc2	equ	0xFDE
  1612                           postdec2	equ	0xFDD
  1613                           fsr2h	equ	0xFDA
  1614                           fsr2l	equ	0xFD9
  1615                           status	equ	0xFD8
  1616                           
  1617 ;; *************** function _uart_read_indicator *****************
  1618 ;; Defined at:
  1619 ;;		line 108 in file "uart.c"
  1620 ;; Parameters:    Size  Location     Type
  1621 ;;		None
  1622 ;; Auto vars:     Size  Location     Type
  1623 ;;  count           2    0[BANK0 ] unsigned int 
  1624 ;; Return value:  Size  Location     Type
  1625 ;;                  1    wreg      unsigned char 
  1626 ;; Registers used:
  1627 ;;		wreg, status,2, status,0
  1628 ;; Tracked objects:
  1629 ;;		On entry : 0/0
  1630 ;;		On exit  : 0/0
  1631 ;;		Unchanged: 0/0
  1632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1634 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1636 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1637 ;;Total ram usage:        2 bytes
  1638 ;; Hardware stack levels used:    1
  1639 ;; Hardware stack levels required when called:    3
  1640 ;; This function calls:
  1641 ;;		Nothing
  1642 ;; This function is called by:
  1643 ;;		_main
  1644 ;; This function uses a non-reentrant model
  1645 ;;
  1646                           
  1647                           	psect	text5
  1648  0013DE                     __ptext5:
  1649                           	opt stack 0
  1650  0013DE                     _uart_read_indicator:
  1651                           	opt stack 27
  1652                           
  1653                           ;uart.c: 110: unsigned int count = 0;
  1654                           
  1655                           ;incstack = 0
  1656  0013DE  0E00               	movlw	0
  1657  0013E0  0100               	movlb	0	; () banked
  1658  0013E2  6FAD               	movwf	(uart_read_indicator@count+1)& (0+255),b
  1659  0013E4  0E00               	movlw	0
  1660  0013E6  6FAC               	movwf	uart_read_indicator@count& (0+255),b
  1661                           
  1662                           ;uart.c: 111: while(PIR1bits.RC1IF == 0 && count < 5)
  1663  0013E8  D00F               	goto	l2331
  1664  0013EA                     l393:
  1665                           
  1666                           ; BSR set to: 0
  1667                           ;uart.c: 112: {
  1668                           ;uart.c: 113: if(RCSTA1bits.OERR == 1)
  1669  0013EA  A2AB               	btfss	4011,1,c	;volatile
  1670  0013EC  D003               	goto	l2329
  1671                           
  1672                           ; BSR set to: 0
  1673                           ;uart.c: 114: {
  1674                           ;uart.c: 115: RCSTA1bits.OERR = 0;
  1675  0013EE  92AB               	bcf	4011,1,c	;volatile
  1676                           
  1677                           ;uart.c: 116: RCSTA1bits.CREN = 0;
  1678  0013F0  98AB               	bcf	4011,4,c	;volatile
  1679                           
  1680                           ;uart.c: 117: RCSTA1bits.CREN = 1;
  1681  0013F2  88AB               	bsf	4011,4,c	;volatile
  1682  0013F4                     l2329:
  1683                           
  1684                           ; BSR set to: 0
  1685                           ;uart.c: 118: }
  1686                           ;uart.c: 119: count = count + 1;
  1687  0013F4  0E01               	movlw	1
  1688  0013F6  0100               	movlb	0	; () banked
  1689  0013F8  25AC               	addwf	uart_read_indicator@count& (0+255),w,b
  1690  0013FA  0100               	movlb	0	; () banked
  1691  0013FC  6FAC               	movwf	uart_read_indicator@count& (0+255),b
  1692  0013FE  0E00               	movlw	0
  1693  001400  0100               	movlb	0	; () banked
  1694  001402  21AD               	addwfc	(uart_read_indicator@count+1)& (0+255),w,b
  1695  001404  0100               	movlb	0	; () banked
  1696  001406  6FAD               	movwf	(uart_read_indicator@count+1)& (0+255),b
  1697  001408                     l2331:
  1698                           
  1699                           ; BSR set to: 0
  1700  001408  BA9E               	btfsc	3998,5,c	;volatile
  1701  00140A  D008               	goto	l2335
  1702                           
  1703                           ; BSR set to: 0
  1704  00140C  0100               	movlb	0	; () banked
  1705  00140E  51AD               	movf	(uart_read_indicator@count+1)& (0+255),w,b
  1706  001410  E105               	bnz	l2335
  1707  001412  0E05               	movlw	5
  1708  001414  0100               	movlb	0	; () banked
  1709  001416  5DAC               	subwf	uart_read_indicator@count& (0+255),w,b
  1710  001418  A0D8               	btfss	status,0,c
  1711  00141A  D7E7               	goto	l393
  1712  00141C                     l2335:
  1713                           
  1714                           ; BSR set to: 0
  1715                           ;uart.c: 120: }
  1716                           ;uart.c: 121: if(count >= 5)
  1717  00141C  0100               	movlb	0	; () banked
  1718  00141E  51AD               	movf	(uart_read_indicator@count+1)& (0+255),w,b
  1719  001420  E105               	bnz	u1130
  1720  001422  0E05               	movlw	5
  1721  001424  0100               	movlb	0	; () banked
  1722  001426  5DAC               	subwf	uart_read_indicator@count& (0+255),w,b
  1723  001428  A0D8               	btfss	status,0,c
  1724  00142A  D002               	goto	l2343
  1725  00142C                     u1130:
  1726                           
  1727                           ; BSR set to: 0
  1728                           ;uart.c: 122: {
  1729                           ;uart.c: 123: return 0;
  1730  00142C  0E00               	movlw	0
  1731                           
  1732                           ; BSR set to: 0
  1733                           ;uart.c: 124: }
  1734                           
  1735                           ; BSR set to: 0
  1736  00142E  0012               	return	
  1737  001430                     l2343:
  1738                           
  1739                           ; BSR set to: 0
  1740                           ;uart.c: 125: else
  1741                           ;uart.c: 126: {
  1742                           ;uart.c: 127: return RCREG1;
  1743  001430  50AE               	movf	4014,w,c	;volatile
  1744                           
  1745                           ; BSR set to: 0
  1746  001432  0012               	return	
  1747  001434                     __end_of_uart_read_indicator:
  1748                           	opt stack 0
  1749                           tblptru	equ	0xFF8
  1750                           tblptrh	equ	0xFF7
  1751                           tblptrl	equ	0xFF6
  1752                           tablat	equ	0xFF5
  1753                           postinc0	equ	0xFEE
  1754                           wreg	equ	0xFE8
  1755                           postinc2	equ	0xFDE
  1756                           postdec2	equ	0xFDD
  1757                           fsr2h	equ	0xFDA
  1758                           fsr2l	equ	0xFD9
  1759                           status	equ	0xFD8
  1760                           
  1761 ;; *************** function _switch_LED *****************
  1762 ;; Defined at:
  1763 ;;		line 313 in file "AD7147.c"
  1764 ;; Parameters:    Size  Location     Type
  1765 ;;  cdc             2   22[BANK0 ] unsigned int 
  1766 ;;  state           2   24[BANK0 ] unsigned int 
  1767 ;; Auto vars:     Size  Location     Type
  1768 ;;  message         2   28[BANK0 ] unsigned int 
  1769 ;;  message         2   26[BANK0 ] unsigned int 
  1770 ;; Return value:  Size  Location     Type
  1771 ;;                  1    wreg      void 
  1772 ;; Registers used:
  1773 ;;		wreg, status,2, status,0, cstack
  1774 ;; Tracked objects:
  1775 ;;		On entry : 0/0
  1776 ;;		On exit  : 0/0
  1777 ;;		Unchanged: 0/0
  1778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1779 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1780 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1782 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1783 ;;Total ram usage:        8 bytes
  1784 ;; Hardware stack levels used:    1
  1785 ;; Hardware stack levels required when called:    5
  1786 ;; This function calls:
  1787 ;;		_delay_ms
  1788 ;;		_get_CDC
  1789 ;;		_w32_spi
  1790 ;; This function is called by:
  1791 ;;		_main
  1792 ;; This function uses a non-reentrant model
  1793 ;;
  1794                           
  1795                           	psect	text6
  1796  001066                     __ptext6:
  1797                           	opt stack 0
  1798  001066                     _switch_LED:
  1799                           	opt stack 25
  1800                           
  1801                           ;AD7147.c: 315: get_CDC(cdc,0);
  1802                           
  1803                           ; BSR set to: 0
  1804                           ;incstack = 0
  1805  001066  C0C2  F0AC         	movff	switch_LED@cdc,get_CDC@cdc
  1806  00106A  C0C3  F0AD         	movff	switch_LED@cdc+1,get_CDC@cdc+1
  1807  00106E  0E00               	movlw	0
  1808  001070  0100               	movlb	0	; () banked
  1809  001072  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  1810  001074  0E00               	movlw	0
  1811  001076  6FAE               	movwf	get_CDC@state& (0+255),b
  1812  001078  ECE4  F00A         	call	_get_CDC	;wreg free
  1813                           
  1814                           ;AD7147.c: 316: if (state==1)
  1815  00107C  0100               	movlb	0	; () banked
  1816  00107E  05C4               	decf	switch_LED@state& (0+255),w,b
  1817  001080  0100               	movlb	0	; () banked
  1818  001082  11C5               	iorwf	(switch_LED@state+1)& (0+255),w,b
  1819  001084  A4D8               	btfss	status,2,c
  1820  001086  D011               	goto	l2277
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;AD7147.c: 317: {
  1824                           ;AD7147.c: 318: unsigned int message = 0b0010000000000000;
  1825  001088  0E20               	movlw	32
  1826  00108A  0100               	movlb	0	; () banked
  1827  00108C  6FC7               	movwf	(switch_LED@message+1)& (0+255),b
  1828  00108E  0E00               	movlw	0
  1829  001090  6FC6               	movwf	switch_LED@message& (0+255),b
  1830                           
  1831                           ; BSR set to: 0
  1832                           ;AD7147.c: 319: w32_spi((0xE000 + 0x005),message);
  1833  001092  0EE0               	movlw	224
  1834  001094  0100               	movlb	0	; () banked
  1835  001096  6FAD               	movwf	(w32_spi@address+1)& (0+255),b
  1836  001098  0E05               	movlw	5
  1837  00109A  6FAC               	movwf	w32_spi@address& (0+255),b
  1838  00109C  C0C6  F0AE         	movff	switch_LED@message,w32_spi@data
  1839  0010A0  C0C7  F0AF         	movff	switch_LED@message+1,w32_spi@data+1
  1840  0010A4  EC78  F008         	call	_w32_spi	;wreg free
  1841                           
  1842                           ;AD7147.c: 320: }
  1843  0010A8  D010               	goto	l2281
  1844  0010AA                     l2277:
  1845                           
  1846                           ;AD7147.c: 321: else
  1847                           ;AD7147.c: 322: {
  1848                           ;AD7147.c: 323: unsigned int message = 0b0011000000000000;
  1849  0010AA  0E30               	movlw	48
  1850  0010AC  0100               	movlb	0	; () banked
  1851  0010AE  6FC9               	movwf	(switch_LED@message_160+1)& (0+255),b
  1852  0010B0  0E00               	movlw	0
  1853  0010B2  6FC8               	movwf	switch_LED@message_160& (0+255),b
  1854                           
  1855                           ; BSR set to: 0
  1856                           ;AD7147.c: 324: w32_spi((0xE000 + 0x005),message);
  1857  0010B4  0EE0               	movlw	224
  1858  0010B6  0100               	movlb	0	; () banked
  1859  0010B8  6FAD               	movwf	(w32_spi@address+1)& (0+255),b
  1860  0010BA  0E05               	movlw	5
  1861  0010BC  6FAC               	movwf	w32_spi@address& (0+255),b
  1862  0010BE  C0C8  F0AE         	movff	switch_LED@message_160,w32_spi@data
  1863  0010C2  C0C9  F0AF         	movff	switch_LED@message_160+1,w32_spi@data+1
  1864  0010C6  EC78  F008         	call	_w32_spi	;wreg free
  1865  0010CA                     l2281:
  1866                           
  1867                           ;AD7147.c: 325: }
  1868                           ;AD7147.c: 326: delay_ms(10);
  1869  0010CA  0E00               	movlw	0
  1870  0010CC  0100               	movlb	0	; () banked
  1871  0010CE  6FB5               	movwf	(delay_ms@n+1)& (0+255),b
  1872  0010D0  0E0A               	movlw	10
  1873  0010D2  6FB4               	movwf	delay_ms@n& (0+255),b
  1874  0010D4  EC42  F00A         	call	_delay_ms	;wreg free
  1875                           
  1876                           ;AD7147.c: 327: get_CDC(cdc,1);
  1877  0010D8  C0C2  F0AC         	movff	switch_LED@cdc,get_CDC@cdc
  1878  0010DC  C0C3  F0AD         	movff	switch_LED@cdc+1,get_CDC@cdc+1
  1879  0010E0  0E00               	movlw	0
  1880  0010E2  0100               	movlb	0	; () banked
  1881  0010E4  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  1882  0010E6  0E01               	movlw	1
  1883  0010E8  6FAE               	movwf	get_CDC@state& (0+255),b
  1884  0010EA  ECE4  F00A         	call	_get_CDC	;wreg free
  1885  0010EE  0012               	return		;funcret
  1886  0010F0                     __end_of_switch_LED:
  1887                           	opt stack 0
  1888                           tblptru	equ	0xFF8
  1889                           tblptrh	equ	0xFF7
  1890                           tblptrl	equ	0xFF6
  1891                           tablat	equ	0xFF5
  1892                           postinc0	equ	0xFEE
  1893                           wreg	equ	0xFE8
  1894                           postinc2	equ	0xFDE
  1895                           postdec2	equ	0xFDD
  1896                           fsr2h	equ	0xFDA
  1897                           fsr2l	equ	0xFD9
  1898                           status	equ	0xFD8
  1899                           
  1900 ;; *************** function _setup_spi *****************
  1901 ;; Defined at:
  1902 ;;		line 4 in file "spi.c"
  1903 ;; Parameters:    Size  Location     Type
  1904 ;;		None
  1905 ;; Auto vars:     Size  Location     Type
  1906 ;;		None
  1907 ;; Return value:  Size  Location     Type
  1908 ;;                  1    wreg      void 
  1909 ;; Registers used:
  1910 ;;		None
  1911 ;; Tracked objects:
  1912 ;;		On entry : 0/0
  1913 ;;		On exit  : 0/0
  1914 ;;		Unchanged: 0/0
  1915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1920 ;;Total ram usage:        0 bytes
  1921 ;; Hardware stack levels used:    1
  1922 ;; Hardware stack levels required when called:    3
  1923 ;; This function calls:
  1924 ;;		Nothing
  1925 ;; This function is called by:
  1926 ;;		_main
  1927 ;; This function uses a non-reentrant model
  1928 ;;
  1929                           
  1930                           	psect	text7
  1931  001656                     __ptext7:
  1932                           	opt stack 0
  1933  001656                     _setup_spi:
  1934                           	opt stack 27
  1935                           
  1936                           ;spi.c: 6: SSPSTATbits.SMP = 0;
  1937                           
  1938                           ;incstack = 0
  1939  001656  9EC7               	bcf	4039,7,c	;volatile
  1940                           
  1941                           ;spi.c: 7: SSPSTATbits.CKE = 0;
  1942  001658  9CC7               	bcf	4039,6,c	;volatile
  1943                           
  1944                           ;spi.c: 9: SSPCON1bits.WCOL = 0;
  1945  00165A  9EC6               	bcf	4038,7,c	;volatile
  1946                           
  1947                           ;spi.c: 10: SSPCON1bits.CKP = 1;
  1948  00165C  88C6               	bsf	4038,4,c	;volatile
  1949                           
  1950                           ;spi.c: 12: SSPCON1bits.SSPM3 = 0;
  1951  00165E  96C6               	bcf	4038,3,c	;volatile
  1952                           
  1953                           ;spi.c: 13: SSPCON1bits.SSPM2 = 0;
  1954  001660  94C6               	bcf	4038,2,c	;volatile
  1955                           
  1956                           ;spi.c: 14: SSPCON1bits.SSPM1 = 1;
  1957  001662  82C6               	bsf	4038,1,c	;volatile
  1958                           
  1959                           ;spi.c: 15: SSPCON1bits.SSPM0 = 0;
  1960  001664  90C6               	bcf	4038,0,c	;volatile
  1961                           
  1962                           ;spi.c: 17: PIE1bits.SSPIE = 0;
  1963  001666  969D               	bcf	3997,3,c	;volatile
  1964                           
  1965                           ;spi.c: 19: SSPCON1bits.SSPEN = 1;
  1966  001668  8AC6               	bsf	4038,5,c	;volatile
  1967  00166A  0012               	return		;funcret
  1968  00166C                     __end_of_setup_spi:
  1969                           	opt stack 0
  1970                           tblptru	equ	0xFF8
  1971                           tblptrh	equ	0xFF7
  1972                           tblptrl	equ	0xFF6
  1973                           tablat	equ	0xFF5
  1974                           postinc0	equ	0xFEE
  1975                           wreg	equ	0xFE8
  1976                           postinc2	equ	0xFDE
  1977                           postdec2	equ	0xFDD
  1978                           fsr2h	equ	0xFDA
  1979                           fsr2l	equ	0xFD9
  1980                           status	equ	0xFD8
  1981                           
  1982 ;; *************** function _setup_mcu *****************
  1983 ;; Defined at:
  1984 ;;		line 6 in file "micro_setup.c"
  1985 ;; Parameters:    Size  Location     Type
  1986 ;;		None
  1987 ;; Auto vars:     Size  Location     Type
  1988 ;;		None
  1989 ;; Return value:  Size  Location     Type
  1990 ;;                  1    wreg      void 
  1991 ;; Registers used:
  1992 ;;		wreg, status,2, cstack
  1993 ;; Tracked objects:
  1994 ;;		On entry : 0/0
  1995 ;;		On exit  : 0/0
  1996 ;;		Unchanged: 0/0
  1997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2002 ;;Total ram usage:        0 bytes
  2003 ;; Hardware stack levels used:    1
  2004 ;; Hardware stack levels required when called:    4
  2005 ;; This function calls:
  2006 ;;		_init_uart
  2007 ;;		_setup_port
  2008 ;; This function is called by:
  2009 ;;		_main
  2010 ;; This function uses a non-reentrant model
  2011 ;;
  2012                           
  2013                           	psect	text8
  2014  0016AE                     __ptext8:
  2015                           	opt stack 0
  2016  0016AE                     _setup_mcu:
  2017                           	opt stack 26
  2018                           
  2019                           ;micro_setup.c: 8: setup_port();
  2020                           
  2021                           ;incstack = 0
  2022  0016AE  EC51  F00B         	call	_setup_port	;wreg free
  2023                           
  2024                           ;micro_setup.c: 9: init_uart();
  2025  0016B2  EC40  F00B         	call	_init_uart	;wreg free
  2026  0016B6  0012               	return		;funcret
  2027  0016B8                     __end_of_setup_mcu:
  2028                           	opt stack 0
  2029                           tblptru	equ	0xFF8
  2030                           tblptrh	equ	0xFF7
  2031                           tblptrl	equ	0xFF6
  2032                           tablat	equ	0xFF5
  2033                           postinc0	equ	0xFEE
  2034                           wreg	equ	0xFE8
  2035                           postinc2	equ	0xFDE
  2036                           postdec2	equ	0xFDD
  2037                           fsr2h	equ	0xFDA
  2038                           fsr2l	equ	0xFD9
  2039                           status	equ	0xFD8
  2040                           
  2041 ;; *************** function _setup_port *****************
  2042 ;; Defined at:
  2043 ;;		line 12 in file "micro_setup.c"
  2044 ;; Parameters:    Size  Location     Type
  2045 ;;		None
  2046 ;; Auto vars:     Size  Location     Type
  2047 ;;		None
  2048 ;; Return value:  Size  Location     Type
  2049 ;;                  1    wreg      void 
  2050 ;; Registers used:
  2051 ;;		wreg, status,2
  2052 ;; Tracked objects:
  2053 ;;		On entry : 0/0
  2054 ;;		On exit  : 0/0
  2055 ;;		Unchanged: 0/0
  2056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2060 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2061 ;;Total ram usage:        0 bytes
  2062 ;; Hardware stack levels used:    1
  2063 ;; Hardware stack levels required when called:    3
  2064 ;; This function calls:
  2065 ;;		Nothing
  2066 ;; This function is called by:
  2067 ;;		_setup_mcu
  2068 ;; This function uses a non-reentrant model
  2069 ;;
  2070                           
  2071                           	psect	text9
  2072  0016A2                     __ptext9:
  2073                           	opt stack 0
  2074  0016A2                     _setup_port:
  2075                           	opt stack 26
  2076                           
  2077                           ;micro_setup.c: 16: TRISC = 0b10010000;
  2078                           
  2079                           ;incstack = 0
  2080  0016A2  0E90               	movlw	144
  2081  0016A4  6E94               	movwf	3988,c	;volatile
  2082                           
  2083                           ;micro_setup.c: 17: LATCbits.LATC1=1;
  2084  0016A6  828B               	bsf	3979,1,c	;volatile
  2085                           
  2086                           ;micro_setup.c: 18: LATCbits.LATC0=1;
  2087  0016A8  808B               	bsf	3979,0,c	;volatile
  2088                           
  2089                           ;micro_setup.c: 19: LATCbits.LATC2=1;
  2090  0016AA  848B               	bsf	3979,2,c	;volatile
  2091  0016AC  0012               	return		;funcret
  2092  0016AE                     __end_of_setup_port:
  2093                           	opt stack 0
  2094                           tblptru	equ	0xFF8
  2095                           tblptrh	equ	0xFF7
  2096                           tblptrl	equ	0xFF6
  2097                           tablat	equ	0xFF5
  2098                           postinc0	equ	0xFEE
  2099                           wreg	equ	0xFE8
  2100                           postinc2	equ	0xFDE
  2101                           postdec2	equ	0xFDD
  2102                           fsr2h	equ	0xFDA
  2103                           fsr2l	equ	0xFD9
  2104                           status	equ	0xFD8
  2105                           
  2106 ;; *************** function _init_uart *****************
  2107 ;; Defined at:
  2108 ;;		line 47 in file "micro_setup.c"
  2109 ;; Parameters:    Size  Location     Type
  2110 ;;		None
  2111 ;; Auto vars:     Size  Location     Type
  2112 ;;		None
  2113 ;; Return value:  Size  Location     Type
  2114 ;;                  1    wreg      void 
  2115 ;; Registers used:
  2116 ;;		wreg, status,2
  2117 ;; Tracked objects:
  2118 ;;		On entry : 0/0
  2119 ;;		On exit  : 0/0
  2120 ;;		Unchanged: 0/0
  2121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2125 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2126 ;;Total ram usage:        0 bytes
  2127 ;; Hardware stack levels used:    1
  2128 ;; Hardware stack levels required when called:    3
  2129 ;; This function calls:
  2130 ;;		Nothing
  2131 ;; This function is called by:
  2132 ;;		_setup_mcu
  2133 ;; This function uses a non-reentrant model
  2134 ;;
  2135                           
  2136                           	psect	text10
  2137  001680                     __ptext10:
  2138                           	opt stack 0
  2139  001680                     _init_uart:
  2140                           	opt stack 26
  2141                           
  2142                           ;micro_setup.c: 49: TXSTA1 = 0b00100000;
  2143                           
  2144                           ;incstack = 0
  2145  001680  0E20               	movlw	32
  2146  001682  6EAC               	movwf	4012,c	;volatile
  2147                           
  2148                           ;micro_setup.c: 61: SPBRG1 = 12;
  2149  001684  0E0C               	movlw	12
  2150  001686  6EAF               	movwf	4015,c	;volatile
  2151                           
  2152                           ;micro_setup.c: 63: BAUDCON1 = 0b00000000;
  2153  001688  0E00               	movlw	0
  2154  00168A  6EA7               	movwf	4007,c	;volatile
  2155                           
  2156                           ;micro_setup.c: 83: RCSTA1bits.SPEN=1;
  2157  00168C  8EAB               	bsf	4011,7,c	;volatile
  2158                           
  2159                           ;micro_setup.c: 84: RCSTA1bits.RX9=0;
  2160  00168E  9CAB               	bcf	4011,6,c	;volatile
  2161                           
  2162                           ;micro_setup.c: 85: RCSTA1bits.CREN=1;
  2163  001690  88AB               	bsf	4011,4,c	;volatile
  2164  001692  0012               	return		;funcret
  2165  001694                     __end_of_init_uart:
  2166                           	opt stack 0
  2167                           tblptru	equ	0xFF8
  2168                           tblptrh	equ	0xFF7
  2169                           tblptrl	equ	0xFF6
  2170                           tablat	equ	0xFF5
  2171                           postinc0	equ	0xFEE
  2172                           wreg	equ	0xFE8
  2173                           postinc2	equ	0xFDE
  2174                           postdec2	equ	0xFDD
  2175                           fsr2h	equ	0xFDA
  2176                           fsr2l	equ	0xFD9
  2177                           status	equ	0xFD8
  2178                           
  2179 ;; *************** function _setup_AD7147 *****************
  2180 ;; Defined at:
  2181 ;;		line 6 in file "AD7147.c"
  2182 ;; Parameters:    Size  Location     Type
  2183 ;;  DataBuffer      2   40[BANK0 ] PTR unsigned int 
  2184 ;;		 -> interrupt_values_cdc1(6), 
  2185 ;;  cdc             2   42[BANK0 ] unsigned int 
  2186 ;; Auto vars:     Size  Location     Type
  2187 ;;  StageBuffer    16   44[BANK0 ] unsigned int [8]
  2188 ;; Return value:  Size  Location     Type
  2189 ;;                  1    wreg      void 
  2190 ;; Registers used:
  2191 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2192 ;; Tracked objects:
  2193 ;;		On entry : 0/0
  2194 ;;		On exit  : 0/0
  2195 ;;		Unchanged: 0/0
  2196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2197 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2198 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2200 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2201 ;;Total ram usage:       20 bytes
  2202 ;; Hardware stack levels used:    1
  2203 ;; Hardware stack levels required when called:    5
  2204 ;; This function calls:
  2205 ;;		_read_AD7147
  2206 ;;		_write_AD7147
  2207 ;; This function is called by:
  2208 ;;		_main
  2209 ;; This function uses a non-reentrant model
  2210 ;;
  2211                           
  2212                           	psect	text11
  2213  0000F2                     __ptext11:
  2214                           	opt stack 0
  2215  0000F2                     _setup_AD7147:
  2216                           	opt stack 25
  2217                           
  2218                           ;AD7147.c: 8: unsigned int StageBuffer[8] = {0};
  2219                           
  2220                           ;incstack = 0
  2221  0000F2  EE20  F060         	lfsr	2,setup_AD7147@F14884
  2222  0000F6  EE10  F0D8         	lfsr	1,setup_AD7147@StageBuffer
  2223  0000FA  0E0F               	movlw	15
  2224  0000FC                     u991:
  2225  0000FC  CFDB FFE3          	movff	plusw2,plusw1
  2226  000100  06E8               	decf	wreg,f,c
  2227  000102  E2FC               	bc	u991
  2228                           
  2229                           ;AD7147.c: 23: StageBuffer[0] = 0xFFFE;
  2230  000104  0EFF               	movlw	255
  2231  000106  0100               	movlb	0	; () banked
  2232  000108  6FD9               	movwf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2233  00010A  0EFE               	movlw	254
  2234  00010C  6FD8               	movwf	setup_AD7147@StageBuffer& (0+255),b
  2235                           
  2236                           ; BSR set to: 0
  2237                           ;AD7147.c: 24: StageBuffer[1] = 0x1FFF;
  2238  00010E  0E1F               	movlw	31
  2239  000110  0100               	movlb	0	; () banked
  2240  000112  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2241  000114  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2242                           
  2243                           ; BSR set to: 0
  2244                           ;AD7147.c: 25: StageBuffer[2] = 0x0100;
  2245  000116  0E01               	movlw	1
  2246  000118  0100               	movlb	0	; () banked
  2247  00011A  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2248  00011C  0E00               	movlw	0
  2249  00011E  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2250                           
  2251                           ; BSR set to: 0
  2252                           ;AD7147.c: 26: StageBuffer[3] = 0x2121;
  2253  000120  0E21               	movlw	33
  2254  000122  0100               	movlb	0	; () banked
  2255  000124  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2256  000126  0E21               	movlw	33
  2257  000128  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2258                           
  2259                           ; BSR set to: 0
  2260                           ;AD7147.c: 27: StageBuffer[4] = 500;
  2261  00012A  0E01               	movlw	1
  2262  00012C  0100               	movlb	0	; () banked
  2263  00012E  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2264  000130  0EF4               	movlw	244
  2265  000132  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2266                           
  2267                           ; BSR set to: 0
  2268                           ;AD7147.c: 28: StageBuffer[5] = 500;
  2269  000134  0E01               	movlw	1
  2270  000136  0100               	movlb	0	; () banked
  2271  000138  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2272  00013A  0EF4               	movlw	244
  2273  00013C  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2274                           
  2275                           ; BSR set to: 0
  2276                           ;AD7147.c: 29: StageBuffer[6] = 600;
  2277  00013E  0E02               	movlw	2
  2278  000140  0100               	movlb	0	; () banked
  2279  000142  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2280  000144  0E58               	movlw	88
  2281  000146  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2282                           
  2283                           ; BSR set to: 0
  2284                           ;AD7147.c: 30: StageBuffer[7] = 600;
  2285  000148  0E02               	movlw	2
  2286  00014A  0100               	movlb	0	; () banked
  2287  00014C  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2288  00014E  0E58               	movlw	88
  2289  000150  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2290                           
  2291                           ; BSR set to: 0
  2292                           ;AD7147.c: 31: write_AD7147(0x080, 8, StageBuffer, 0, cdc);
  2293  000152  0E00               	movlw	0
  2294  000154  0100               	movlb	0	; () banked
  2295  000156  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2296  000158  0E80               	movlw	128
  2297  00015A  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2298  00015C  0E00               	movlw	0
  2299  00015E  0100               	movlb	0	; () banked
  2300  000160  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2301  000162  0E08               	movlw	8
  2302  000164  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2303  000166  0ED8               	movlw	low setup_AD7147@StageBuffer
  2304  000168  0100               	movlb	0	; () banked
  2305  00016A  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2306  00016C  0E00               	movlw	high setup_AD7147@StageBuffer
  2307  00016E  0100               	movlb	0	; () banked
  2308  000170  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2309  000172  0E00               	movlw	0
  2310  000174  0100               	movlb	0	; () banked
  2311  000176  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2312  000178  0E00               	movlw	0
  2313  00017A  6FC8               	movwf	write_AD7147@index& (0+255),b
  2314  00017C  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2315  000180  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2316  000184  ECF9  F005         	call	_write_AD7147	;wreg free
  2317                           
  2318                           ;AD7147.c: 36: StageBuffer[0]=0xFFFB;
  2319  000188  0EFF               	movlw	255
  2320  00018A  0100               	movlb	0	; () banked
  2321  00018C  6FD9               	movwf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2322  00018E  0EFB               	movlw	251
  2323  000190  6FD8               	movwf	setup_AD7147@StageBuffer& (0+255),b
  2324                           
  2325                           ; BSR set to: 0
  2326                           ;AD7147.c: 37: StageBuffer[1]=0x1FFF;
  2327  000192  0E1F               	movlw	31
  2328  000194  0100               	movlb	0	; () banked
  2329  000196  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2330  000198  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2331                           
  2332                           ; BSR set to: 0
  2333                           ;AD7147.c: 38: StageBuffer[2]=0x0100;
  2334  00019A  0E01               	movlw	1
  2335  00019C  0100               	movlb	0	; () banked
  2336  00019E  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2337  0001A0  0E00               	movlw	0
  2338  0001A2  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2339                           
  2340                           ; BSR set to: 0
  2341                           ;AD7147.c: 39: StageBuffer[3]=0x2121;
  2342  0001A4  0E21               	movlw	33
  2343  0001A6  0100               	movlb	0	; () banked
  2344  0001A8  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2345  0001AA  0E21               	movlw	33
  2346  0001AC  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2347                           
  2348                           ; BSR set to: 0
  2349                           ;AD7147.c: 40: StageBuffer[4]=500;
  2350  0001AE  0E01               	movlw	1
  2351  0001B0  0100               	movlb	0	; () banked
  2352  0001B2  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2353  0001B4  0EF4               	movlw	244
  2354  0001B6  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2355                           
  2356                           ; BSR set to: 0
  2357                           ;AD7147.c: 41: StageBuffer[5]=500;
  2358  0001B8  0E01               	movlw	1
  2359  0001BA  0100               	movlb	0	; () banked
  2360  0001BC  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2361  0001BE  0EF4               	movlw	244
  2362  0001C0  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2363                           
  2364                           ; BSR set to: 0
  2365                           ;AD7147.c: 42: StageBuffer[6]=600;
  2366  0001C2  0E02               	movlw	2
  2367  0001C4  0100               	movlb	0	; () banked
  2368  0001C6  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2369  0001C8  0E58               	movlw	88
  2370  0001CA  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2371                           
  2372                           ; BSR set to: 0
  2373                           ;AD7147.c: 43: StageBuffer[7]=600;
  2374  0001CC  0E02               	movlw	2
  2375  0001CE  0100               	movlb	0	; () banked
  2376  0001D0  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2377  0001D2  0E58               	movlw	88
  2378  0001D4  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2379                           
  2380                           ; BSR set to: 0
  2381                           ;AD7147.c: 44: write_AD7147(0x088, 8, StageBuffer, 0, cdc);
  2382  0001D6  0E00               	movlw	0
  2383  0001D8  0100               	movlb	0	; () banked
  2384  0001DA  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2385  0001DC  0E88               	movlw	136
  2386  0001DE  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2387  0001E0  0E00               	movlw	0
  2388  0001E2  0100               	movlb	0	; () banked
  2389  0001E4  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2390  0001E6  0E08               	movlw	8
  2391  0001E8  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2392  0001EA  0ED8               	movlw	low setup_AD7147@StageBuffer
  2393  0001EC  0100               	movlb	0	; () banked
  2394  0001EE  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2395  0001F0  0E00               	movlw	high setup_AD7147@StageBuffer
  2396  0001F2  0100               	movlb	0	; () banked
  2397  0001F4  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2398  0001F6  0E00               	movlw	0
  2399  0001F8  0100               	movlb	0	; () banked
  2400  0001FA  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2401  0001FC  0E00               	movlw	0
  2402  0001FE  6FC8               	movwf	write_AD7147@index& (0+255),b
  2403  000200  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2404  000204  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2405  000208  ECF9  F005         	call	_write_AD7147	;wreg free
  2406                           
  2407                           ;AD7147.c: 49: StageBuffer[0]=0xFFEF;
  2408  00020C  0EFF               	movlw	255
  2409  00020E  0100               	movlb	0	; () banked
  2410  000210  6FD9               	movwf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2411  000212  0EEF               	movlw	239
  2412  000214  6FD8               	movwf	setup_AD7147@StageBuffer& (0+255),b
  2413                           
  2414                           ; BSR set to: 0
  2415                           ;AD7147.c: 50: StageBuffer[1]=0x1FFF;
  2416  000216  0E1F               	movlw	31
  2417  000218  0100               	movlb	0	; () banked
  2418  00021A  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2419  00021C  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2420                           
  2421                           ; BSR set to: 0
  2422                           ;AD7147.c: 51: StageBuffer[2]=0x0100;
  2423  00021E  0E01               	movlw	1
  2424  000220  0100               	movlb	0	; () banked
  2425  000222  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2426  000224  0E00               	movlw	0
  2427  000226  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2428                           
  2429                           ; BSR set to: 0
  2430                           ;AD7147.c: 52: StageBuffer[3]=0x2121;
  2431  000228  0E21               	movlw	33
  2432  00022A  0100               	movlb	0	; () banked
  2433  00022C  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2434  00022E  0E21               	movlw	33
  2435  000230  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2436                           
  2437                           ; BSR set to: 0
  2438                           ;AD7147.c: 53: StageBuffer[4]=500;
  2439  000232  0E01               	movlw	1
  2440  000234  0100               	movlb	0	; () banked
  2441  000236  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2442  000238  0EF4               	movlw	244
  2443  00023A  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2444                           
  2445                           ; BSR set to: 0
  2446                           ;AD7147.c: 54: StageBuffer[5]=500;
  2447  00023C  0E01               	movlw	1
  2448  00023E  0100               	movlb	0	; () banked
  2449  000240  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2450  000242  0EF4               	movlw	244
  2451  000244  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2452                           
  2453                           ; BSR set to: 0
  2454                           ;AD7147.c: 55: StageBuffer[6]=600;
  2455  000246  0E02               	movlw	2
  2456  000248  0100               	movlb	0	; () banked
  2457  00024A  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2458  00024C  0E58               	movlw	88
  2459  00024E  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2460                           
  2461                           ; BSR set to: 0
  2462                           ;AD7147.c: 56: StageBuffer[7]=600;
  2463  000250  0E02               	movlw	2
  2464  000252  0100               	movlb	0	; () banked
  2465  000254  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2466  000256  0E58               	movlw	88
  2467  000258  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2468                           
  2469                           ; BSR set to: 0
  2470                           ;AD7147.c: 57: write_AD7147(0x090, 8, StageBuffer, 0, cdc);
  2471  00025A  0E00               	movlw	0
  2472  00025C  0100               	movlb	0	; () banked
  2473  00025E  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2474  000260  0E90               	movlw	144
  2475  000262  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2476  000264  0E00               	movlw	0
  2477  000266  0100               	movlb	0	; () banked
  2478  000268  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2479  00026A  0E08               	movlw	8
  2480  00026C  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2481  00026E  0ED8               	movlw	low setup_AD7147@StageBuffer
  2482  000270  0100               	movlb	0	; () banked
  2483  000272  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2484  000274  0E00               	movlw	high setup_AD7147@StageBuffer
  2485  000276  0100               	movlb	0	; () banked
  2486  000278  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2487  00027A  0E00               	movlw	0
  2488  00027C  0100               	movlb	0	; () banked
  2489  00027E  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2490  000280  0E00               	movlw	0
  2491  000282  6FC8               	movwf	write_AD7147@index& (0+255),b
  2492  000284  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2493  000288  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2494  00028C  ECF9  F005         	call	_write_AD7147	;wreg free
  2495                           
  2496                           ;AD7147.c: 62: StageBuffer[0]=0xFFFF;
  2497  000290  0100               	movlb	0	; () banked
  2498  000292  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  2499  000294  69D9               	setf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2500                           
  2501                           ; BSR set to: 0
  2502                           ;AD7147.c: 63: StageBuffer[1]=0x3FFF;
  2503  000296  0E3F               	movlw	63
  2504  000298  0100               	movlb	0	; () banked
  2505  00029A  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2506  00029C  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2507                           
  2508                           ; BSR set to: 0
  2509                           ;AD7147.c: 64: StageBuffer[2]=0x0000;
  2510  00029E  0E00               	movlw	0
  2511  0002A0  0100               	movlb	0	; () banked
  2512  0002A2  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2513  0002A4  0E00               	movlw	0
  2514  0002A6  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2515                           
  2516                           ; BSR set to: 0
  2517                           ;AD7147.c: 65: StageBuffer[3]=0x2626;
  2518  0002A8  0E26               	movlw	38
  2519  0002AA  0100               	movlb	0	; () banked
  2520  0002AC  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2521  0002AE  0E26               	movlw	38
  2522  0002B0  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2523                           
  2524                           ; BSR set to: 0
  2525                           ;AD7147.c: 66: StageBuffer[4]=4000;
  2526  0002B2  0E0F               	movlw	15
  2527  0002B4  0100               	movlb	0	; () banked
  2528  0002B6  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2529  0002B8  0EA0               	movlw	160
  2530  0002BA  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2531                           
  2532                           ; BSR set to: 0
  2533                           ;AD7147.c: 67: StageBuffer[5]=2500;
  2534  0002BC  0E09               	movlw	9
  2535  0002BE  0100               	movlb	0	; () banked
  2536  0002C0  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2537  0002C2  0EC4               	movlw	196
  2538  0002C4  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2539                           
  2540                           ; BSR set to: 0
  2541                           ;AD7147.c: 68: StageBuffer[6]=4000;
  2542  0002C6  0E0F               	movlw	15
  2543  0002C8  0100               	movlb	0	; () banked
  2544  0002CA  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2545  0002CC  0EA0               	movlw	160
  2546  0002CE  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2547                           
  2548                           ; BSR set to: 0
  2549                           ;AD7147.c: 69: StageBuffer[7]=4000;
  2550  0002D0  0E0F               	movlw	15
  2551  0002D2  0100               	movlb	0	; () banked
  2552  0002D4  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2553  0002D6  0EA0               	movlw	160
  2554  0002D8  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2555                           
  2556                           ; BSR set to: 0
  2557                           ;AD7147.c: 70: write_AD7147(0x098, 8, StageBuffer, 0, cdc);
  2558  0002DA  0E00               	movlw	0
  2559  0002DC  0100               	movlb	0	; () banked
  2560  0002DE  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2561  0002E0  0E98               	movlw	152
  2562  0002E2  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2563  0002E4  0E00               	movlw	0
  2564  0002E6  0100               	movlb	0	; () banked
  2565  0002E8  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2566  0002EA  0E08               	movlw	8
  2567  0002EC  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2568  0002EE  0ED8               	movlw	low setup_AD7147@StageBuffer
  2569  0002F0  0100               	movlb	0	; () banked
  2570  0002F2  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2571  0002F4  0E00               	movlw	high setup_AD7147@StageBuffer
  2572  0002F6  0100               	movlb	0	; () banked
  2573  0002F8  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2574  0002FA  0E00               	movlw	0
  2575  0002FC  0100               	movlb	0	; () banked
  2576  0002FE  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2577  000300  0E00               	movlw	0
  2578  000302  6FC8               	movwf	write_AD7147@index& (0+255),b
  2579  000304  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2580  000308  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2581  00030C  ECF9  F005         	call	_write_AD7147	;wreg free
  2582                           
  2583                           ;AD7147.c: 75: StageBuffer[0]=0xFFFF;
  2584  000310  0100               	movlb	0	; () banked
  2585  000312  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  2586  000314  69D9               	setf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2587                           
  2588                           ; BSR set to: 0
  2589                           ;AD7147.c: 76: StageBuffer[1]=0x3FFF;
  2590  000316  0E3F               	movlw	63
  2591  000318  0100               	movlb	0	; () banked
  2592  00031A  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2593  00031C  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2594                           
  2595                           ; BSR set to: 0
  2596                           ;AD7147.c: 77: StageBuffer[2]=0x0000;
  2597  00031E  0E00               	movlw	0
  2598  000320  0100               	movlb	0	; () banked
  2599  000322  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2600  000324  0E00               	movlw	0
  2601  000326  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2602                           
  2603                           ; BSR set to: 0
  2604                           ;AD7147.c: 78: StageBuffer[3]=0x2626;
  2605  000328  0E26               	movlw	38
  2606  00032A  0100               	movlb	0	; () banked
  2607  00032C  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2608  00032E  0E26               	movlw	38
  2609  000330  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2610                           
  2611                           ; BSR set to: 0
  2612                           ;AD7147.c: 79: StageBuffer[4]=4000;
  2613  000332  0E0F               	movlw	15
  2614  000334  0100               	movlb	0	; () banked
  2615  000336  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2616  000338  0EA0               	movlw	160
  2617  00033A  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2618                           
  2619                           ; BSR set to: 0
  2620                           ;AD7147.c: 80: StageBuffer[5]=2500;
  2621  00033C  0E09               	movlw	9
  2622  00033E  0100               	movlb	0	; () banked
  2623  000340  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2624  000342  0EC4               	movlw	196
  2625  000344  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2626                           
  2627                           ; BSR set to: 0
  2628                           ;AD7147.c: 81: StageBuffer[6]=4000;
  2629  000346  0E0F               	movlw	15
  2630  000348  0100               	movlb	0	; () banked
  2631  00034A  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2632  00034C  0EA0               	movlw	160
  2633  00034E  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2634                           
  2635                           ; BSR set to: 0
  2636                           ;AD7147.c: 82: StageBuffer[7]=4000;
  2637  000350  0E0F               	movlw	15
  2638  000352  0100               	movlb	0	; () banked
  2639  000354  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2640  000356  0EA0               	movlw	160
  2641  000358  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2642                           
  2643                           ; BSR set to: 0
  2644                           ;AD7147.c: 83: write_AD7147(0x0A0, 8, StageBuffer,0, cdc);
  2645  00035A  0E00               	movlw	0
  2646  00035C  0100               	movlb	0	; () banked
  2647  00035E  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2648  000360  0EA0               	movlw	160
  2649  000362  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2650  000364  0E00               	movlw	0
  2651  000366  0100               	movlb	0	; () banked
  2652  000368  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2653  00036A  0E08               	movlw	8
  2654  00036C  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2655  00036E  0ED8               	movlw	low setup_AD7147@StageBuffer
  2656  000370  0100               	movlb	0	; () banked
  2657  000372  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2658  000374  0E00               	movlw	high setup_AD7147@StageBuffer
  2659  000376  0100               	movlb	0	; () banked
  2660  000378  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2661  00037A  0E00               	movlw	0
  2662  00037C  0100               	movlb	0	; () banked
  2663  00037E  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2664  000380  0E00               	movlw	0
  2665  000382  6FC8               	movwf	write_AD7147@index& (0+255),b
  2666  000384  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2667  000388  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2668  00038C  ECF9  F005         	call	_write_AD7147	;wreg free
  2669                           
  2670                           ;AD7147.c: 88: StageBuffer[0]=0xFFFF;
  2671  000390  0100               	movlb	0	; () banked
  2672  000392  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  2673  000394  69D9               	setf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2674                           
  2675                           ; BSR set to: 0
  2676                           ;AD7147.c: 89: StageBuffer[1]=0x3FFF;
  2677  000396  0E3F               	movlw	63
  2678  000398  0100               	movlb	0	; () banked
  2679  00039A  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2680  00039C  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2681                           
  2682                           ; BSR set to: 0
  2683                           ;AD7147.c: 90: StageBuffer[2]=0x0000;
  2684  00039E  0E00               	movlw	0
  2685  0003A0  0100               	movlb	0	; () banked
  2686  0003A2  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2687  0003A4  0E00               	movlw	0
  2688  0003A6  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2689                           
  2690                           ; BSR set to: 0
  2691                           ;AD7147.c: 91: StageBuffer[3]=0x2626;
  2692  0003A8  0E26               	movlw	38
  2693  0003AA  0100               	movlb	0	; () banked
  2694  0003AC  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2695  0003AE  0E26               	movlw	38
  2696  0003B0  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2697                           
  2698                           ; BSR set to: 0
  2699                           ;AD7147.c: 92: StageBuffer[4]=4000;
  2700  0003B2  0E0F               	movlw	15
  2701  0003B4  0100               	movlb	0	; () banked
  2702  0003B6  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2703  0003B8  0EA0               	movlw	160
  2704  0003BA  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2705                           
  2706                           ; BSR set to: 0
  2707                           ;AD7147.c: 93: StageBuffer[5]=2500;
  2708  0003BC  0E09               	movlw	9
  2709  0003BE  0100               	movlb	0	; () banked
  2710  0003C0  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2711  0003C2  0EC4               	movlw	196
  2712  0003C4  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2713                           
  2714                           ; BSR set to: 0
  2715                           ;AD7147.c: 94: StageBuffer[6]=4000;
  2716  0003C6  0E0F               	movlw	15
  2717  0003C8  0100               	movlb	0	; () banked
  2718  0003CA  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2719  0003CC  0EA0               	movlw	160
  2720  0003CE  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2721                           
  2722                           ; BSR set to: 0
  2723                           ;AD7147.c: 95: StageBuffer[7]=4000;
  2724  0003D0  0E0F               	movlw	15
  2725  0003D2  0100               	movlb	0	; () banked
  2726  0003D4  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2727  0003D6  0EA0               	movlw	160
  2728  0003D8  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2729                           
  2730                           ; BSR set to: 0
  2731                           ;AD7147.c: 96: write_AD7147(0x0A8, 8, StageBuffer,0, cdc);
  2732  0003DA  0E00               	movlw	0
  2733  0003DC  0100               	movlb	0	; () banked
  2734  0003DE  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2735  0003E0  0EA8               	movlw	168
  2736  0003E2  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2737  0003E4  0E00               	movlw	0
  2738  0003E6  0100               	movlb	0	; () banked
  2739  0003E8  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2740  0003EA  0E08               	movlw	8
  2741  0003EC  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2742  0003EE  0ED8               	movlw	low setup_AD7147@StageBuffer
  2743  0003F0  0100               	movlb	0	; () banked
  2744  0003F2  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2745  0003F4  0E00               	movlw	high setup_AD7147@StageBuffer
  2746  0003F6  0100               	movlb	0	; () banked
  2747  0003F8  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2748  0003FA  0E00               	movlw	0
  2749  0003FC  0100               	movlb	0	; () banked
  2750  0003FE  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2751  000400  0E00               	movlw	0
  2752  000402  6FC8               	movwf	write_AD7147@index& (0+255),b
  2753  000404  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2754  000408  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2755  00040C  ECF9  F005         	call	_write_AD7147	;wreg free
  2756                           
  2757                           ;AD7147.c: 101: StageBuffer[0]=0xFFFF;
  2758  000410  0100               	movlb	0	; () banked
  2759  000412  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  2760  000414  69D9               	setf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2761                           
  2762                           ; BSR set to: 0
  2763                           ;AD7147.c: 102: StageBuffer[1]=0x3FFF;
  2764  000416  0E3F               	movlw	63
  2765  000418  0100               	movlb	0	; () banked
  2766  00041A  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2767  00041C  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2768                           
  2769                           ; BSR set to: 0
  2770                           ;AD7147.c: 103: StageBuffer[2]=0x0000;
  2771  00041E  0E00               	movlw	0
  2772  000420  0100               	movlb	0	; () banked
  2773  000422  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2774  000424  0E00               	movlw	0
  2775  000426  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2776                           
  2777                           ; BSR set to: 0
  2778                           ;AD7147.c: 104: StageBuffer[3]=0x2626;
  2779  000428  0E26               	movlw	38
  2780  00042A  0100               	movlb	0	; () banked
  2781  00042C  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2782  00042E  0E26               	movlw	38
  2783  000430  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2784                           
  2785                           ; BSR set to: 0
  2786                           ;AD7147.c: 105: StageBuffer[4]=4000;
  2787  000432  0E0F               	movlw	15
  2788  000434  0100               	movlb	0	; () banked
  2789  000436  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2790  000438  0EA0               	movlw	160
  2791  00043A  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2792                           
  2793                           ; BSR set to: 0
  2794                           ;AD7147.c: 106: StageBuffer[5]=2500;
  2795  00043C  0E09               	movlw	9
  2796  00043E  0100               	movlb	0	; () banked
  2797  000440  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2798  000442  0EC4               	movlw	196
  2799  000444  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2800                           
  2801                           ; BSR set to: 0
  2802                           ;AD7147.c: 107: StageBuffer[6]=4000;
  2803  000446  0E0F               	movlw	15
  2804  000448  0100               	movlb	0	; () banked
  2805  00044A  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2806  00044C  0EA0               	movlw	160
  2807  00044E  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2808                           
  2809                           ; BSR set to: 0
  2810                           ;AD7147.c: 108: StageBuffer[7]=4000;
  2811  000450  0E0F               	movlw	15
  2812  000452  0100               	movlb	0	; () banked
  2813  000454  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2814  000456  0EA0               	movlw	160
  2815  000458  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2816                           
  2817                           ; BSR set to: 0
  2818                           ;AD7147.c: 109: write_AD7147(0x0B0, 8, StageBuffer, 0, cdc);
  2819  00045A  0E00               	movlw	0
  2820  00045C  0100               	movlb	0	; () banked
  2821  00045E  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2822  000460  0EB0               	movlw	176
  2823  000462  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2824  000464  0E00               	movlw	0
  2825  000466  0100               	movlb	0	; () banked
  2826  000468  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2827  00046A  0E08               	movlw	8
  2828  00046C  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2829  00046E  0ED8               	movlw	low setup_AD7147@StageBuffer
  2830  000470  0100               	movlb	0	; () banked
  2831  000472  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2832  000474  0E00               	movlw	high setup_AD7147@StageBuffer
  2833  000476  0100               	movlb	0	; () banked
  2834  000478  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2835  00047A  0E00               	movlw	0
  2836  00047C  0100               	movlb	0	; () banked
  2837  00047E  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2838  000480  0E00               	movlw	0
  2839  000482  6FC8               	movwf	write_AD7147@index& (0+255),b
  2840  000484  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2841  000488  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2842  00048C  ECF9  F005         	call	_write_AD7147	;wreg free
  2843                           
  2844                           ;AD7147.c: 114: StageBuffer[0]=0xFFFF;
  2845  000490  0100               	movlb	0	; () banked
  2846  000492  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  2847  000494  69D9               	setf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2848                           
  2849                           ; BSR set to: 0
  2850                           ;AD7147.c: 115: StageBuffer[1]=0x3FFF;
  2851  000496  0E3F               	movlw	63
  2852  000498  0100               	movlb	0	; () banked
  2853  00049A  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2854  00049C  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2855                           
  2856                           ; BSR set to: 0
  2857                           ;AD7147.c: 116: StageBuffer[2]=0x0000;
  2858  00049E  0E00               	movlw	0
  2859  0004A0  0100               	movlb	0	; () banked
  2860  0004A2  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2861  0004A4  0E00               	movlw	0
  2862  0004A6  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2863                           
  2864                           ; BSR set to: 0
  2865                           ;AD7147.c: 117: StageBuffer[3]=0x2626;
  2866  0004A8  0E26               	movlw	38
  2867  0004AA  0100               	movlb	0	; () banked
  2868  0004AC  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2869  0004AE  0E26               	movlw	38
  2870  0004B0  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2871                           
  2872                           ; BSR set to: 0
  2873                           ;AD7147.c: 118: StageBuffer[4]=4000;
  2874  0004B2  0E0F               	movlw	15
  2875  0004B4  0100               	movlb	0	; () banked
  2876  0004B6  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2877  0004B8  0EA0               	movlw	160
  2878  0004BA  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2879                           
  2880                           ; BSR set to: 0
  2881                           ;AD7147.c: 119: StageBuffer[5]=2500;
  2882  0004BC  0E09               	movlw	9
  2883  0004BE  0100               	movlb	0	; () banked
  2884  0004C0  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2885  0004C2  0EC4               	movlw	196
  2886  0004C4  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2887                           
  2888                           ; BSR set to: 0
  2889                           ;AD7147.c: 120: StageBuffer[6]=4000;
  2890  0004C6  0E0F               	movlw	15
  2891  0004C8  0100               	movlb	0	; () banked
  2892  0004CA  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2893  0004CC  0EA0               	movlw	160
  2894  0004CE  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2895                           
  2896                           ; BSR set to: 0
  2897                           ;AD7147.c: 121: StageBuffer[7]=4000;
  2898  0004D0  0E0F               	movlw	15
  2899  0004D2  0100               	movlb	0	; () banked
  2900  0004D4  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2901  0004D6  0EA0               	movlw	160
  2902  0004D8  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2903                           
  2904                           ; BSR set to: 0
  2905                           ;AD7147.c: 122: write_AD7147(0x0B8, 8, StageBuffer, 0, cdc);
  2906  0004DA  0E00               	movlw	0
  2907  0004DC  0100               	movlb	0	; () banked
  2908  0004DE  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2909  0004E0  0EB8               	movlw	184
  2910  0004E2  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2911  0004E4  0E00               	movlw	0
  2912  0004E6  0100               	movlb	0	; () banked
  2913  0004E8  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2914  0004EA  0E08               	movlw	8
  2915  0004EC  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2916  0004EE  0ED8               	movlw	low setup_AD7147@StageBuffer
  2917  0004F0  0100               	movlb	0	; () banked
  2918  0004F2  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2919  0004F4  0E00               	movlw	high setup_AD7147@StageBuffer
  2920  0004F6  0100               	movlb	0	; () banked
  2921  0004F8  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2922  0004FA  0E00               	movlw	0
  2923  0004FC  0100               	movlb	0	; () banked
  2924  0004FE  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2925  000500  0E00               	movlw	0
  2926  000502  6FC8               	movwf	write_AD7147@index& (0+255),b
  2927  000504  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2928  000508  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2929  00050C  ECF9  F005         	call	_write_AD7147	;wreg free
  2930                           
  2931                           ;AD7147.c: 127: StageBuffer[0]=0xFFFF;
  2932  000510  0100               	movlb	0	; () banked
  2933  000512  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  2934  000514  69D9               	setf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2935                           
  2936                           ; BSR set to: 0
  2937                           ;AD7147.c: 128: StageBuffer[1]=0x3FFF;
  2938  000516  0E3F               	movlw	63
  2939  000518  0100               	movlb	0	; () banked
  2940  00051A  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2941  00051C  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2942                           
  2943                           ; BSR set to: 0
  2944                           ;AD7147.c: 129: StageBuffer[2]=0x0000;
  2945  00051E  0E00               	movlw	0
  2946  000520  0100               	movlb	0	; () banked
  2947  000522  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2948  000524  0E00               	movlw	0
  2949  000526  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2950                           
  2951                           ; BSR set to: 0
  2952                           ;AD7147.c: 130: StageBuffer[3]=0x2626;
  2953  000528  0E26               	movlw	38
  2954  00052A  0100               	movlb	0	; () banked
  2955  00052C  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2956  00052E  0E26               	movlw	38
  2957  000530  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2958                           
  2959                           ; BSR set to: 0
  2960                           ;AD7147.c: 131: StageBuffer[4]=4000;
  2961  000532  0E0F               	movlw	15
  2962  000534  0100               	movlb	0	; () banked
  2963  000536  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2964  000538  0EA0               	movlw	160
  2965  00053A  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2966                           
  2967                           ; BSR set to: 0
  2968                           ;AD7147.c: 132: StageBuffer[5]=2500;
  2969  00053C  0E09               	movlw	9
  2970  00053E  0100               	movlb	0	; () banked
  2971  000540  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2972  000542  0EC4               	movlw	196
  2973  000544  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;AD7147.c: 133: StageBuffer[6]=4000;
  2977  000546  0E0F               	movlw	15
  2978  000548  0100               	movlb	0	; () banked
  2979  00054A  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2980  00054C  0EA0               	movlw	160
  2981  00054E  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2982                           
  2983                           ; BSR set to: 0
  2984                           ;AD7147.c: 134: StageBuffer[7]=4000;
  2985  000550  0E0F               	movlw	15
  2986  000552  0100               	movlb	0	; () banked
  2987  000554  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2988  000556  0EA0               	movlw	160
  2989  000558  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2990                           
  2991                           ; BSR set to: 0
  2992                           ;AD7147.c: 135: write_AD7147(0x0C0, 8, StageBuffer, 0, cdc);
  2993  00055A  0E00               	movlw	0
  2994  00055C  0100               	movlb	0	; () banked
  2995  00055E  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2996  000560  0EC0               	movlw	192
  2997  000562  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2998  000564  0E00               	movlw	0
  2999  000566  0100               	movlb	0	; () banked
  3000  000568  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  3001  00056A  0E08               	movlw	8
  3002  00056C  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  3003  00056E  0ED8               	movlw	low setup_AD7147@StageBuffer
  3004  000570  0100               	movlb	0	; () banked
  3005  000572  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  3006  000574  0E00               	movlw	high setup_AD7147@StageBuffer
  3007  000576  0100               	movlb	0	; () banked
  3008  000578  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  3009  00057A  0E00               	movlw	0
  3010  00057C  0100               	movlb	0	; () banked
  3011  00057E  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  3012  000580  0E00               	movlw	0
  3013  000582  6FC8               	movwf	write_AD7147@index& (0+255),b
  3014  000584  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  3015  000588  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  3016  00058C  ECF9  F005         	call	_write_AD7147	;wreg free
  3017                           
  3018                           ;AD7147.c: 140: StageBuffer[0]=0xFFFF;
  3019  000590  0100               	movlb	0	; () banked
  3020  000592  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  3021  000594  69D9               	setf	(setup_AD7147@StageBuffer+1)& (0+255),b
  3022                           
  3023                           ; BSR set to: 0
  3024                           ;AD7147.c: 141: StageBuffer[1]=0x3FFF;
  3025  000596  0E3F               	movlw	63
  3026  000598  0100               	movlb	0	; () banked
  3027  00059A  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  3028  00059C  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  3029                           
  3030                           ; BSR set to: 0
  3031                           ;AD7147.c: 142: StageBuffer[2]=0x0000;
  3032  00059E  0E00               	movlw	0
  3033  0005A0  0100               	movlb	0	; () banked
  3034  0005A2  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  3035  0005A4  0E00               	movlw	0
  3036  0005A6  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  3037                           
  3038                           ; BSR set to: 0
  3039                           ;AD7147.c: 143: StageBuffer[3]=0x2626;
  3040  0005A8  0E26               	movlw	38
  3041  0005AA  0100               	movlb	0	; () banked
  3042  0005AC  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  3043  0005AE  0E26               	movlw	38
  3044  0005B0  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  3045                           
  3046                           ; BSR set to: 0
  3047                           ;AD7147.c: 144: StageBuffer[4]=4000;
  3048  0005B2  0E0F               	movlw	15
  3049  0005B4  0100               	movlb	0	; () banked
  3050  0005B6  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  3051  0005B8  0EA0               	movlw	160
  3052  0005BA  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  3053                           
  3054                           ; BSR set to: 0
  3055                           ;AD7147.c: 145: StageBuffer[5]=2500;
  3056  0005BC  0E09               	movlw	9
  3057  0005BE  0100               	movlb	0	; () banked
  3058  0005C0  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  3059  0005C2  0EC4               	movlw	196
  3060  0005C4  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  3061                           
  3062                           ; BSR set to: 0
  3063                           ;AD7147.c: 146: StageBuffer[6]=4000;
  3064  0005C6  0E0F               	movlw	15
  3065  0005C8  0100               	movlb	0	; () banked
  3066  0005CA  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  3067  0005CC  0EA0               	movlw	160
  3068  0005CE  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  3069                           
  3070                           ; BSR set to: 0
  3071                           ;AD7147.c: 147: StageBuffer[7]=4000;
  3072  0005D0  0E0F               	movlw	15
  3073  0005D2  0100               	movlb	0	; () banked
  3074  0005D4  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  3075  0005D6  0EA0               	movlw	160
  3076  0005D8  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  3077                           
  3078                           ; BSR set to: 0
  3079                           ;AD7147.c: 148: write_AD7147(0x0C8, 8, StageBuffer, 0, cdc);
  3080  0005DA  0E00               	movlw	0
  3081  0005DC  0100               	movlb	0	; () banked
  3082  0005DE  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  3083  0005E0  0EC8               	movlw	200
  3084  0005E2  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  3085  0005E4  0E00               	movlw	0
  3086  0005E6  0100               	movlb	0	; () banked
  3087  0005E8  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  3088  0005EA  0E08               	movlw	8
  3089  0005EC  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  3090  0005EE  0ED8               	movlw	low setup_AD7147@StageBuffer
  3091  0005F0  0100               	movlb	0	; () banked
  3092  0005F2  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  3093  0005F4  0E00               	movlw	high setup_AD7147@StageBuffer
  3094  0005F6  0100               	movlb	0	; () banked
  3095  0005F8  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  3096  0005FA  0E00               	movlw	0
  3097  0005FC  0100               	movlb	0	; () banked
  3098  0005FE  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  3099  000600  0E00               	movlw	0
  3100  000602  6FC8               	movwf	write_AD7147@index& (0+255),b
  3101  000604  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  3102  000608  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  3103  00060C  ECF9  F005         	call	_write_AD7147	;wreg free
  3104                           
  3105                           ;AD7147.c: 153: StageBuffer[0]=0xFFFF;
  3106  000610  0100               	movlb	0	; () banked
  3107  000612  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  3108  000614  69D9               	setf	(setup_AD7147@StageBuffer+1)& (0+255),b
  3109                           
  3110                           ; BSR set to: 0
  3111                           ;AD7147.c: 154: StageBuffer[1]=0x3FFF;
  3112  000616  0E3F               	movlw	63
  3113  000618  0100               	movlb	0	; () banked
  3114  00061A  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  3115  00061C  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  3116                           
  3117                           ; BSR set to: 0
  3118                           ;AD7147.c: 155: StageBuffer[2]=0x0000;
  3119  00061E  0E00               	movlw	0
  3120  000620  0100               	movlb	0	; () banked
  3121  000622  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  3122  000624  0E00               	movlw	0
  3123  000626  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  3124                           
  3125                           ; BSR set to: 0
  3126                           ;AD7147.c: 156: StageBuffer[3]=0x2626;
  3127  000628  0E26               	movlw	38
  3128  00062A  0100               	movlb	0	; () banked
  3129  00062C  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  3130  00062E  0E26               	movlw	38
  3131  000630  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  3132                           
  3133                           ; BSR set to: 0
  3134                           ;AD7147.c: 157: StageBuffer[4]=4000;
  3135  000632  0E0F               	movlw	15
  3136  000634  0100               	movlb	0	; () banked
  3137  000636  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  3138  000638  0EA0               	movlw	160
  3139  00063A  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  3140                           
  3141                           ; BSR set to: 0
  3142                           ;AD7147.c: 158: StageBuffer[5]=2500;
  3143  00063C  0E09               	movlw	9
  3144  00063E  0100               	movlb	0	; () banked
  3145  000640  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  3146  000642  0EC4               	movlw	196
  3147  000644  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  3148                           
  3149                           ; BSR set to: 0
  3150                           ;AD7147.c: 159: StageBuffer[6]=4000;
  3151  000646  0E0F               	movlw	15
  3152  000648  0100               	movlb	0	; () banked
  3153  00064A  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  3154  00064C  0EA0               	movlw	160
  3155  00064E  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  3156                           
  3157                           ; BSR set to: 0
  3158                           ;AD7147.c: 160: StageBuffer[7]=4000;
  3159  000650  0E0F               	movlw	15
  3160  000652  0100               	movlb	0	; () banked
  3161  000654  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  3162  000656  0EA0               	movlw	160
  3163  000658  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  3164                           
  3165                           ; BSR set to: 0
  3166                           ;AD7147.c: 161: write_AD7147(0x0D0, 8, StageBuffer, 0, cdc);
  3167  00065A  0E00               	movlw	0
  3168  00065C  0100               	movlb	0	; () banked
  3169  00065E  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  3170  000660  0ED0               	movlw	208
  3171  000662  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  3172  000664  0E00               	movlw	0
  3173  000666  0100               	movlb	0	; () banked
  3174  000668  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  3175  00066A  0E08               	movlw	8
  3176  00066C  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  3177  00066E  0ED8               	movlw	low setup_AD7147@StageBuffer
  3178  000670  0100               	movlb	0	; () banked
  3179  000672  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  3180  000674  0E00               	movlw	high setup_AD7147@StageBuffer
  3181  000676  0100               	movlb	0	; () banked
  3182  000678  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  3183  00067A  0E00               	movlw	0
  3184  00067C  0100               	movlb	0	; () banked
  3185  00067E  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  3186  000680  0E00               	movlw	0
  3187  000682  6FC8               	movwf	write_AD7147@index& (0+255),b
  3188  000684  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  3189  000688  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  3190  00068C  ECF9  F005         	call	_write_AD7147	;wreg free
  3191                           
  3192                           ;AD7147.c: 166: StageBuffer[0]=0xFFFF;
  3193  000690  0100               	movlb	0	; () banked
  3194  000692  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  3195  000694  69D9               	setf	(setup_AD7147@StageBuffer+1)& (0+255),b
  3196                           
  3197                           ; BSR set to: 0
  3198                           ;AD7147.c: 167: StageBuffer[1]=0x3FFF;
  3199  000696  0E3F               	movlw	63
  3200  000698  0100               	movlb	0	; () banked
  3201  00069A  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  3202  00069C  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  3203                           
  3204                           ; BSR set to: 0
  3205                           ;AD7147.c: 168: StageBuffer[2]=0x0000;
  3206  00069E  0E00               	movlw	0
  3207  0006A0  0100               	movlb	0	; () banked
  3208  0006A2  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  3209  0006A4  0E00               	movlw	0
  3210  0006A6  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  3211                           
  3212                           ; BSR set to: 0
  3213                           ;AD7147.c: 169: StageBuffer[3]=0x2626;
  3214  0006A8  0E26               	movlw	38
  3215  0006AA  0100               	movlb	0	; () banked
  3216  0006AC  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  3217  0006AE  0E26               	movlw	38
  3218  0006B0  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  3219                           
  3220                           ; BSR set to: 0
  3221                           ;AD7147.c: 170: StageBuffer[4]=4000;
  3222  0006B2  0E0F               	movlw	15
  3223  0006B4  0100               	movlb	0	; () banked
  3224  0006B6  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  3225  0006B8  0EA0               	movlw	160
  3226  0006BA  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  3227                           
  3228                           ; BSR set to: 0
  3229                           ;AD7147.c: 171: StageBuffer[5]=2500;
  3230  0006BC  0E09               	movlw	9
  3231  0006BE  0100               	movlb	0	; () banked
  3232  0006C0  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  3233  0006C2  0EC4               	movlw	196
  3234  0006C4  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  3235                           
  3236                           ; BSR set to: 0
  3237                           ;AD7147.c: 172: StageBuffer[6]=4000;
  3238  0006C6  0E0F               	movlw	15
  3239  0006C8  0100               	movlb	0	; () banked
  3240  0006CA  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  3241  0006CC  0EA0               	movlw	160
  3242  0006CE  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  3243                           
  3244                           ; BSR set to: 0
  3245                           ;AD7147.c: 173: StageBuffer[7]=4000;
  3246  0006D0  0E0F               	movlw	15
  3247  0006D2  0100               	movlb	0	; () banked
  3248  0006D4  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  3249  0006D6  0EA0               	movlw	160
  3250  0006D8  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  3251                           
  3252                           ; BSR set to: 0
  3253                           ;AD7147.c: 174: write_AD7147(0x0D8, 8, StageBuffer, 0, cdc);
  3254  0006DA  0E00               	movlw	0
  3255  0006DC  0100               	movlb	0	; () banked
  3256  0006DE  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  3257  0006E0  0ED8               	movlw	216
  3258  0006E2  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  3259  0006E4  0E00               	movlw	0
  3260  0006E6  0100               	movlb	0	; () banked
  3261  0006E8  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  3262  0006EA  0E08               	movlw	8
  3263  0006EC  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  3264  0006EE  0ED8               	movlw	low setup_AD7147@StageBuffer
  3265  0006F0  0100               	movlb	0	; () banked
  3266  0006F2  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  3267  0006F4  0E00               	movlw	high setup_AD7147@StageBuffer
  3268  0006F6  0100               	movlb	0	; () banked
  3269  0006F8  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  3270  0006FA  0E00               	movlw	0
  3271  0006FC  0100               	movlb	0	; () banked
  3272  0006FE  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  3273  000700  0E00               	movlw	0
  3274  000702  6FC8               	movwf	write_AD7147@index& (0+255),b
  3275  000704  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  3276  000708  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  3277  00070C  ECF9  F005         	call	_write_AD7147	;wreg free
  3278                           
  3279                           ;AD7147.c: 181: StageBuffer[0] = 0x00B2;
  3280  000710  0E00               	movlw	0
  3281  000712  0100               	movlb	0	; () banked
  3282  000714  6FD9               	movwf	(setup_AD7147@StageBuffer+1)& (0+255),b
  3283  000716  0EB2               	movlw	178
  3284  000718  6FD8               	movwf	setup_AD7147@StageBuffer& (0+255),b
  3285                           
  3286                           ; BSR set to: 0
  3287                           ;AD7147.c: 182: write_AD7147(0x000, 1, StageBuffer, 0, cdc);
  3288  00071A  0E00               	movlw	0
  3289  00071C  0100               	movlb	0	; () banked
  3290  00071E  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  3291  000720  0E00               	movlw	0
  3292  000722  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  3293  000724  0E00               	movlw	0
  3294  000726  0100               	movlb	0	; () banked
  3295  000728  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  3296  00072A  0E01               	movlw	1
  3297  00072C  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  3298  00072E  0ED8               	movlw	low setup_AD7147@StageBuffer
  3299  000730  0100               	movlb	0	; () banked
  3300  000732  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  3301  000734  0E00               	movlw	high setup_AD7147@StageBuffer
  3302  000736  0100               	movlb	0	; () banked
  3303  000738  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  3304  00073A  0E00               	movlw	0
  3305  00073C  0100               	movlb	0	; () banked
  3306  00073E  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  3307  000740  0E00               	movlw	0
  3308  000742  6FC8               	movwf	write_AD7147@index& (0+255),b
  3309  000744  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  3310  000748  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  3311  00074C  ECF9  F005         	call	_write_AD7147	;wreg free
  3312                           
  3313                           ;AD7147.c: 185: read_AD7147(DataBuffer, 0x008, 3, cdc);
  3314  000750  C0D4  F0C2         	movff	setup_AD7147@DataBuffer,read_AD7147@DataBuffer
  3315  000754  C0D5  F0C3         	movff	setup_AD7147@DataBuffer+1,read_AD7147@DataBuffer+1
  3316  000758  0E00               	movlw	0
  3317  00075A  0100               	movlb	0	; () banked
  3318  00075C  6FC5               	movwf	(read_AD7147@RegisterStartAddress+1)& (0+255),b
  3319  00075E  0E08               	movlw	8
  3320  000760  6FC4               	movwf	read_AD7147@RegisterStartAddress& (0+255),b
  3321  000762  0E00               	movlw	0
  3322  000764  0100               	movlb	0	; () banked
  3323  000766  6FC7               	movwf	(read_AD7147@NumberOfRegisters+1)& (0+255),b
  3324  000768  0E03               	movlw	3
  3325  00076A  6FC6               	movwf	read_AD7147@NumberOfRegisters& (0+255),b
  3326  00076C  C0D6  F0C8         	movff	setup_AD7147@cdc,read_AD7147@cdc
  3327  000770  C0D7  F0C9         	movff	setup_AD7147@cdc+1,read_AD7147@cdc+1
  3328  000774  EC8C  F007         	call	_read_AD7147	;wreg free
  3329                           
  3330                           ;AD7147.c: 187: StageBuffer[2] = 0x3230;
  3331  000778  0E32               	movlw	50
  3332  00077A  0100               	movlb	0	; () banked
  3333  00077C  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  3334  00077E  0E30               	movlw	48
  3335  000780  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  3336                           
  3337                           ; BSR set to: 0
  3338                           ;AD7147.c: 188: StageBuffer[3] = 0x0819;
  3339  000782  0E08               	movlw	8
  3340  000784  0100               	movlb	0	; () banked
  3341  000786  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  3342  000788  0E19               	movlw	25
  3343  00078A  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  3344                           
  3345                           ; BSR set to: 0
  3346                           ;AD7147.c: 189: StageBuffer[4] = 0x0832;
  3347  00078C  0E08               	movlw	8
  3348  00078E  0100               	movlb	0	; () banked
  3349  000790  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  3350  000792  0E32               	movlw	50
  3351  000794  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  3352                           
  3353                           ; BSR set to: 0
  3354                           ;AD7147.c: 190: StageBuffer[5] = 0x0000;
  3355  000796  0E00               	movlw	0
  3356  000798  0100               	movlb	0	; () banked
  3357  00079A  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  3358  00079C  0E00               	movlw	0
  3359  00079E  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  3360                           
  3361                           ; BSR set to: 0
  3362                           ;AD7147.c: 191: StageBuffer[6] = 0x0000;
  3363  0007A0  0E00               	movlw	0
  3364  0007A2  0100               	movlb	0	; () banked
  3365  0007A4  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  3366  0007A6  0E00               	movlw	0
  3367  0007A8  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  3368                           
  3369                           ; BSR set to: 0
  3370                           ;AD7147.c: 192: StageBuffer[7] = 0x0004;
  3371  0007AA  0E00               	movlw	0
  3372  0007AC  0100               	movlb	0	; () banked
  3373  0007AE  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  3374  0007B0  0E04               	movlw	4
  3375  0007B2  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  3376                           
  3377                           ; BSR set to: 0
  3378                           ;AD7147.c: 193: write_AD7147(0x002, 6, StageBuffer, 2, cdc);
  3379  0007B4  0E00               	movlw	0
  3380  0007B6  0100               	movlb	0	; () banked
  3381  0007B8  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  3382  0007BA  0E02               	movlw	2
  3383  0007BC  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  3384  0007BE  0E00               	movlw	0
  3385  0007C0  0100               	movlb	0	; () banked
  3386  0007C2  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  3387  0007C4  0E06               	movlw	6
  3388  0007C6  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  3389  0007C8  0ED8               	movlw	low setup_AD7147@StageBuffer
  3390  0007CA  0100               	movlb	0	; () banked
  3391  0007CC  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  3392  0007CE  0E00               	movlw	high setup_AD7147@StageBuffer
  3393  0007D0  0100               	movlb	0	; () banked
  3394  0007D2  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  3395  0007D4  0E00               	movlw	0
  3396  0007D6  0100               	movlb	0	; () banked
  3397  0007D8  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  3398  0007DA  0E02               	movlw	2
  3399  0007DC  6FC8               	movwf	write_AD7147@index& (0+255),b
  3400  0007DE  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  3401  0007E2  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  3402  0007E6  ECF9  F005         	call	_write_AD7147	;wreg free
  3403                           
  3404                           ;AD7147.c: 196: StageBuffer[1] = 0x0007;
  3405  0007EA  0E00               	movlw	0
  3406  0007EC  0100               	movlb	0	; () banked
  3407  0007EE  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  3408  0007F0  0E07               	movlw	7
  3409  0007F2  6FDA               	movwf	(setup_AD7147@StageBuffer+2)& (0+255),b
  3410                           
  3411                           ; BSR set to: 0
  3412                           ;AD7147.c: 197: write_AD7147(0x001, 1, StageBuffer, 1, cdc);
  3413  0007F4  0E00               	movlw	0
  3414  0007F6  0100               	movlb	0	; () banked
  3415  0007F8  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  3416  0007FA  0E01               	movlw	1
  3417  0007FC  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  3418  0007FE  0E00               	movlw	0
  3419  000800  0100               	movlb	0	; () banked
  3420  000802  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  3421  000804  0E01               	movlw	1
  3422  000806  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  3423  000808  0ED8               	movlw	low setup_AD7147@StageBuffer
  3424  00080A  0100               	movlb	0	; () banked
  3425  00080C  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  3426  00080E  0E00               	movlw	high setup_AD7147@StageBuffer
  3427  000810  0100               	movlb	0	; () banked
  3428  000812  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  3429  000814  0E00               	movlw	0
  3430  000816  0100               	movlb	0	; () banked
  3431  000818  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  3432  00081A  0E01               	movlw	1
  3433  00081C  6FC8               	movwf	write_AD7147@index& (0+255),b
  3434  00081E  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  3435  000822  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  3436  000826  ECF9  F005         	call	_write_AD7147	;wreg free
  3437                           
  3438                           ;AD7147.c: 200: StageBuffer[2] = 0x4000;
  3439  00082A  0E40               	movlw	64
  3440  00082C  0100               	movlb	0	; () banked
  3441  00082E  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  3442  000830  0E00               	movlw	0
  3443  000832  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  3444                           
  3445                           ; BSR set to: 0
  3446                           ;AD7147.c: 201: write_AD7147(0x002, 1, StageBuffer, 2, cdc);
  3447  000834  0E00               	movlw	0
  3448  000836  0100               	movlb	0	; () banked
  3449  000838  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  3450  00083A  0E02               	movlw	2
  3451  00083C  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  3452  00083E  0E00               	movlw	0
  3453  000840  0100               	movlb	0	; () banked
  3454  000842  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  3455  000844  0E01               	movlw	1
  3456  000846  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  3457  000848  0ED8               	movlw	low setup_AD7147@StageBuffer
  3458  00084A  0100               	movlb	0	; () banked
  3459  00084C  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  3460  00084E  0E00               	movlw	high setup_AD7147@StageBuffer
  3461  000850  0100               	movlb	0	; () banked
  3462  000852  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  3463  000854  0E00               	movlw	0
  3464  000856  0100               	movlb	0	; () banked
  3465  000858  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  3466  00085A  0E02               	movlw	2
  3467  00085C  6FC8               	movwf	write_AD7147@index& (0+255),b
  3468  00085E  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  3469  000862  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  3470  000866  ECF9  F005         	call	_write_AD7147	;wreg free
  3471                           
  3472                           ;AD7147.c: 204: read_AD7147(DataBuffer, 0x008, 3, cdc);
  3473  00086A  C0D4  F0C2         	movff	setup_AD7147@DataBuffer,read_AD7147@DataBuffer
  3474  00086E  C0D5  F0C3         	movff	setup_AD7147@DataBuffer+1,read_AD7147@DataBuffer+1
  3475  000872  0E00               	movlw	0
  3476  000874  0100               	movlb	0	; () banked
  3477  000876  6FC5               	movwf	(read_AD7147@RegisterStartAddress+1)& (0+255),b
  3478  000878  0E08               	movlw	8
  3479  00087A  6FC4               	movwf	read_AD7147@RegisterStartAddress& (0+255),b
  3480  00087C  0E00               	movlw	0
  3481  00087E  0100               	movlb	0	; () banked
  3482  000880  6FC7               	movwf	(read_AD7147@NumberOfRegisters+1)& (0+255),b
  3483  000882  0E03               	movlw	3
  3484  000884  6FC6               	movwf	read_AD7147@NumberOfRegisters& (0+255),b
  3485  000886  C0D6  F0C8         	movff	setup_AD7147@cdc,read_AD7147@cdc
  3486  00088A  C0D7  F0C9         	movff	setup_AD7147@cdc+1,read_AD7147@cdc+1
  3487  00088E  EC8C  F007         	call	_read_AD7147	;wreg free
  3488  000892  0012               	return		;funcret
  3489  000894                     __end_of_setup_AD7147:
  3490                           	opt stack 0
  3491                           tblptru	equ	0xFF8
  3492                           tblptrh	equ	0xFF7
  3493                           tblptrl	equ	0xFF6
  3494                           tablat	equ	0xFF5
  3495                           postinc0	equ	0xFEE
  3496                           wreg	equ	0xFE8
  3497                           plusw1	equ	0xFE3
  3498                           postinc2	equ	0xFDE
  3499                           postdec2	equ	0xFDD
  3500                           plusw2	equ	0xFDB
  3501                           fsr2h	equ	0xFDA
  3502                           fsr2l	equ	0xFD9
  3503                           status	equ	0xFD8
  3504                           
  3505 ;; *************** function _write_AD7147 *****************
  3506 ;; Defined at:
  3507 ;;		line 208 in file "AD7147.c"
  3508 ;; Parameters:    Size  Location     Type
  3509 ;;  RegisterStar    2   22[BANK0 ] unsigned int 
  3510 ;;  NumberOfRegi    2   24[BANK0 ] unsigned int 
  3511 ;;  OutputBuffer    2   26[BANK0 ] PTR unsigned int 
  3512 ;;		 -> setup_AD7147@StageBuffer(16), 
  3513 ;;  index           2   28[BANK0 ] unsigned int 
  3514 ;;  cdc             2   30[BANK0 ] unsigned int 
  3515 ;; Auto vars:     Size  Location     Type
  3516 ;;  i               2   38[BANK0 ] unsigned int 
  3517 ;;  Data_Value      2   36[BANK0 ] unsigned int 
  3518 ;;  Register_Val    2   34[BANK0 ] unsigned int 
  3519 ;; Return value:  Size  Location     Type
  3520 ;;                  1    wreg      void 
  3521 ;; Registers used:
  3522 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3523 ;; Tracked objects:
  3524 ;;		On entry : 0/0
  3525 ;;		On exit  : 0/0
  3526 ;;		Unchanged: 0/0
  3527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3528 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3529 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3530 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3531 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3532 ;;Total ram usage:       18 bytes
  3533 ;; Hardware stack levels used:    1
  3534 ;; Hardware stack levels required when called:    4
  3535 ;; This function calls:
  3536 ;;		_get_CDC
  3537 ;;		_w32_spi
  3538 ;; This function is called by:
  3539 ;;		_setup_AD7147
  3540 ;; This function uses a non-reentrant model
  3541 ;;
  3542                           
  3543                           	psect	text12
  3544  000BF2                     __ptext12:
  3545                           	opt stack 0
  3546  000BF2                     _write_AD7147:
  3547                           	opt stack 25
  3548                           
  3549                           ;AD7147.c: 210: get_CDC(cdc,0);
  3550                           
  3551                           ;incstack = 0
  3552  000BF2  C0CA  F0AC         	movff	write_AD7147@cdc,get_CDC@cdc
  3553  000BF6  C0CB  F0AD         	movff	write_AD7147@cdc+1,get_CDC@cdc+1
  3554  000BFA  0E00               	movlw	0
  3555  000BFC  0100               	movlb	0	; () banked
  3556  000BFE  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  3557  000C00  0E00               	movlw	0
  3558  000C02  6FAE               	movwf	get_CDC@state& (0+255),b
  3559  000C04  ECE4  F00A         	call	_get_CDC	;wreg free
  3560                           
  3561                           ;AD7147.c: 211: unsigned int Register_Value = 0xE000 + RegisterStartAddress;
  3562  000C08  0E00               	movlw	0
  3563  000C0A  0100               	movlb	0	; () banked
  3564  000C0C  25C2               	addwf	write_AD7147@RegisterStartAddress& (0+255),w,b
  3565  000C0E  0100               	movlb	0	; () banked
  3566  000C10  6FCE               	movwf	write_AD7147@Register_Value& (0+255),b
  3567  000C12  0EE0               	movlw	224
  3568  000C14  0100               	movlb	0	; () banked
  3569  000C16  21C3               	addwfc	(write_AD7147@RegisterStartAddress+1)& (0+255),w,b
  3570  000C18  0100               	movlb	0	; () banked
  3571  000C1A  6FCF               	movwf	(write_AD7147@Register_Value+1)& (0+255),b
  3572                           
  3573                           ; BSR set to: 0
  3574                           ;AD7147.c: 212: unsigned int Data_Value = 0;
  3575  000C1C  0E00               	movlw	0
  3576  000C1E  0100               	movlb	0	; () banked
  3577  000C20  6FD1               	movwf	(write_AD7147@Data_Value+1)& (0+255),b
  3578  000C22  0E00               	movlw	0
  3579  000C24  6FD0               	movwf	write_AD7147@Data_Value& (0+255),b
  3580                           
  3581                           ; BSR set to: 0
  3582                           ;AD7147.c: 213: for (unsigned int i=0; i<NumberOfRegisters; i++)
  3583  000C26  0E00               	movlw	0
  3584  000C28  0100               	movlb	0	; () banked
  3585  000C2A  6FD3               	movwf	(write_AD7147@i+1)& (0+255),b
  3586  000C2C  0E00               	movlw	0
  3587  000C2E  6FD2               	movwf	write_AD7147@i& (0+255),b
  3588  000C30  D033               	goto	l1883
  3589  000C32                     l1877:
  3590                           
  3591                           ; BSR set to: 0
  3592                           ;AD7147.c: 214: {
  3593                           ;AD7147.c: 215: Data_Value = OutputBuffer[index+i];
  3594  000C32  0100               	movlb	0	; () banked
  3595  000C34  51D2               	movf	write_AD7147@i& (0+255),w,b
  3596  000C36  0100               	movlb	0	; () banked
  3597  000C38  25C8               	addwf	write_AD7147@index& (0+255),w,b
  3598  000C3A  0100               	movlb	0	; () banked
  3599  000C3C  6FCC               	movwf	??_write_AD7147& (0+255),b
  3600  000C3E  0100               	movlb	0	; () banked
  3601  000C40  51D3               	movf	(write_AD7147@i+1)& (0+255),w,b
  3602  000C42  0100               	movlb	0	; () banked
  3603  000C44  21C9               	addwfc	(write_AD7147@index+1)& (0+255),w,b
  3604  000C46  0100               	movlb	0	; () banked
  3605  000C48  6FCD               	movwf	(??_write_AD7147+1)& (0+255),b
  3606  000C4A  90D8               	bcf	status,0,c
  3607  000C4C  0100               	movlb	0	; () banked
  3608  000C4E  37CC               	rlcf	??_write_AD7147& (0+255),f,b
  3609  000C50  37CD               	rlcf	(??_write_AD7147+1)& (0+255),f,b
  3610  000C52  0100               	movlb	0	; () banked
  3611  000C54  51CC               	movf	??_write_AD7147& (0+255),w,b
  3612  000C56  0100               	movlb	0	; () banked
  3613  000C58  25C6               	addwf	write_AD7147@OutputBuffer& (0+255),w,b
  3614  000C5A  6ED9               	movwf	fsr2l,c
  3615  000C5C  0100               	movlb	0	; () banked
  3616  000C5E  51CD               	movf	(??_write_AD7147+1)& (0+255),w,b
  3617  000C60  0100               	movlb	0	; () banked
  3618  000C62  21C7               	addwfc	(write_AD7147@OutputBuffer+1)& (0+255),w,b
  3619  000C64  6EDA               	movwf	fsr2h,c
  3620  000C66  CFDE F0D0          	movff	postinc2,write_AD7147@Data_Value
  3621  000C6A  CFDD F0D1          	movff	postdec2,write_AD7147@Data_Value+1
  3622                           
  3623                           ; BSR set to: 0
  3624                           ;AD7147.c: 216: w32_spi(Register_Value+i,Data_Value);
  3625  000C6E  0100               	movlb	0	; () banked
  3626  000C70  51D2               	movf	write_AD7147@i& (0+255),w,b
  3627  000C72  0100               	movlb	0	; () banked
  3628  000C74  25CE               	addwf	write_AD7147@Register_Value& (0+255),w,b
  3629  000C76  0100               	movlb	0	; () banked
  3630  000C78  6FAC               	movwf	w32_spi@address& (0+255),b
  3631  000C7A  0100               	movlb	0	; () banked
  3632  000C7C  51D3               	movf	(write_AD7147@i+1)& (0+255),w,b
  3633  000C7E  0100               	movlb	0	; () banked
  3634  000C80  21CF               	addwfc	(write_AD7147@Register_Value+1)& (0+255),w,b
  3635  000C82  0100               	movlb	0	; () banked
  3636  000C84  6FAD               	movwf	(w32_spi@address+1)& (0+255),b
  3637  000C86  C0D0  F0AE         	movff	write_AD7147@Data_Value,w32_spi@data
  3638  000C8A  C0D1  F0AF         	movff	write_AD7147@Data_Value+1,w32_spi@data+1
  3639  000C8E  EC78  F008         	call	_w32_spi	;wreg free
  3640  000C92  0100               	movlb	0	; () banked
  3641  000C94  4BD2               	infsnz	write_AD7147@i& (0+255),f,b
  3642  000C96  2BD3               	incf	(write_AD7147@i+1)& (0+255),f,b
  3643  000C98                     l1883:
  3644                           
  3645                           ; BSR set to: 0
  3646  000C98  0100               	movlb	0	; () banked
  3647  000C9A  51C4               	movf	write_AD7147@NumberOfRegisters& (0+255),w,b
  3648  000C9C  0100               	movlb	0	; () banked
  3649  000C9E  5DD2               	subwf	write_AD7147@i& (0+255),w,b
  3650  000CA0  0100               	movlb	0	; () banked
  3651  000CA2  51C5               	movf	(write_AD7147@NumberOfRegisters+1)& (0+255),w,b
  3652  000CA4  0100               	movlb	0	; () banked
  3653  000CA6  59D3               	subwfb	(write_AD7147@i+1)& (0+255),w,b
  3654  000CA8  A0D8               	btfss	status,0,c
  3655  000CAA  D7C3               	goto	l1877
  3656                           
  3657                           ; BSR set to: 0
  3658                           ;AD7147.c: 217: }
  3659                           ;AD7147.c: 218: get_CDC(cdc,1);
  3660                           
  3661                           ; BSR set to: 0
  3662  000CAC  C0CA  F0AC         	movff	write_AD7147@cdc,get_CDC@cdc
  3663  000CB0  C0CB  F0AD         	movff	write_AD7147@cdc+1,get_CDC@cdc+1
  3664  000CB4  0E00               	movlw	0
  3665  000CB6  0100               	movlb	0	; () banked
  3666  000CB8  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  3667  000CBA  0E01               	movlw	1
  3668  000CBC  6FAE               	movwf	get_CDC@state& (0+255),b
  3669  000CBE  ECE4  F00A         	call	_get_CDC	;wreg free
  3670  000CC2  0012               	return		;funcret
  3671  000CC4                     __end_of_write_AD7147:
  3672                           	opt stack 0
  3673                           tblptru	equ	0xFF8
  3674                           tblptrh	equ	0xFF7
  3675                           tblptrl	equ	0xFF6
  3676                           tablat	equ	0xFF5
  3677                           postinc0	equ	0xFEE
  3678                           wreg	equ	0xFE8
  3679                           plusw1	equ	0xFE3
  3680                           postinc2	equ	0xFDE
  3681                           postdec2	equ	0xFDD
  3682                           plusw2	equ	0xFDB
  3683                           fsr2h	equ	0xFDA
  3684                           fsr2l	equ	0xFD9
  3685                           status	equ	0xFD8
  3686                           
  3687 ;; *************** function _read_AD7147 *****************
  3688 ;; Defined at:
  3689 ;;		line 221 in file "AD7147.c"
  3690 ;; Parameters:    Size  Location     Type
  3691 ;;  DataBuffer      2   22[BANK0 ] PTR unsigned int 
  3692 ;;		 -> interrupt_values_cdc2(6), interrupt_values_cdc1(6), 
  3693 ;;  RegisterStar    2   24[BANK0 ] unsigned int 
  3694 ;;  NumberOfRegi    2   26[BANK0 ] unsigned int 
  3695 ;;  cdc             2   28[BANK0 ] unsigned int 
  3696 ;; Auto vars:     Size  Location     Type
  3697 ;;  i               2   32[BANK0 ] unsigned int 
  3698 ;;  Register_Val    2   30[BANK0 ] unsigned int 
  3699 ;; Return value:  Size  Location     Type
  3700 ;;                  1    wreg      void 
  3701 ;; Registers used:
  3702 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3703 ;; Tracked objects:
  3704 ;;		On entry : 0/0
  3705 ;;		On exit  : 0/0
  3706 ;;		Unchanged: 0/0
  3707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3708 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3709 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3711 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3712 ;;Total ram usage:       12 bytes
  3713 ;; Hardware stack levels used:    1
  3714 ;; Hardware stack levels required when called:    4
  3715 ;; This function calls:
  3716 ;;		_get_CDC
  3717 ;;		_w16_r16_spi
  3718 ;; This function is called by:
  3719 ;;		_setup_AD7147
  3720 ;;		_main
  3721 ;; This function uses a non-reentrant model
  3722 ;;
  3723                           
  3724                           	psect	text13
  3725  000F18                     __ptext13:
  3726                           	opt stack 0
  3727  000F18                     _read_AD7147:
  3728                           	opt stack 25
  3729                           
  3730                           ;AD7147.c: 223: get_CDC(cdc,0);
  3731                           
  3732                           ;incstack = 0
  3733  000F18  C0C8  F0AC         	movff	read_AD7147@cdc,get_CDC@cdc
  3734  000F1C  C0C9  F0AD         	movff	read_AD7147@cdc+1,get_CDC@cdc+1
  3735  000F20  0E00               	movlw	0
  3736  000F22  0100               	movlb	0	; () banked
  3737  000F24  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  3738  000F26  0E00               	movlw	0
  3739  000F28  6FAE               	movwf	get_CDC@state& (0+255),b
  3740  000F2A  ECE4  F00A         	call	_get_CDC	;wreg free
  3741                           
  3742                           ;AD7147.c: 224: unsigned int Register_Values = 0xE400 + RegisterStartAddress;
  3743  000F2E  0E00               	movlw	0
  3744  000F30  0100               	movlb	0	; () banked
  3745  000F32  25C4               	addwf	read_AD7147@RegisterStartAddress& (0+255),w,b
  3746  000F34  0100               	movlb	0	; () banked
  3747  000F36  6FCA               	movwf	read_AD7147@Register_Values& (0+255),b
  3748  000F38  0EE4               	movlw	228
  3749  000F3A  0100               	movlb	0	; () banked
  3750  000F3C  21C5               	addwfc	(read_AD7147@RegisterStartAddress+1)& (0+255),w,b
  3751  000F3E  0100               	movlb	0	; () banked
  3752  000F40  6FCB               	movwf	(read_AD7147@Register_Values+1)& (0+255),b
  3753                           
  3754                           ; BSR set to: 0
  3755                           ;AD7147.c: 225: for (unsigned int i=0; i<NumberOfRegisters; i++)
  3756  000F42  0E00               	movlw	0
  3757  000F44  0100               	movlb	0	; () banked
  3758  000F46  6FCD               	movwf	(read_AD7147@i+1)& (0+255),b
  3759  000F48  0E00               	movlw	0
  3760  000F4A  6FCC               	movwf	read_AD7147@i& (0+255),b
  3761  000F4C  D024               	goto	l1897
  3762  000F4E                     l1893:
  3763                           
  3764                           ; BSR set to: 0
  3765                           ;AD7147.c: 226: {
  3766                           ;AD7147.c: 227: DataBuffer[i]=w16_r16_spi(Register_Values+i);
  3767  000F4E  0100               	movlb	0	; () banked
  3768  000F50  51CC               	movf	read_AD7147@i& (0+255),w,b
  3769  000F52  0100               	movlb	0	; () banked
  3770  000F54  25CA               	addwf	read_AD7147@Register_Values& (0+255),w,b
  3771  000F56  0100               	movlb	0	; () banked
  3772  000F58  6FAC               	movwf	w16_r16_spi@address& (0+255),b
  3773  000F5A  0100               	movlb	0	; () banked
  3774  000F5C  51CD               	movf	(read_AD7147@i+1)& (0+255),w,b
  3775  000F5E  0100               	movlb	0	; () banked
  3776  000F60  21CB               	addwfc	(read_AD7147@Register_Values+1)& (0+255),w,b
  3777  000F62  0100               	movlb	0	; () banked
  3778  000F64  6FAD               	movwf	(w16_r16_spi@address+1)& (0+255),b
  3779  000F66  ECE1  F007         	call	_w16_r16_spi	;wreg free
  3780  000F6A  90D8               	bcf	status,0,c
  3781  000F6C  0100               	movlb	0	; () banked
  3782  000F6E  35CC               	rlcf	read_AD7147@i& (0+255),w,b
  3783  000F70  6ED9               	movwf	fsr2l,c
  3784  000F72  0100               	movlb	0	; () banked
  3785  000F74  35CD               	rlcf	(read_AD7147@i+1)& (0+255),w,b
  3786  000F76  6EDA               	movwf	fsr2h,c
  3787  000F78  0100               	movlb	0	; () banked
  3788  000F7A  51C2               	movf	read_AD7147@DataBuffer& (0+255),w,b
  3789  000F7C  26D9               	addwf	fsr2l,f,c
  3790  000F7E  0100               	movlb	0	; () banked
  3791  000F80  51C3               	movf	(read_AD7147@DataBuffer+1)& (0+255),w,b
  3792  000F82  22DA               	addwfc	fsr2h,f,c
  3793  000F84  0100               	movlb	0	; () banked
  3794  000F86  C0AC  FFDE         	movff	?_w16_r16_spi,postinc2
  3795  000F8A  0100               	movlb	0	; () banked
  3796  000F8C  C0AD  FFDD         	movff	?_w16_r16_spi+1,postdec2
  3797                           
  3798                           ; BSR set to: 0
  3799  000F90  0100               	movlb	0	; () banked
  3800  000F92  4BCC               	infsnz	read_AD7147@i& (0+255),f,b
  3801  000F94  2BCD               	incf	(read_AD7147@i+1)& (0+255),f,b
  3802  000F96                     l1897:
  3803                           
  3804                           ; BSR set to: 0
  3805  000F96  0100               	movlb	0	; () banked
  3806  000F98  51C6               	movf	read_AD7147@NumberOfRegisters& (0+255),w,b
  3807  000F9A  0100               	movlb	0	; () banked
  3808  000F9C  5DCC               	subwf	read_AD7147@i& (0+255),w,b
  3809  000F9E  0100               	movlb	0	; () banked
  3810  000FA0  51C7               	movf	(read_AD7147@NumberOfRegisters+1)& (0+255),w,b
  3811  000FA2  0100               	movlb	0	; () banked
  3812  000FA4  59CD               	subwfb	(read_AD7147@i+1)& (0+255),w,b
  3813  000FA6  A0D8               	btfss	status,0,c
  3814  000FA8  D7D2               	goto	l1893
  3815                           
  3816                           ; BSR set to: 0
  3817                           ;AD7147.c: 228: }
  3818                           ;AD7147.c: 229: get_CDC(cdc,1);
  3819                           
  3820                           ; BSR set to: 0
  3821  000FAA  C0C8  F0AC         	movff	read_AD7147@cdc,get_CDC@cdc
  3822  000FAE  C0C9  F0AD         	movff	read_AD7147@cdc+1,get_CDC@cdc+1
  3823  000FB2  0E00               	movlw	0
  3824  000FB4  0100               	movlb	0	; () banked
  3825  000FB6  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  3826  000FB8  0E01               	movlw	1
  3827  000FBA  6FAE               	movwf	get_CDC@state& (0+255),b
  3828  000FBC  ECE4  F00A         	call	_get_CDC	;wreg free
  3829  000FC0  0012               	return		;funcret
  3830  000FC2                     __end_of_read_AD7147:
  3831                           	opt stack 0
  3832                           tblptru	equ	0xFF8
  3833                           tblptrh	equ	0xFF7
  3834                           tblptrl	equ	0xFF6
  3835                           tablat	equ	0xFF5
  3836                           postinc0	equ	0xFEE
  3837                           wreg	equ	0xFE8
  3838                           plusw1	equ	0xFE3
  3839                           postinc2	equ	0xFDE
  3840                           postdec2	equ	0xFDD
  3841                           plusw2	equ	0xFDB
  3842                           fsr2h	equ	0xFDA
  3843                           fsr2l	equ	0xFD9
  3844                           status	equ	0xFD8
  3845                           
  3846 ;; *************** function _read_sensor *****************
  3847 ;; Defined at:
  3848 ;;		line 232 in file "AD7147.c"
  3849 ;; Parameters:    Size  Location     Type
  3850 ;;  sensor_value    2   22[BANK0 ] PTR unsigned int 
  3851 ;;		 -> sensor_values(48), 
  3852 ;;  sensor          2   24[BANK0 ] unsigned int 
  3853 ;; Auto vars:     Size  Location     Type
  3854 ;;  cdc_sensor      2   32[BANK0 ] unsigned int 
  3855 ;;  register1       2   30[BANK0 ] unsigned int 
  3856 ;; Return value:  Size  Location     Type
  3857 ;;                  1    wreg      void 
  3858 ;; Registers used:
  3859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3860 ;; Tracked objects:
  3861 ;;		On entry : 0/0
  3862 ;;		On exit  : 0/0
  3863 ;;		Unchanged: 0/0
  3864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3865 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3866 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3867 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3868 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3869 ;;Total ram usage:       12 bytes
  3870 ;; Hardware stack levels used:    1
  3871 ;; Hardware stack levels required when called:    5
  3872 ;; This function calls:
  3873 ;;		_sensor_CDC
  3874 ;;		_w16_r16_spi
  3875 ;; This function is called by:
  3876 ;;		_main
  3877 ;; This function uses a non-reentrant model
  3878 ;;
  3879                           
  3880                           	psect	text14
  3881  000CC4                     __ptext14:
  3882                           	opt stack 0
  3883  000CC4                     _read_sensor:
  3884                           	opt stack 25
  3885                           
  3886                           ;AD7147.c: 234: unsigned int cdc_sensor = 0;
  3887                           
  3888                           ;incstack = 0
  3889  000CC4  0E00               	movlw	0
  3890  000CC6  0100               	movlb	0	; () banked
  3891  000CC8  6FCD               	movwf	(read_sensor@cdc_sensor+1)& (0+255),b
  3892  000CCA  0E00               	movlw	0
  3893  000CCC  6FCC               	movwf	read_sensor@cdc_sensor& (0+255),b
  3894                           
  3895                           ; BSR set to: 0
  3896                           ;AD7147.c: 235: if (sensor > 12)
  3897  000CCE  0100               	movlb	0	; () banked
  3898  000CD0  51C5               	movf	(read_sensor@sensor+1)& (0+255),w,b
  3899  000CD2  E105               	bnz	u1000
  3900  000CD4  0E0D               	movlw	13
  3901  000CD6  0100               	movlb	0	; () banked
  3902  000CD8  5DC4               	subwf	read_sensor@sensor& (0+255),w,b
  3903  000CDA  A0D8               	btfss	status,0,c
  3904  000CDC  D00B               	goto	l38
  3905  000CDE                     u1000:
  3906                           
  3907                           ; BSR set to: 0
  3908                           ;AD7147.c: 236: {
  3909                           ;AD7147.c: 237: cdc_sensor = sensor - 12;
  3910  000CDE  0EF4               	movlw	244
  3911  000CE0  0100               	movlb	0	; () banked
  3912  000CE2  25C4               	addwf	read_sensor@sensor& (0+255),w,b
  3913  000CE4  0100               	movlb	0	; () banked
  3914  000CE6  6FCC               	movwf	read_sensor@cdc_sensor& (0+255),b
  3915  000CE8  0EFF               	movlw	255
  3916  000CEA  0100               	movlb	0	; () banked
  3917  000CEC  21C5               	addwfc	(read_sensor@sensor+1)& (0+255),w,b
  3918  000CEE  0100               	movlb	0	; () banked
  3919  000CF0  6FCD               	movwf	(read_sensor@cdc_sensor+1)& (0+255),b
  3920                           
  3921                           ;AD7147.c: 238: }
  3922  000CF2  D004               	goto	l2219
  3923  000CF4                     l38:
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;AD7147.c: 239: else
  3927                           ;AD7147.c: 240: {
  3928                           ;AD7147.c: 241: cdc_sensor = sensor;
  3929  000CF4  C0C4  F0CC         	movff	read_sensor@sensor,read_sensor@cdc_sensor
  3930  000CF8  C0C5  F0CD         	movff	read_sensor@sensor+1,read_sensor@cdc_sensor+1
  3931  000CFC                     l2219:
  3932                           
  3933                           ; BSR set to: 0
  3934                           ;AD7147.c: 242: }
  3935                           ;AD7147.c: 243: unsigned int register1 = 0xE400 + 0x00A + cdc_sensor;
  3936  000CFC  0E0A               	movlw	10
  3937  000CFE  0100               	movlb	0	; () banked
  3938  000D00  25CC               	addwf	read_sensor@cdc_sensor& (0+255),w,b
  3939  000D02  0100               	movlb	0	; () banked
  3940  000D04  6FCA               	movwf	read_sensor@register1& (0+255),b
  3941  000D06  0EE4               	movlw	228
  3942  000D08  0100               	movlb	0	; () banked
  3943  000D0A  21CD               	addwfc	(read_sensor@cdc_sensor+1)& (0+255),w,b
  3944  000D0C  0100               	movlb	0	; () banked
  3945  000D0E  6FCB               	movwf	(read_sensor@register1+1)& (0+255),b
  3946                           
  3947                           ; BSR set to: 0
  3948                           ;AD7147.c: 244: sensor_CDC(sensor, 0);
  3949  000D10  C0C4  F0B0         	movff	read_sensor@sensor,sensor_CDC@sensor
  3950  000D14  C0C5  F0B1         	movff	read_sensor@sensor+1,sensor_CDC@sensor+1
  3951  000D18  0E00               	movlw	0
  3952  000D1A  0100               	movlb	0	; () banked
  3953  000D1C  6FB3               	movwf	(sensor_CDC@state+1)& (0+255),b
  3954  000D1E  0E00               	movlw	0
  3955  000D20  6FB2               	movwf	sensor_CDC@state& (0+255),b
  3956  000D22  EC8B  F00A         	call	_sensor_CDC	;wreg free
  3957                           
  3958                           ;AD7147.c: 245: sensor_values[sensor-1] = w16_r16_spi(register1);
  3959  000D26  C0CA  F0AC         	movff	read_sensor@register1,w16_r16_spi@address
  3960  000D2A  C0CB  F0AD         	movff	read_sensor@register1+1,w16_r16_spi@address+1
  3961  000D2E  ECE1  F007         	call	_w16_r16_spi	;wreg free
  3962  000D32  0EFE               	movlw	254
  3963  000D34  0100               	movlb	0	; () banked
  3964  000D36  6FC6               	movwf	??_read_sensor& (0+255),b
  3965  000D38  0EFF               	movlw	255
  3966  000D3A  0100               	movlb	0	; () banked
  3967  000D3C  6FC7               	movwf	(??_read_sensor+1)& (0+255),b
  3968  000D3E  C0C4  F0C8         	movff	read_sensor@sensor,??_read_sensor+2
  3969  000D42  C0C5  F0C9         	movff	read_sensor@sensor+1,??_read_sensor+3
  3970  000D46  90D8               	bcf	status,0,c
  3971  000D48  0100               	movlb	0	; () banked
  3972  000D4A  37C8               	rlcf	(??_read_sensor+2)& (0+255),f,b
  3973  000D4C  37C9               	rlcf	(??_read_sensor+3)& (0+255),f,b
  3974  000D4E  0100               	movlb	0	; () banked
  3975  000D50  51C6               	movf	??_read_sensor& (0+255),w,b
  3976  000D52  0100               	movlb	0	; () banked
  3977  000D54  27C8               	addwf	(??_read_sensor+2)& (0+255),f,b
  3978  000D56  0100               	movlb	0	; () banked
  3979  000D58  51C7               	movf	(??_read_sensor+1)& (0+255),w,b
  3980  000D5A  0100               	movlb	0	; () banked
  3981  000D5C  23C9               	addwfc	(??_read_sensor+3)& (0+255),f,b
  3982  000D5E  0100               	movlb	0	; () banked
  3983  000D60  51C8               	movf	(??_read_sensor+2)& (0+255),w,b
  3984  000D62  0100               	movlb	0	; () banked
  3985  000D64  25C2               	addwf	read_sensor@sensor_values& (0+255),w,b
  3986  000D66  6ED9               	movwf	fsr2l,c
  3987  000D68  0100               	movlb	0	; () banked
  3988  000D6A  51C9               	movf	(??_read_sensor+3)& (0+255),w,b
  3989  000D6C  0100               	movlb	0	; () banked
  3990  000D6E  21C3               	addwfc	(read_sensor@sensor_values+1)& (0+255),w,b
  3991  000D70  6EDA               	movwf	fsr2h,c
  3992  000D72  0100               	movlb	0	; () banked
  3993  000D74  C0AC  FFDE         	movff	?_w16_r16_spi,postinc2
  3994  000D78  0100               	movlb	0	; () banked
  3995  000D7A  C0AD  FFDD         	movff	?_w16_r16_spi+1,postdec2
  3996                           
  3997                           ; BSR set to: 0
  3998                           ;AD7147.c: 246: sensor_CDC(sensor, 1);
  3999  000D7E  C0C4  F0B0         	movff	read_sensor@sensor,sensor_CDC@sensor
  4000  000D82  C0C5  F0B1         	movff	read_sensor@sensor+1,sensor_CDC@sensor+1
  4001  000D86  0E00               	movlw	0
  4002  000D88  0100               	movlb	0	; () banked
  4003  000D8A  6FB3               	movwf	(sensor_CDC@state+1)& (0+255),b
  4004  000D8C  0E01               	movlw	1
  4005  000D8E  6FB2               	movwf	sensor_CDC@state& (0+255),b
  4006  000D90  EC8B  F00A         	call	_sensor_CDC	;wreg free
  4007  000D94  0012               	return		;funcret
  4008  000D96                     __end_of_read_sensor:
  4009                           	opt stack 0
  4010                           tblptru	equ	0xFF8
  4011                           tblptrh	equ	0xFF7
  4012                           tblptrl	equ	0xFF6
  4013                           tablat	equ	0xFF5
  4014                           postinc0	equ	0xFEE
  4015                           wreg	equ	0xFE8
  4016                           plusw1	equ	0xFE3
  4017                           postinc2	equ	0xFDE
  4018                           postdec2	equ	0xFDD
  4019                           plusw2	equ	0xFDB
  4020                           fsr2h	equ	0xFDA
  4021                           fsr2l	equ	0xFD9
  4022                           status	equ	0xFD8
  4023                           
  4024 ;; *************** function _sensor_CDC *****************
  4025 ;; Defined at:
  4026 ;;		line 291 in file "AD7147.c"
  4027 ;; Parameters:    Size  Location     Type
  4028 ;;  sensor          2    4[BANK0 ] unsigned int 
  4029 ;;  state           2    6[BANK0 ] unsigned int 
  4030 ;; Auto vars:     Size  Location     Type
  4031 ;;		None
  4032 ;; Return value:  Size  Location     Type
  4033 ;;                  1    wreg      void 
  4034 ;; Registers used:
  4035 ;;		wreg, status,2, status,0, cstack
  4036 ;; Tracked objects:
  4037 ;;		On entry : 0/0
  4038 ;;		On exit  : 0/0
  4039 ;;		Unchanged: 0/0
  4040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4041 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4044 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4045 ;;Total ram usage:        4 bytes
  4046 ;; Hardware stack levels used:    1
  4047 ;; Hardware stack levels required when called:    4
  4048 ;; This function calls:
  4049 ;;		_get_CDC
  4050 ;; This function is called by:
  4051 ;;		_read_sensor
  4052 ;;		_read_sensors
  4053 ;; This function uses a non-reentrant model
  4054 ;;
  4055                           
  4056                           	psect	text15
  4057  001516                     __ptext15:
  4058                           	opt stack 0
  4059  001516                     _sensor_CDC:
  4060                           	opt stack 25
  4061                           
  4062                           ;AD7147.c: 295: if (sensor > 12)
  4063                           
  4064                           ;incstack = 0
  4065  001516  0100               	movlb	0	; () banked
  4066  001518  51B1               	movf	(sensor_CDC@sensor+1)& (0+255),w,b
  4067  00151A  E105               	bnz	u870
  4068  00151C  0E0D               	movlw	13
  4069  00151E  0100               	movlb	0	; () banked
  4070  001520  5DB0               	subwf	sensor_CDC@sensor& (0+255),w,b
  4071  001522  A0D8               	btfss	status,0,c
  4072  001524  D00C               	goto	l1905
  4073  001526                     u870:
  4074                           
  4075                           ; BSR set to: 0
  4076                           ;AD7147.c: 296: {
  4077                           ;AD7147.c: 297: get_CDC(2,state);
  4078  001526  0E00               	movlw	0
  4079  001528  0100               	movlb	0	; () banked
  4080  00152A  6FAD               	movwf	(get_CDC@cdc+1)& (0+255),b
  4081  00152C  0E02               	movlw	2
  4082  00152E  6FAC               	movwf	get_CDC@cdc& (0+255),b
  4083  001530  C0B2  F0AE         	movff	sensor_CDC@state,get_CDC@state
  4084  001534  C0B3  F0AF         	movff	sensor_CDC@state+1,get_CDC@state+1
  4085  001538  ECE4  F00A         	call	_get_CDC	;wreg free
  4086                           
  4087                           ;AD7147.c: 298: }
  4088  00153C  0012               	return	
  4089  00153E                     l1905:
  4090                           
  4091                           ;AD7147.c: 299: else
  4092                           ;AD7147.c: 300: {
  4093                           ;AD7147.c: 301: get_CDC(1,state);
  4094  00153E  0E00               	movlw	0
  4095  001540  0100               	movlb	0	; () banked
  4096  001542  6FAD               	movwf	(get_CDC@cdc+1)& (0+255),b
  4097  001544  0E01               	movlw	1
  4098  001546  6FAC               	movwf	get_CDC@cdc& (0+255),b
  4099  001548  C0B2  F0AE         	movff	sensor_CDC@state,get_CDC@state
  4100  00154C  C0B3  F0AF         	movff	sensor_CDC@state+1,get_CDC@state+1
  4101  001550  ECE4  F00A         	call	_get_CDC	;wreg free
  4102  001554  0012               	return	
  4103  001556                     __end_of_sensor_CDC:
  4104                           	opt stack 0
  4105                           tblptru	equ	0xFF8
  4106                           tblptrh	equ	0xFF7
  4107                           tblptrl	equ	0xFF6
  4108                           tablat	equ	0xFF5
  4109                           postinc0	equ	0xFEE
  4110                           wreg	equ	0xFE8
  4111                           plusw1	equ	0xFE3
  4112                           postinc2	equ	0xFDE
  4113                           postdec2	equ	0xFDD
  4114                           plusw2	equ	0xFDB
  4115                           fsr2h	equ	0xFDA
  4116                           fsr2l	equ	0xFD9
  4117                           status	equ	0xFD8
  4118                           
  4119 ;; *************** function _memset *****************
  4120 ;; Defined at:
  4121 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\memset.c"
  4122 ;; Parameters:    Size  Location     Type
  4123 ;;  p1              2    0[BANK0 ] PTR void 
  4124 ;;		 -> avail_sensors(48), 
  4125 ;;  c               2    2[BANK0 ] int 
  4126 ;;  n               2    4[BANK0 ] unsigned int 
  4127 ;; Auto vars:     Size  Location     Type
  4128 ;;  p               2    6[BANK0 ] PTR unsigned char 
  4129 ;;		 -> avail_sensors(48), 
  4130 ;; Return value:  Size  Location     Type
  4131 ;;                  2    0[BANK0 ] PTR void 
  4132 ;; Registers used:
  4133 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4134 ;; Tracked objects:
  4135 ;;		On entry : 0/0
  4136 ;;		On exit  : 0/0
  4137 ;;		Unchanged: 0/0
  4138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4139 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4140 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4142 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4143 ;;Total ram usage:        8 bytes
  4144 ;; Hardware stack levels used:    1
  4145 ;; Hardware stack levels required when called:    3
  4146 ;; This function calls:
  4147 ;;		Nothing
  4148 ;; This function is called by:
  4149 ;;		_main
  4150 ;; This function uses a non-reentrant model
  4151 ;;
  4152                           
  4153                           	psect	text16
  4154  001594                     __ptext16:
  4155                           	opt stack 0
  4156  001594                     _memset:
  4157                           	opt stack 27
  4158                           
  4159                           ;incstack = 0
  4160  001594  C0AC  F0B2         	movff	memset@p1,memset@p
  4161  001598  C0AD  F0B3         	movff	memset@p1+1,memset@p+1
  4162  00159C  D009               	goto	l2353
  4163  00159E                     l2349:
  4164  00159E  C0B2  FFD9         	movff	memset@p,fsr2l
  4165  0015A2  C0B3  FFDA         	movff	memset@p+1,fsr2h
  4166  0015A6  C0AE  FFDF         	movff	memset@c,indf2
  4167  0015AA  0100               	movlb	0	; () banked
  4168  0015AC  4BB2               	infsnz	memset@p& (0+255),f,b
  4169  0015AE  2BB3               	incf	(memset@p+1)& (0+255),f,b
  4170  0015B0                     l2353:
  4171  0015B0  0100               	movlb	0	; () banked
  4172  0015B2  07B0               	decf	memset@n& (0+255),f,b
  4173  0015B4  A0D8               	btfss	status,0,c
  4174  0015B6  07B1               	decf	(memset@n+1)& (0+255),f,b
  4175  0015B8  0100               	movlb	0	; () banked
  4176  0015BA  29B0               	incf	memset@n& (0+255),w,b
  4177  0015BC  E1F0               	bnz	l2349
  4178  0015BE  0100               	movlb	0	; () banked
  4179  0015C0  29B1               	incf	(memset@n+1)& (0+255),w,b
  4180  0015C2  B4D8               	btfsc	status,2,c
  4181  0015C4  0012               	return	
  4182  0015C6  D7EB               	goto	l2349
  4183  0015C8                     __end_of_memset:
  4184                           	opt stack 0
  4185                           tblptru	equ	0xFF8
  4186                           tblptrh	equ	0xFF7
  4187                           tblptrl	equ	0xFF6
  4188                           tablat	equ	0xFF5
  4189                           postinc0	equ	0xFEE
  4190                           wreg	equ	0xFE8
  4191                           plusw1	equ	0xFE3
  4192                           indf2	equ	0xFDF
  4193                           postinc2	equ	0xFDE
  4194                           postdec2	equ	0xFDD
  4195                           plusw2	equ	0xFDB
  4196                           fsr2h	equ	0xFDA
  4197                           fsr2l	equ	0xFD9
  4198                           status	equ	0xFD8
  4199                           
  4200 ;; *************** function _init_interrupts *****************
  4201 ;; Defined at:
  4202 ;;		line 21 in file "micro_setup.c"
  4203 ;; Parameters:    Size  Location     Type
  4204 ;;		None
  4205 ;; Auto vars:     Size  Location     Type
  4206 ;;		None
  4207 ;; Return value:  Size  Location     Type
  4208 ;;                  1    wreg      void 
  4209 ;; Registers used:
  4210 ;;		None
  4211 ;; Tracked objects:
  4212 ;;		On entry : 0/0
  4213 ;;		On exit  : 0/0
  4214 ;;		Unchanged: 0/0
  4215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4220 ;;Total ram usage:        0 bytes
  4221 ;; Hardware stack levels used:    1
  4222 ;; Hardware stack levels required when called:    3
  4223 ;; This function calls:
  4224 ;;		Nothing
  4225 ;; This function is called by:
  4226 ;;		_main
  4227 ;; This function uses a non-reentrant model
  4228 ;;
  4229                           
  4230                           	psect	text17
  4231  0015F2                     __ptext17:
  4232                           	opt stack 0
  4233  0015F2                     _init_interrupts:
  4234                           	opt stack 27
  4235                           
  4236                           ;micro_setup.c: 23: ANCON1bits.ANSEL10 = 0;
  4237                           
  4238                           ; BSR set to: 0
  4239                           ;incstack = 0
  4240  0015F2  010F               	movlb	15	; () banked
  4241  0015F4  955C               	bcf	92,2,b	;volatile
  4242                           
  4243                           ;micro_setup.c: 24: ANCON1bits.ANSEL8 = 0;
  4244  0015F6  010F               	movlb	15	; () banked
  4245  0015F8  915C               	bcf	92,0,b	;volatile
  4246                           
  4247                           ;micro_setup.c: 25: TRISBbits.TRISB0 = 1;
  4248  0015FA  8093               	bsf	3987,0,c	;volatile
  4249                           
  4250                           ;micro_setup.c: 26: TRISBbits.TRISB1 = 1;
  4251  0015FC  8293               	bsf	3987,1,c	;volatile
  4252                           
  4253                           ;micro_setup.c: 28: RCONbits.IPEN = 1;
  4254  0015FE  8ED0               	bsf	4048,7,c	;volatile
  4255                           
  4256                           ;micro_setup.c: 32: INTCONbits.INT0IE = 1;
  4257  001600  88F2               	bsf	intcon,4,c	;volatile
  4258                           
  4259                           ;micro_setup.c: 33: INTCON2bits.INTEDG0 = 0;
  4260  001602  9CF1               	bcf	intcon2,6,c	;volatile
  4261                           
  4262                           ;micro_setup.c: 34: INTCONbits.INT0IF = 0;
  4263  001604  92F2               	bcf	intcon,1,c	;volatile
  4264                           
  4265                           ;micro_setup.c: 37: INTCON3bits.INT1P = 1;
  4266  001606  8CF0               	bsf	intcon3,6,c	;volatile
  4267                           
  4268                           ;micro_setup.c: 38: INTCON3bits.INT1IE = 1;
  4269  001608  86F0               	bsf	intcon3,3,c	;volatile
  4270                           
  4271                           ;micro_setup.c: 39: INTCON2bits.INTEDG1 = 0;
  4272  00160A  9AF1               	bcf	intcon2,5,c	;volatile
  4273                           
  4274                           ;micro_setup.c: 40: INTCON3bits.INT1IF = 0;
  4275  00160C  90F0               	bcf	intcon3,0,c	;volatile
  4276                           
  4277                           ;micro_setup.c: 42: INTCONbits.PEIE = 1;
  4278  00160E  8CF2               	bsf	intcon,6,c	;volatile
  4279                           
  4280                           ;micro_setup.c: 43: INTCONbits.GIE = 1;
  4281  001610  8EF2               	bsf	intcon,7,c	;volatile
  4282                           
  4283                           ;micro_setup.c: 45: (INTCONbits.GIE = 1);
  4284  001612  8EF2               	bsf	intcon,7,c	;volatile
  4285                           
  4286                           ; BSR set to: 15
  4287  001614  0012               	return		;funcret
  4288  001616                     __end_of_init_interrupts:
  4289                           	opt stack 0
  4290                           tblptru	equ	0xFF8
  4291                           tblptrh	equ	0xFF7
  4292                           tblptrl	equ	0xFF6
  4293                           tablat	equ	0xFF5
  4294                           intcon	equ	0xFF2
  4295                           intcon2	equ	0xFF1
  4296                           intcon3	equ	0xFF0
  4297                           postinc0	equ	0xFEE
  4298                           wreg	equ	0xFE8
  4299                           plusw1	equ	0xFE3
  4300                           indf2	equ	0xFDF
  4301                           postinc2	equ	0xFDE
  4302                           postdec2	equ	0xFDD
  4303                           plusw2	equ	0xFDB
  4304                           fsr2h	equ	0xFDA
  4305                           fsr2l	equ	0xFD9
  4306                           status	equ	0xFD8
  4307                           
  4308 ;; *************** function _get_ID *****************
  4309 ;; Defined at:
  4310 ;;		line 305 in file "AD7147.c"
  4311 ;; Parameters:    Size  Location     Type
  4312 ;;  cdc             2   22[BANK0 ] unsigned int 
  4313 ;; Auto vars:     Size  Location     Type
  4314 ;;  result          2   25[BANK0 ] unsigned int 
  4315 ;; Return value:  Size  Location     Type
  4316 ;;                  2   22[BANK0 ] unsigned int 
  4317 ;; Registers used:
  4318 ;;		wreg, status,2, status,0, cstack
  4319 ;; Tracked objects:
  4320 ;;		On entry : 0/0
  4321 ;;		On exit  : 0/0
  4322 ;;		Unchanged: 0/0
  4323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4324 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4325 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4326 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4327 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4328 ;;Total ram usage:        5 bytes
  4329 ;; Hardware stack levels used:    1
  4330 ;; Hardware stack levels required when called:    4
  4331 ;; This function calls:
  4332 ;;		_get_CDC
  4333 ;;		_w16_r16_spi
  4334 ;; This function is called by:
  4335 ;;		_main
  4336 ;; This function uses a non-reentrant model
  4337 ;;
  4338                           
  4339                           	psect	text18
  4340  001372                     __ptext18:
  4341                           	opt stack 0
  4342  001372                     _get_ID:
  4343                           	opt stack 26
  4344                           
  4345                           ;AD7147.c: 307: get_CDC(cdc,0);
  4346                           
  4347                           ; BSR set to: 15
  4348                           ;incstack = 0
  4349  001372  C0C2  F0AC         	movff	get_ID@cdc,get_CDC@cdc
  4350  001376  C0C3  F0AD         	movff	get_ID@cdc+1,get_CDC@cdc+1
  4351  00137A  0E00               	movlw	0
  4352  00137C  0100               	movlb	0	; () banked
  4353  00137E  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  4354  001380  0E00               	movlw	0
  4355  001382  6FAE               	movwf	get_CDC@state& (0+255),b
  4356  001384  ECE4  F00A         	call	_get_CDC	;wreg free
  4357                           
  4358                           ;AD7147.c: 308: unsigned int result = (w16_r16_spi(0xE400 + 0x017) & 0b1111111111110000)
      +                           >> 4;
  4359  001388  0EE4               	movlw	228
  4360  00138A  0100               	movlb	0	; () banked
  4361  00138C  6FAD               	movwf	(w16_r16_spi@address+1)& (0+255),b
  4362  00138E  0E17               	movlw	23
  4363  001390  6FAC               	movwf	w16_r16_spi@address& (0+255),b
  4364  001392  ECE1  F007         	call	_w16_r16_spi	;wreg free
  4365  001396  0E04               	movlw	4
  4366  001398  0100               	movlb	0	; () banked
  4367  00139A  6FC4               	movwf	??_get_ID& (0+255),b
  4368  00139C                     u1055:
  4369  00139C  0100               	movlb	0	; () banked
  4370  00139E  90D8               	bcf	status,0,c
  4371  0013A0  33AD               	rrcf	(?_w16_r16_spi+1)& (0+255),f,b
  4372  0013A2  33AC               	rrcf	?_w16_r16_spi& (0+255),f,b
  4373  0013A4  0100               	movlb	0	; () banked
  4374  0013A6  2FC4               	decfsz	??_get_ID& (0+255),f,b
  4375  0013A8  D7F9               	goto	u1055
  4376  0013AA  0EFF               	movlw	255
  4377  0013AC  0100               	movlb	0	; () banked
  4378  0013AE  15AC               	andwf	?_w16_r16_spi& (0+255),w,b
  4379  0013B0  0100               	movlb	0	; () banked
  4380  0013B2  6FC5               	movwf	get_ID@result& (0+255),b
  4381  0013B4  0E0F               	movlw	15
  4382  0013B6  0100               	movlb	0	; () banked
  4383  0013B8  15AD               	andwf	(?_w16_r16_spi+1)& (0+255),w,b
  4384  0013BA  0100               	movlb	0	; () banked
  4385  0013BC  6FC6               	movwf	(get_ID@result+1)& (0+255),b
  4386                           
  4387                           ;AD7147.c: 309: get_CDC(cdc,1);
  4388  0013BE  C0C2  F0AC         	movff	get_ID@cdc,get_CDC@cdc
  4389  0013C2  C0C3  F0AD         	movff	get_ID@cdc+1,get_CDC@cdc+1
  4390  0013C6  0E00               	movlw	0
  4391  0013C8  0100               	movlb	0	; () banked
  4392  0013CA  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  4393  0013CC  0E01               	movlw	1
  4394  0013CE  6FAE               	movwf	get_CDC@state& (0+255),b
  4395  0013D0  ECE4  F00A         	call	_get_CDC	;wreg free
  4396                           
  4397                           ;AD7147.c: 310: return result;
  4398  0013D4  C0C5  F0C2         	movff	get_ID@result,?_get_ID
  4399  0013D8  C0C6  F0C3         	movff	get_ID@result+1,?_get_ID+1
  4400  0013DC  0012               	return	
  4401  0013DE                     __end_of_get_ID:
  4402                           	opt stack 0
  4403                           tblptru	equ	0xFF8
  4404                           tblptrh	equ	0xFF7
  4405                           tblptrl	equ	0xFF6
  4406                           tablat	equ	0xFF5
  4407                           intcon	equ	0xFF2
  4408                           intcon2	equ	0xFF1
  4409                           intcon3	equ	0xFF0
  4410                           postinc0	equ	0xFEE
  4411                           wreg	equ	0xFE8
  4412                           plusw1	equ	0xFE3
  4413                           indf2	equ	0xFDF
  4414                           postinc2	equ	0xFDE
  4415                           postdec2	equ	0xFDD
  4416                           plusw2	equ	0xFDB
  4417                           fsr2h	equ	0xFDA
  4418                           fsr2l	equ	0xFD9
  4419                           status	equ	0xFD8
  4420                           
  4421 ;; *************** function _w16_r16_spi *****************
  4422 ;; Defined at:
  4423 ;;		line 89 in file "spi.c"
  4424 ;; Parameters:    Size  Location     Type
  4425 ;;  address         2    0[BANK0 ] unsigned int 
  4426 ;; Auto vars:     Size  Location     Type
  4427 ;;  p4              2   20[BANK0 ] unsigned int 
  4428 ;;  p3              2   18[BANK0 ] unsigned int 
  4429 ;;  blank_high      2   16[BANK0 ] unsigned int 
  4430 ;;  blank_low       2   14[BANK0 ] unsigned int 
  4431 ;;  result          2   12[BANK0 ] unsigned int 
  4432 ;;  address_high    2   10[BANK0 ] unsigned int 
  4433 ;;  address_low     2    8[BANK0 ] unsigned int 
  4434 ;;  p2              2    6[BANK0 ] unsigned int 
  4435 ;;  p1              2    4[BANK0 ] unsigned int 
  4436 ;; Return value:  Size  Location     Type
  4437 ;;                  2    0[BANK0 ] unsigned int 
  4438 ;; Registers used:
  4439 ;;		wreg, status,2, status,0
  4440 ;; Tracked objects:
  4441 ;;		On entry : 0/0
  4442 ;;		On exit  : 0/0
  4443 ;;		Unchanged: 0/0
  4444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4445 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4446 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4447 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4448 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4449 ;;Total ram usage:       22 bytes
  4450 ;; Hardware stack levels used:    1
  4451 ;; Hardware stack levels required when called:    3
  4452 ;; This function calls:
  4453 ;;		Nothing
  4454 ;; This function is called by:
  4455 ;;		_read_AD7147
  4456 ;;		_read_sensor
  4457 ;;		_get_ID
  4458 ;;		_read_sensors
  4459 ;; This function uses a non-reentrant model
  4460 ;;
  4461                           
  4462                           	psect	text19
  4463  000FC2                     __ptext19:
  4464                           	opt stack 0
  4465  000FC2                     _w16_r16_spi:
  4466                           	opt stack 25
  4467                           
  4468                           ;spi.c: 91: unsigned int address_low, address_high, result;
  4469                           ;spi.c: 92: unsigned int blank_low = 0x000;
  4470                           
  4471                           ;incstack = 0
  4472  000FC2  0E00               	movlw	0
  4473  000FC4  0100               	movlb	0	; () banked
  4474  000FC6  6FBB               	movwf	(w16_r16_spi@blank_low+1)& (0+255),b
  4475  000FC8  0E00               	movlw	0
  4476  000FCA  6FBA               	movwf	w16_r16_spi@blank_low& (0+255),b
  4477                           
  4478                           ;spi.c: 93: unsigned int blank_high = 0x000;
  4479  000FCC  0E00               	movlw	0
  4480  000FCE  0100               	movlb	0	; () banked
  4481  000FD0  6FBD               	movwf	(w16_r16_spi@blank_high+1)& (0+255),b
  4482  000FD2  0E00               	movlw	0
  4483  000FD4  6FBC               	movwf	w16_r16_spi@blank_high& (0+255),b
  4484                           
  4485                           ;spi.c: 94: unsigned int p1, p2, p3, p4;
  4486                           ;spi.c: 96: address_low = address & 0xFF;
  4487  000FD6  0100               	movlb	0	; () banked
  4488  000FD8  51AC               	movf	w16_r16_spi@address& (0+255),w,b
  4489  000FDA  0100               	movlb	0	; () banked
  4490  000FDC  6FB4               	movwf	w16_r16_spi@address_low& (0+255),b
  4491  000FDE  6BB5               	clrf	(w16_r16_spi@address_low+1)& (0+255),b
  4492                           
  4493                           ;spi.c: 97: address_high = (address >> 8) & 0xFF;
  4494  000FE0  C0AC  F0AE         	movff	w16_r16_spi@address,??_w16_r16_spi
  4495  000FE4  C0AD  F0AF         	movff	w16_r16_spi@address+1,??_w16_r16_spi+1
  4496  000FE8  C0AF  F0AE         	movff	??_w16_r16_spi+1,??_w16_r16_spi
  4497  000FEC  0100               	movlb	0	; () banked
  4498  000FEE  6BAF               	clrf	(??_w16_r16_spi+1)& (0+255),b
  4499  000FF0  0100               	movlb	0	; () banked
  4500  000FF2  51AE               	movf	??_w16_r16_spi& (0+255),w,b
  4501  000FF4  0100               	movlb	0	; () banked
  4502  000FF6  6FB6               	movwf	w16_r16_spi@address_high& (0+255),b
  4503  000FF8  6BB7               	clrf	(w16_r16_spi@address_high+1)& (0+255),b
  4504                           
  4505                           ; BSR set to: 0
  4506                           ;spi.c: 99: SSPBUF = address_high;
  4507  000FFA  C0B6  FFC9         	movff	w16_r16_spi@address_high,4041	;volatile
  4508  000FFE                     l300:
  4509  000FFE  A0C7               	btfss	4039,0,c	;volatile
  4510  001000  D7FE               	goto	l300
  4511                           
  4512                           ;spi.c: 101: p1 = SSPBUF;
  4513  001002  CFC9 F0B0          	movff	4041,w16_r16_spi@p1	;volatile
  4514  001006  0100               	movlb	0	; () banked
  4515  001008  6BB1               	clrf	(w16_r16_spi@p1+1)& (0+255),b
  4516                           
  4517                           ;spi.c: 103: SSPBUF = address_low;
  4518  00100A  C0B4  FFC9         	movff	w16_r16_spi@address_low,4041	;volatile
  4519  00100E                     l303:
  4520  00100E  A0C7               	btfss	4039,0,c	;volatile
  4521  001010  D7FE               	goto	l303
  4522                           
  4523                           ;spi.c: 105: p2 = SSPBUF;
  4524  001012  CFC9 F0B2          	movff	4041,w16_r16_spi@p2	;volatile
  4525  001016  0100               	movlb	0	; () banked
  4526  001018  6BB3               	clrf	(w16_r16_spi@p2+1)& (0+255),b
  4527                           
  4528                           ;spi.c: 107: SSPBUF = blank_high;
  4529  00101A  C0BC  FFC9         	movff	w16_r16_spi@blank_high,4041	;volatile
  4530  00101E                     l306:
  4531  00101E  A0C7               	btfss	4039,0,c	;volatile
  4532  001020  D7FE               	goto	l306
  4533                           
  4534                           ;spi.c: 109: p3 = SSPBUF;
  4535  001022  CFC9 F0BE          	movff	4041,w16_r16_spi@p3	;volatile
  4536  001026  0100               	movlb	0	; () banked
  4537  001028  6BBF               	clrf	(w16_r16_spi@p3+1)& (0+255),b
  4538                           
  4539                           ;spi.c: 111: SSPBUF = blank_low;
  4540  00102A  C0BA  FFC9         	movff	w16_r16_spi@blank_low,4041	;volatile
  4541  00102E                     l309:
  4542  00102E  A0C7               	btfss	4039,0,c	;volatile
  4543  001030  D7FE               	goto	l309
  4544                           
  4545                           ;spi.c: 113: p4 = SSPBUF;
  4546  001032  CFC9 F0C0          	movff	4041,w16_r16_spi@p4	;volatile
  4547  001036  0100               	movlb	0	; () banked
  4548  001038  6BC1               	clrf	(w16_r16_spi@p4+1)& (0+255),b
  4549                           
  4550                           ; BSR set to: 0
  4551                           ;spi.c: 115: result = (p3 << 8) + p4;
  4552  00103A  0100               	movlb	0	; () banked
  4553  00103C  51BE               	movf	w16_r16_spi@p3& (0+255),w,b
  4554  00103E  0100               	movlb	0	; () banked
  4555  001040  6FAF               	movwf	(??_w16_r16_spi+1)& (0+255),b
  4556  001042  6BAE               	clrf	??_w16_r16_spi& (0+255),b
  4557  001044  0100               	movlb	0	; () banked
  4558  001046  51C0               	movf	w16_r16_spi@p4& (0+255),w,b
  4559  001048  0100               	movlb	0	; () banked
  4560  00104A  25AE               	addwf	??_w16_r16_spi& (0+255),w,b
  4561  00104C  0100               	movlb	0	; () banked
  4562  00104E  6FB8               	movwf	w16_r16_spi@result& (0+255),b
  4563  001050  0100               	movlb	0	; () banked
  4564  001052  51C1               	movf	(w16_r16_spi@p4+1)& (0+255),w,b
  4565  001054  0100               	movlb	0	; () banked
  4566  001056  21AF               	addwfc	(??_w16_r16_spi+1)& (0+255),w,b
  4567  001058  0100               	movlb	0	; () banked
  4568  00105A  6FB9               	movwf	(w16_r16_spi@result+1)& (0+255),b
  4569                           
  4570                           ; BSR set to: 0
  4571                           ;spi.c: 116: return result;
  4572  00105C  C0B8  F0AC         	movff	w16_r16_spi@result,?_w16_r16_spi
  4573  001060  C0B9  F0AD         	movff	w16_r16_spi@result+1,?_w16_r16_spi+1
  4574  001064  0012               	return	
  4575  001066                     __end_of_w16_r16_spi:
  4576                           	opt stack 0
  4577                           tblptru	equ	0xFF8
  4578                           tblptrh	equ	0xFF7
  4579                           tblptrl	equ	0xFF6
  4580                           tablat	equ	0xFF5
  4581                           intcon	equ	0xFF2
  4582                           intcon2	equ	0xFF1
  4583                           intcon3	equ	0xFF0
  4584                           postinc0	equ	0xFEE
  4585                           wreg	equ	0xFE8
  4586                           plusw1	equ	0xFE3
  4587                           indf2	equ	0xFDF
  4588                           postinc2	equ	0xFDE
  4589                           postdec2	equ	0xFDD
  4590                           plusw2	equ	0xFDB
  4591                           fsr2h	equ	0xFDA
  4592                           fsr2l	equ	0xFD9
  4593                           status	equ	0xFD8
  4594                           
  4595 ;; *************** function _blink_LED *****************
  4596 ;; Defined at:
  4597 ;;		line 329 in file "AD7147.c"
  4598 ;; Parameters:    Size  Location     Type
  4599 ;;  cdc             2   22[BANK0 ] unsigned int 
  4600 ;; Auto vars:     Size  Location     Type
  4601 ;;  message         2   24[BANK0 ] unsigned int 
  4602 ;; Return value:  Size  Location     Type
  4603 ;;                  1    wreg      void 
  4604 ;; Registers used:
  4605 ;;		wreg, status,2, status,0, cstack
  4606 ;; Tracked objects:
  4607 ;;		On entry : 0/0
  4608 ;;		On exit  : 0/0
  4609 ;;		Unchanged: 0/0
  4610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4611 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4612 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4614 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4615 ;;Total ram usage:        4 bytes
  4616 ;; Hardware stack levels used:    1
  4617 ;; Hardware stack levels required when called:    5
  4618 ;; This function calls:
  4619 ;;		_delay_ms
  4620 ;;		_get_CDC
  4621 ;;		_w32_spi
  4622 ;; This function is called by:
  4623 ;;		_main
  4624 ;; This function uses a non-reentrant model
  4625 ;;
  4626                           
  4627                           	psect	text20
  4628  000D96                     __ptext20:
  4629                           	opt stack 0
  4630  000D96                     _blink_LED:
  4631                           	opt stack 25
  4632                           
  4633                           ;AD7147.c: 331: get_CDC(cdc,0);
  4634                           
  4635                           ; BSR set to: 0
  4636                           ;incstack = 0
  4637  000D96  C0C2  F0AC         	movff	blink_LED@cdc,get_CDC@cdc
  4638  000D9A  C0C3  F0AD         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  4639  000D9E  0E00               	movlw	0
  4640  000DA0  0100               	movlb	0	; () banked
  4641  000DA2  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  4642  000DA4  0E00               	movlw	0
  4643  000DA6  6FAE               	movwf	get_CDC@state& (0+255),b
  4644  000DA8  ECE4  F00A         	call	_get_CDC	;wreg free
  4645                           
  4646                           ;AD7147.c: 332: unsigned int message = 0b0010000000000000;
  4647  000DAC  0E20               	movlw	32
  4648  000DAE  0100               	movlb	0	; () banked
  4649  000DB0  6FC5               	movwf	(blink_LED@message+1)& (0+255),b
  4650  000DB2  0E00               	movlw	0
  4651  000DB4  6FC4               	movwf	blink_LED@message& (0+255),b
  4652                           
  4653                           ; BSR set to: 0
  4654                           ;AD7147.c: 333: w32_spi((0xE000 + 0x005),message);
  4655  000DB6  0EE0               	movlw	224
  4656  000DB8  0100               	movlb	0	; () banked
  4657  000DBA  6FAD               	movwf	(w32_spi@address+1)& (0+255),b
  4658  000DBC  0E05               	movlw	5
  4659  000DBE  6FAC               	movwf	w32_spi@address& (0+255),b
  4660  000DC0  C0C4  F0AE         	movff	blink_LED@message,w32_spi@data
  4661  000DC4  C0C5  F0AF         	movff	blink_LED@message+1,w32_spi@data+1
  4662  000DC8  EC78  F008         	call	_w32_spi	;wreg free
  4663                           
  4664                           ;AD7147.c: 334: delay_ms(10);
  4665  000DCC  0E00               	movlw	0
  4666  000DCE  0100               	movlb	0	; () banked
  4667  000DD0  6FB5               	movwf	(delay_ms@n+1)& (0+255),b
  4668  000DD2  0E0A               	movlw	10
  4669  000DD4  6FB4               	movwf	delay_ms@n& (0+255),b
  4670  000DD6  EC42  F00A         	call	_delay_ms	;wreg free
  4671                           
  4672                           ;AD7147.c: 335: get_CDC(cdc,1);
  4673  000DDA  C0C2  F0AC         	movff	blink_LED@cdc,get_CDC@cdc
  4674  000DDE  C0C3  F0AD         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  4675  000DE2  0E00               	movlw	0
  4676  000DE4  0100               	movlb	0	; () banked
  4677  000DE6  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  4678  000DE8  0E01               	movlw	1
  4679  000DEA  6FAE               	movwf	get_CDC@state& (0+255),b
  4680  000DEC  ECE4  F00A         	call	_get_CDC	;wreg free
  4681                           
  4682                           ;AD7147.c: 336: delay_ms(1000);
  4683  000DF0  0E03               	movlw	3
  4684  000DF2  0100               	movlb	0	; () banked
  4685  000DF4  6FB5               	movwf	(delay_ms@n+1)& (0+255),b
  4686  000DF6  0EE8               	movlw	232
  4687  000DF8  6FB4               	movwf	delay_ms@n& (0+255),b
  4688  000DFA  EC42  F00A         	call	_delay_ms	;wreg free
  4689                           
  4690                           ;AD7147.c: 337: get_CDC(cdc,0);
  4691  000DFE  C0C2  F0AC         	movff	blink_LED@cdc,get_CDC@cdc
  4692  000E02  C0C3  F0AD         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  4693  000E06  0E00               	movlw	0
  4694  000E08  0100               	movlb	0	; () banked
  4695  000E0A  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  4696  000E0C  0E00               	movlw	0
  4697  000E0E  6FAE               	movwf	get_CDC@state& (0+255),b
  4698  000E10  ECE4  F00A         	call	_get_CDC	;wreg free
  4699                           
  4700                           ;AD7147.c: 338: unsigned int message = 0b0011000000000000;
  4701  000E14  0E30               	movlw	48
  4702  000E16  0100               	movlb	0	; () banked
  4703  000E18  6FC5               	movwf	(blink_LED@message+1)& (0+255),b
  4704  000E1A  0E00               	movlw	0
  4705  000E1C  6FC4               	movwf	blink_LED@message& (0+255),b
  4706                           
  4707                           ; BSR set to: 0
  4708                           ;AD7147.c: 339: w32_spi((0xE000 + 0x005),message);
  4709  000E1E  0EE0               	movlw	224
  4710  000E20  0100               	movlb	0	; () banked
  4711  000E22  6FAD               	movwf	(w32_spi@address+1)& (0+255),b
  4712  000E24  0E05               	movlw	5
  4713  000E26  6FAC               	movwf	w32_spi@address& (0+255),b
  4714  000E28  C0C4  F0AE         	movff	blink_LED@message,w32_spi@data
  4715  000E2C  C0C5  F0AF         	movff	blink_LED@message+1,w32_spi@data+1
  4716  000E30  EC78  F008         	call	_w32_spi	;wreg free
  4717                           
  4718                           ;AD7147.c: 340: delay_ms(10);
  4719  000E34  0E00               	movlw	0
  4720  000E36  0100               	movlb	0	; () banked
  4721  000E38  6FB5               	movwf	(delay_ms@n+1)& (0+255),b
  4722  000E3A  0E0A               	movlw	10
  4723  000E3C  6FB4               	movwf	delay_ms@n& (0+255),b
  4724  000E3E  EC42  F00A         	call	_delay_ms	;wreg free
  4725                           
  4726                           ;AD7147.c: 341: get_CDC(cdc,1);
  4727  000E42  C0C2  F0AC         	movff	blink_LED@cdc,get_CDC@cdc
  4728  000E46  C0C3  F0AD         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  4729  000E4A  0E00               	movlw	0
  4730  000E4C  0100               	movlb	0	; () banked
  4731  000E4E  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  4732  000E50  0E01               	movlw	1
  4733  000E52  6FAE               	movwf	get_CDC@state& (0+255),b
  4734  000E54  ECE4  F00A         	call	_get_CDC	;wreg free
  4735  000E58  0012               	return		;funcret
  4736  000E5A                     __end_of_blink_LED:
  4737                           	opt stack 0
  4738                           tblptru	equ	0xFF8
  4739                           tblptrh	equ	0xFF7
  4740                           tblptrl	equ	0xFF6
  4741                           tablat	equ	0xFF5
  4742                           intcon	equ	0xFF2
  4743                           intcon2	equ	0xFF1
  4744                           intcon3	equ	0xFF0
  4745                           postinc0	equ	0xFEE
  4746                           wreg	equ	0xFE8
  4747                           plusw1	equ	0xFE3
  4748                           indf2	equ	0xFDF
  4749                           postinc2	equ	0xFDE
  4750                           postdec2	equ	0xFDD
  4751                           plusw2	equ	0xFDB
  4752                           fsr2h	equ	0xFDA
  4753                           fsr2l	equ	0xFD9
  4754                           status	equ	0xFD8
  4755                           
  4756 ;; *************** function _w32_spi *****************
  4757 ;; Defined at:
  4758 ;;		line 26 in file "spi.c"
  4759 ;; Parameters:    Size  Location     Type
  4760 ;;  address         2    0[BANK0 ] unsigned int 
  4761 ;;  data            2    2[BANK0 ] unsigned int 
  4762 ;; Auto vars:     Size  Location     Type
  4763 ;;  data_high       2   20[BANK0 ] unsigned int 
  4764 ;;  data_low        2   18[BANK0 ] unsigned int 
  4765 ;;  address_high    2   16[BANK0 ] unsigned int 
  4766 ;;  address_low     2   14[BANK0 ] unsigned int 
  4767 ;;  p4              2   12[BANK0 ] unsigned int 
  4768 ;;  p3              2   10[BANK0 ] unsigned int 
  4769 ;;  p2              2    8[BANK0 ] unsigned int 
  4770 ;;  p1              2    6[BANK0 ] unsigned int 
  4771 ;; Return value:  Size  Location     Type
  4772 ;;                  1    wreg      void 
  4773 ;; Registers used:
  4774 ;;		wreg, status,2
  4775 ;; Tracked objects:
  4776 ;;		On entry : 0/0
  4777 ;;		On exit  : 0/0
  4778 ;;		Unchanged: 0/0
  4779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4780 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4781 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4782 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4783 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4784 ;;Total ram usage:       22 bytes
  4785 ;; Hardware stack levels used:    1
  4786 ;; Hardware stack levels required when called:    3
  4787 ;; This function calls:
  4788 ;;		Nothing
  4789 ;; This function is called by:
  4790 ;;		_write_AD7147
  4791 ;;		_switch_LED
  4792 ;;		_blink_LED
  4793 ;; This function uses a non-reentrant model
  4794 ;;
  4795                           
  4796                           	psect	text21
  4797  0010F0                     __ptext21:
  4798                           	opt stack 0
  4799  0010F0                     _w32_spi:
  4800                           	opt stack 26
  4801                           
  4802                           ;spi.c: 28: unsigned int address_low, address_high, data_low, data_high;
  4803                           ;spi.c: 30: address_low = address & 0xFF;
  4804                           
  4805                           ;incstack = 0
  4806  0010F0  0100               	movlb	0	; () banked
  4807  0010F2  51AC               	movf	w32_spi@address& (0+255),w,b
  4808  0010F4  0100               	movlb	0	; () banked
  4809  0010F6  6FBA               	movwf	w32_spi@address_low& (0+255),b
  4810  0010F8  6BBB               	clrf	(w32_spi@address_low+1)& (0+255),b
  4811                           
  4812                           ;spi.c: 31: address_high = (address >> 8) & 0xFF;
  4813  0010FA  C0AC  F0B0         	movff	w32_spi@address,??_w32_spi
  4814  0010FE  C0AD  F0B1         	movff	w32_spi@address+1,??_w32_spi+1
  4815  001102  C0B1  F0B0         	movff	??_w32_spi+1,??_w32_spi
  4816  001106  0100               	movlb	0	; () banked
  4817  001108  6BB1               	clrf	(??_w32_spi+1)& (0+255),b
  4818  00110A  0100               	movlb	0	; () banked
  4819  00110C  51B0               	movf	??_w32_spi& (0+255),w,b
  4820  00110E  0100               	movlb	0	; () banked
  4821  001110  6FBC               	movwf	w32_spi@address_high& (0+255),b
  4822  001112  6BBD               	clrf	(w32_spi@address_high+1)& (0+255),b
  4823                           
  4824                           ;spi.c: 33: data_low = data & 0xFF;
  4825  001114  0100               	movlb	0	; () banked
  4826  001116  51AE               	movf	w32_spi@data& (0+255),w,b
  4827  001118  0100               	movlb	0	; () banked
  4828  00111A  6FBE               	movwf	w32_spi@data_low& (0+255),b
  4829  00111C  6BBF               	clrf	(w32_spi@data_low+1)& (0+255),b
  4830                           
  4831                           ;spi.c: 34: data_high = (data >> 8) & 0xFF;
  4832  00111E  C0AE  F0B0         	movff	w32_spi@data,??_w32_spi
  4833  001122  C0AF  F0B1         	movff	w32_spi@data+1,??_w32_spi+1
  4834  001126  C0B1  F0B0         	movff	??_w32_spi+1,??_w32_spi
  4835  00112A  0100               	movlb	0	; () banked
  4836  00112C  6BB1               	clrf	(??_w32_spi+1)& (0+255),b
  4837  00112E  0100               	movlb	0	; () banked
  4838  001130  51B0               	movf	??_w32_spi& (0+255),w,b
  4839  001132  0100               	movlb	0	; () banked
  4840  001134  6FC0               	movwf	w32_spi@data_high& (0+255),b
  4841  001136  6BC1               	clrf	(w32_spi@data_high+1)& (0+255),b
  4842                           
  4843                           ; BSR set to: 0
  4844                           ;spi.c: 36: SSPBUF = address_high;
  4845  001138  C0BC  FFC9         	movff	w32_spi@address_high,4041	;volatile
  4846  00113C                     l267:
  4847  00113C  A0C7               	btfss	4039,0,c	;volatile
  4848  00113E  D7FE               	goto	l267
  4849                           
  4850                           ;spi.c: 38: unsigned int p1 = SSPBUF;
  4851  001140  CFC9 F0B2          	movff	4041,w32_spi@p1	;volatile
  4852  001144  0100               	movlb	0	; () banked
  4853  001146  6BB3               	clrf	(w32_spi@p1+1)& (0+255),b
  4854                           
  4855                           ;spi.c: 40: SSPBUF = address_low;
  4856  001148  C0BA  FFC9         	movff	w32_spi@address_low,4041	;volatile
  4857  00114C                     l270:
  4858  00114C  A0C7               	btfss	4039,0,c	;volatile
  4859  00114E  D7FE               	goto	l270
  4860                           
  4861                           ;spi.c: 42: unsigned int p2 = SSPBUF;
  4862  001150  CFC9 F0B4          	movff	4041,w32_spi@p2	;volatile
  4863  001154  0100               	movlb	0	; () banked
  4864  001156  6BB5               	clrf	(w32_spi@p2+1)& (0+255),b
  4865                           
  4866                           ;spi.c: 44: SSPBUF = data_high;
  4867  001158  C0C0  FFC9         	movff	w32_spi@data_high,4041	;volatile
  4868  00115C                     l273:
  4869  00115C  A0C7               	btfss	4039,0,c	;volatile
  4870  00115E  D7FE               	goto	l273
  4871                           
  4872                           ;spi.c: 46: unsigned int p3 = SSPBUF;
  4873  001160  CFC9 F0B6          	movff	4041,w32_spi@p3	;volatile
  4874  001164  0100               	movlb	0	; () banked
  4875  001166  6BB7               	clrf	(w32_spi@p3+1)& (0+255),b
  4876                           
  4877                           ;spi.c: 48: SSPBUF = data_low;
  4878  001168  C0BE  FFC9         	movff	w32_spi@data_low,4041	;volatile
  4879  00116C                     l276:
  4880  00116C  A0C7               	btfss	4039,0,c	;volatile
  4881  00116E  D7FE               	goto	l276
  4882                           
  4883                           ;spi.c: 50: unsigned int p4 = SSPBUF;
  4884  001170  CFC9 F0B8          	movff	4041,w32_spi@p4	;volatile
  4885  001174  0100               	movlb	0	; () banked
  4886  001176  6BB9               	clrf	(w32_spi@p4+1)& (0+255),b
  4887                           
  4888                           ; BSR set to: 0
  4889  001178  0012               	return		;funcret
  4890  00117A                     __end_of_w32_spi:
  4891                           	opt stack 0
  4892                           tblptru	equ	0xFF8
  4893                           tblptrh	equ	0xFF7
  4894                           tblptrl	equ	0xFF6
  4895                           tablat	equ	0xFF5
  4896                           intcon	equ	0xFF2
  4897                           intcon2	equ	0xFF1
  4898                           intcon3	equ	0xFF0
  4899                           postinc0	equ	0xFEE
  4900                           wreg	equ	0xFE8
  4901                           plusw1	equ	0xFE3
  4902                           indf2	equ	0xFDF
  4903                           postinc2	equ	0xFDE
  4904                           postdec2	equ	0xFDD
  4905                           plusw2	equ	0xFDB
  4906                           fsr2h	equ	0xFDA
  4907                           fsr2l	equ	0xFD9
  4908                           status	equ	0xFD8
  4909                           
  4910 ;; *************** function _get_CDC *****************
  4911 ;; Defined at:
  4912 ;;		line 343 in file "AD7147.c"
  4913 ;; Parameters:    Size  Location     Type
  4914 ;;  cdc             2    0[BANK0 ] unsigned int 
  4915 ;;  state           2    2[BANK0 ] unsigned int 
  4916 ;; Auto vars:     Size  Location     Type
  4917 ;;		None
  4918 ;; Return value:  Size  Location     Type
  4919 ;;                  1    wreg      void 
  4920 ;; Registers used:
  4921 ;;		wreg, status,2, status,0
  4922 ;; Tracked objects:
  4923 ;;		On entry : 0/0
  4924 ;;		On exit  : 0/0
  4925 ;;		Unchanged: 0/0
  4926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4927 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4930 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4931 ;;Total ram usage:        4 bytes
  4932 ;; Hardware stack levels used:    1
  4933 ;; Hardware stack levels required when called:    3
  4934 ;; This function calls:
  4935 ;;		Nothing
  4936 ;; This function is called by:
  4937 ;;		_write_AD7147
  4938 ;;		_read_AD7147
  4939 ;;		_sensor_CDC
  4940 ;;		_get_ID
  4941 ;;		_switch_LED
  4942 ;;		_blink_LED
  4943 ;; This function uses a non-reentrant model
  4944 ;;
  4945                           
  4946                           	psect	text22
  4947  0015C8                     __ptext22:
  4948                           	opt stack 0
  4949  0015C8                     _get_CDC:
  4950                           	opt stack 26
  4951                           
  4952                           ;AD7147.c: 345: if (state == 1)
  4953                           
  4954                           ; BSR set to: 0
  4955                           ;incstack = 0
  4956  0015C8  0100               	movlb	0	; () banked
  4957  0015CA  05AE               	decf	get_CDC@state& (0+255),w,b
  4958  0015CC  0100               	movlb	0	; () banked
  4959  0015CE  11AF               	iorwf	(get_CDC@state+1)& (0+255),w,b
  4960  0015D0  A4D8               	btfss	status,2,c
  4961  0015D2  D003               	goto	l1807
  4962                           
  4963                           ; BSR set to: 0
  4964                           ;AD7147.c: 346: {
  4965                           ;AD7147.c: 347: LATCbits.LATC1 = 1;
  4966  0015D4  828B               	bsf	3979,1,c	;volatile
  4967                           
  4968                           ;AD7147.c: 348: LATCbits.LATC0 = 1;
  4969  0015D6  808B               	bsf	3979,0,c	;volatile
  4970                           
  4971                           ;AD7147.c: 349: }
  4972  0015D8  0012               	return	
  4973  0015DA                     l1807:
  4974                           
  4975                           ; BSR set to: 0
  4976                           ;AD7147.c: 350: else
  4977                           ;AD7147.c: 351: {
  4978                           ;AD7147.c: 352: if (cdc == 1)
  4979  0015DA  0100               	movlb	0	; () banked
  4980  0015DC  05AC               	decf	get_CDC@cdc& (0+255),w,b
  4981  0015DE  0100               	movlb	0	; () banked
  4982  0015E0  11AD               	iorwf	(get_CDC@cdc+1)& (0+255),w,b
  4983  0015E2  A4D8               	btfss	status,2,c
  4984  0015E4  D003               	goto	l79
  4985                           
  4986                           ; BSR set to: 0
  4987                           ;AD7147.c: 353: {
  4988                           ;AD7147.c: 354: LATCbits.LATC1 = 0;
  4989  0015E6  928B               	bcf	3979,1,c	;volatile
  4990                           
  4991                           ;AD7147.c: 355: LATCbits.LATC0 = 1;
  4992  0015E8  808B               	bsf	3979,0,c	;volatile
  4993                           
  4994                           ;AD7147.c: 356: }
  4995  0015EA  0012               	return	
  4996  0015EC                     l79:
  4997                           
  4998                           ; BSR set to: 0
  4999                           ;AD7147.c: 357: else
  5000                           ;AD7147.c: 358: {
  5001                           ;AD7147.c: 359: LATCbits.LATC0 = 0;
  5002  0015EC  908B               	bcf	3979,0,c	;volatile
  5003                           
  5004                           ;AD7147.c: 360: LATCbits.LATC1 = 1;
  5005  0015EE  828B               	bsf	3979,1,c	;volatile
  5006                           
  5007                           ; BSR set to: 0
  5008  0015F0  0012               	return	
  5009  0015F2                     __end_of_get_CDC:
  5010                           	opt stack 0
  5011                           tblptru	equ	0xFF8
  5012                           tblptrh	equ	0xFF7
  5013                           tblptrl	equ	0xFF6
  5014                           tablat	equ	0xFF5
  5015                           intcon	equ	0xFF2
  5016                           intcon2	equ	0xFF1
  5017                           intcon3	equ	0xFF0
  5018                           postinc0	equ	0xFEE
  5019                           wreg	equ	0xFE8
  5020                           plusw1	equ	0xFE3
  5021                           indf2	equ	0xFDF
  5022                           postinc2	equ	0xFDE
  5023                           postdec2	equ	0xFDD
  5024                           plusw2	equ	0xFDB
  5025                           fsr2h	equ	0xFDA
  5026                           fsr2l	equ	0xFD9
  5027                           status	equ	0xFD8
  5028                           
  5029 ;; *************** function _delay_ms *****************
  5030 ;; Defined at:
  5031 ;;		line 92 in file "micro_setup.c"
  5032 ;; Parameters:    Size  Location     Type
  5033 ;;  n               2    8[BANK0 ] int 
  5034 ;; Auto vars:     Size  Location     Type
  5035 ;;  j               2   11[BANK0 ] int 
  5036 ;; Return value:  Size  Location     Type
  5037 ;;                  1    wreg      void 
  5038 ;; Registers used:
  5039 ;;		wreg, status,2, status,0, cstack
  5040 ;; Tracked objects:
  5041 ;;		On entry : 0/0
  5042 ;;		On exit  : 0/0
  5043 ;;		Unchanged: 0/0
  5044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5045 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5046 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5047 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5048 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5049 ;;Total ram usage:        5 bytes
  5050 ;; Hardware stack levels used:    1
  5051 ;; Hardware stack levels required when called:    4
  5052 ;; This function calls:
  5053 ;;		___awdiv
  5054 ;; This function is called by:
  5055 ;;		_switch_LED
  5056 ;;		_blink_LED
  5057 ;;		_main
  5058 ;; This function uses a non-reentrant model
  5059 ;;
  5060                           
  5061                           	psect	text23
  5062  001484                     __ptext23:
  5063                           	opt stack 0
  5064  001484                     _delay_ms:
  5065                           	opt stack 25
  5066                           
  5067                           ;micro_setup.c: 94: int j = n/10;
  5068                           
  5069                           ; BSR set to: 0
  5070                           ;incstack = 0
  5071  001484  C0B4  F0AC         	movff	delay_ms@n,___awdiv@dividend
  5072  001488  C0B5  F0AD         	movff	delay_ms@n+1,___awdiv@dividend+1
  5073  00148C  0E00               	movlw	0
  5074  00148E  0100               	movlb	0	; () banked
  5075  001490  6FAF               	movwf	(___awdiv@divisor+1)& (0+255),b
  5076  001492  0E0A               	movlw	10
  5077  001494  6FAE               	movwf	___awdiv@divisor& (0+255),b
  5078  001496  EC2D  F007         	call	___awdiv	;wreg free
  5079  00149A  C0AC  F0B7         	movff	?___awdiv,delay_ms@j
  5080  00149E  C0AD  F0B8         	movff	?___awdiv+1,delay_ms@j+1
  5081                           
  5082                           ;micro_setup.c: 95: while(j--)
  5083  0014A2  D009               	goto	l1921
  5084  0014A4                     l1919:
  5085                           
  5086                           ;micro_setup.c: 96: {
  5087                           ;micro_setup.c: 97: _delay((unsigned long)((10)*(8000000/4000.0)));
  5088  0014A4  0E1A               	movlw	26
  5089  0014A6  0100               	movlb	0	; () banked
  5090  0014A8  6FB6               	movwf	??_delay_ms& (0+255),b
  5091  0014AA  0EF8               	movlw	248
  5092  0014AC                     u1307:
  5093  0014AC  2EE8               	decfsz	wreg,f,c
  5094  0014AE  D7FE               	bra	u1307
  5095  0014B0  2FB6               	decfsz	??_delay_ms& (0+255),f,b
  5096  0014B2  D7FC               	bra	u1307
  5097  0014B4  F000               	nop	
  5098  0014B6                     l1921:
  5099  0014B6  0100               	movlb	0	; () banked
  5100  0014B8  07B7               	decf	delay_ms@j& (0+255),f,b
  5101  0014BA  A0D8               	btfss	status,0,c
  5102  0014BC  07B8               	decf	(delay_ms@j+1)& (0+255),f,b
  5103  0014BE  0100               	movlb	0	; () banked
  5104  0014C0  29B7               	incf	delay_ms@j& (0+255),w,b
  5105  0014C2  E1F0               	bnz	l1919
  5106  0014C4  0100               	movlb	0	; () banked
  5107  0014C6  29B8               	incf	(delay_ms@j+1)& (0+255),w,b
  5108  0014C8  B4D8               	btfsc	status,2,c
  5109  0014CA  0012               	return	
  5110  0014CC  D7EB               	goto	l1919
  5111  0014CE                     __end_of_delay_ms:
  5112                           	opt stack 0
  5113                           tblptru	equ	0xFF8
  5114                           tblptrh	equ	0xFF7
  5115                           tblptrl	equ	0xFF6
  5116                           tablat	equ	0xFF5
  5117                           intcon	equ	0xFF2
  5118                           intcon2	equ	0xFF1
  5119                           intcon3	equ	0xFF0
  5120                           postinc0	equ	0xFEE
  5121                           wreg	equ	0xFE8
  5122                           plusw1	equ	0xFE3
  5123                           indf2	equ	0xFDF
  5124                           postinc2	equ	0xFDE
  5125                           postdec2	equ	0xFDD
  5126                           plusw2	equ	0xFDB
  5127                           fsr2h	equ	0xFDA
  5128                           fsr2l	equ	0xFD9
  5129                           status	equ	0xFD8
  5130                           
  5131 ;; *************** function ___awdiv *****************
  5132 ;; Defined at:
  5133 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  5134 ;; Parameters:    Size  Location     Type
  5135 ;;  dividend        2    0[BANK0 ] int 
  5136 ;;  divisor         2    2[BANK0 ] int 
  5137 ;; Auto vars:     Size  Location     Type
  5138 ;;  quotient        2    6[BANK0 ] int 
  5139 ;;  sign            1    5[BANK0 ] unsigned char 
  5140 ;;  counter         1    4[BANK0 ] unsigned char 
  5141 ;; Return value:  Size  Location     Type
  5142 ;;                  2    0[BANK0 ] int 
  5143 ;; Registers used:
  5144 ;;		wreg, status,2, status,0
  5145 ;; Tracked objects:
  5146 ;;		On entry : 0/0
  5147 ;;		On exit  : 0/0
  5148 ;;		Unchanged: 0/0
  5149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5150 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5151 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5153 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5154 ;;Total ram usage:        8 bytes
  5155 ;; Hardware stack levels used:    1
  5156 ;; Hardware stack levels required when called:    3
  5157 ;; This function calls:
  5158 ;;		Nothing
  5159 ;; This function is called by:
  5160 ;;		_delay_ms
  5161 ;; This function uses a non-reentrant model
  5162 ;;
  5163                           
  5164                           	psect	text24
  5165  000E5A                     __ptext24:
  5166                           	opt stack 0
  5167  000E5A                     ___awdiv:
  5168                           	opt stack 25
  5169                           
  5170                           ; BSR set to: 0
  5171                           ;incstack = 0
  5172  000E5A  0E00               	movlw	0
  5173  000E5C  0100               	movlb	0	; () banked
  5174  000E5E  6FB1               	movwf	___awdiv@sign& (0+255),b
  5175                           
  5176                           ; BSR set to: 0
  5177  000E60  0100               	movlb	0	; () banked
  5178  000E62  AFAF               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5179  000E64  D008               	goto	l1833
  5180                           
  5181                           ; BSR set to: 0
  5182  000E66  0100               	movlb	0	; () banked
  5183  000E68  6DAE               	negf	___awdiv@divisor& (0+255),b
  5184  000E6A  1FAF               	comf	(___awdiv@divisor+1)& (0+255),f,b
  5185  000E6C  B0D8               	btfsc	status,0,c
  5186  000E6E  2BAF               	incf	(___awdiv@divisor+1)& (0+255),f,b
  5187                           
  5188                           ; BSR set to: 0
  5189  000E70  0E01               	movlw	1
  5190  000E72  0100               	movlb	0	; () banked
  5191  000E74  6FB1               	movwf	___awdiv@sign& (0+255),b
  5192  000E76                     l1833:
  5193                           
  5194                           ; BSR set to: 0
  5195  000E76  0100               	movlb	0	; () banked
  5196  000E78  AFAD               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  5197  000E7A  D008               	goto	l1839
  5198                           
  5199                           ; BSR set to: 0
  5200  000E7C  0100               	movlb	0	; () banked
  5201  000E7E  6DAC               	negf	___awdiv@dividend& (0+255),b
  5202  000E80  1FAD               	comf	(___awdiv@dividend+1)& (0+255),f,b
  5203  000E82  B0D8               	btfsc	status,0,c
  5204  000E84  2BAD               	incf	(___awdiv@dividend+1)& (0+255),f,b
  5205                           
  5206                           ; BSR set to: 0
  5207  000E86  0E01               	movlw	1
  5208  000E88  0100               	movlb	0	; () banked
  5209  000E8A  1BB1               	xorwf	___awdiv@sign& (0+255),f,b
  5210  000E8C                     l1839:
  5211                           
  5212                           ; BSR set to: 0
  5213  000E8C  0E00               	movlw	0
  5214  000E8E  0100               	movlb	0	; () banked
  5215  000E90  6FB3               	movwf	(___awdiv@quotient+1)& (0+255),b
  5216  000E92  0E00               	movlw	0
  5217  000E94  6FB2               	movwf	___awdiv@quotient& (0+255),b
  5218                           
  5219                           ; BSR set to: 0
  5220  000E96  0100               	movlb	0	; () banked
  5221  000E98  51AE               	movf	___awdiv@divisor& (0+255),w,b
  5222  000E9A  0100               	movlb	0	; () banked
  5223  000E9C  11AF               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  5224  000E9E  B4D8               	btfsc	status,2,c
  5225  000EA0  D02C               	goto	l1861
  5226                           
  5227                           ; BSR set to: 0
  5228  000EA2  0E01               	movlw	1
  5229  000EA4  0100               	movlb	0	; () banked
  5230  000EA6  6FB0               	movwf	___awdiv@counter& (0+255),b
  5231  000EA8  D006               	goto	l1847
  5232  000EAA                     l1845:
  5233                           
  5234                           ; BSR set to: 0
  5235  000EAA  0100               	movlb	0	; () banked
  5236  000EAC  90D8               	bcf	status,0,c
  5237  000EAE  37AE               	rlcf	___awdiv@divisor& (0+255),f,b
  5238  000EB0  37AF               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  5239  000EB2  0100               	movlb	0	; () banked
  5240  000EB4  2BB0               	incf	___awdiv@counter& (0+255),f,b
  5241  000EB6                     l1847:
  5242                           
  5243                           ; BSR set to: 0
  5244  000EB6  0100               	movlb	0	; () banked
  5245  000EB8  AFAF               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5246  000EBA  D7F7               	goto	l1845
  5247  000EBC                     l1849:
  5248                           
  5249                           ; BSR set to: 0
  5250  000EBC  0100               	movlb	0	; () banked
  5251  000EBE  90D8               	bcf	status,0,c
  5252  000EC0  37B2               	rlcf	___awdiv@quotient& (0+255),f,b
  5253  000EC2  37B3               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  5254                           
  5255                           ; BSR set to: 0
  5256  000EC4  0100               	movlb	0	; () banked
  5257  000EC6  51AE               	movf	___awdiv@divisor& (0+255),w,b
  5258  000EC8  0100               	movlb	0	; () banked
  5259  000ECA  5DAC               	subwf	___awdiv@dividend& (0+255),w,b
  5260  000ECC  0100               	movlb	0	; () banked
  5261  000ECE  51AF               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5262  000ED0  0100               	movlb	0	; () banked
  5263  000ED2  59AD               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  5264  000ED4  A0D8               	btfss	status,0,c
  5265  000ED6  D00A               	goto	l1857
  5266                           
  5267                           ; BSR set to: 0
  5268  000ED8  0100               	movlb	0	; () banked
  5269  000EDA  51AE               	movf	___awdiv@divisor& (0+255),w,b
  5270  000EDC  0100               	movlb	0	; () banked
  5271  000EDE  5FAC               	subwf	___awdiv@dividend& (0+255),f,b
  5272  000EE0  0100               	movlb	0	; () banked
  5273  000EE2  51AF               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5274  000EE4  0100               	movlb	0	; () banked
  5275  000EE6  5BAD               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  5276                           
  5277                           ; BSR set to: 0
  5278  000EE8  0100               	movlb	0	; () banked
  5279  000EEA  81B2               	bsf	___awdiv@quotient& (0+255),0,b
  5280  000EEC                     l1857:
  5281                           
  5282                           ; BSR set to: 0
  5283  000EEC  0100               	movlb	0	; () banked
  5284  000EEE  90D8               	bcf	status,0,c
  5285  000EF0  33AF               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  5286  000EF2  33AE               	rrcf	___awdiv@divisor& (0+255),f,b
  5287                           
  5288                           ; BSR set to: 0
  5289  000EF4  0100               	movlb	0	; () banked
  5290  000EF6  2FB0               	decfsz	___awdiv@counter& (0+255),f,b
  5291  000EF8  D7E1               	goto	l1849
  5292  000EFA                     l1861:
  5293                           
  5294                           ; BSR set to: 0
  5295  000EFA  0100               	movlb	0	; () banked
  5296  000EFC  51B1               	movf	___awdiv@sign& (0+255),w,b
  5297  000EFE  0100               	movlb	0	; () banked
  5298  000F00  B4D8               	btfsc	status,2,c
  5299  000F02  D005               	goto	l1865
  5300                           
  5301                           ; BSR set to: 0
  5302  000F04  0100               	movlb	0	; () banked
  5303  000F06  6DB2               	negf	___awdiv@quotient& (0+255),b
  5304  000F08  1FB3               	comf	(___awdiv@quotient+1)& (0+255),f,b
  5305  000F0A  B0D8               	btfsc	status,0,c
  5306  000F0C  2BB3               	incf	(___awdiv@quotient+1)& (0+255),f,b
  5307  000F0E                     l1865:
  5308                           
  5309                           ; BSR set to: 0
  5310  000F0E  C0B2  F0AC         	movff	___awdiv@quotient,?___awdiv
  5311  000F12  C0B3  F0AD         	movff	___awdiv@quotient+1,?___awdiv+1
  5312  000F16  0012               	return	
  5313  000F18                     __end_of___awdiv:
  5314                           	opt stack 0
  5315                           tblptru	equ	0xFF8
  5316                           tblptrh	equ	0xFF7
  5317                           tblptrl	equ	0xFF6
  5318                           tablat	equ	0xFF5
  5319                           intcon	equ	0xFF2
  5320                           intcon2	equ	0xFF1
  5321                           intcon3	equ	0xFF0
  5322                           postinc0	equ	0xFEE
  5323                           wreg	equ	0xFE8
  5324                           plusw1	equ	0xFE3
  5325                           indf2	equ	0xFDF
  5326                           postinc2	equ	0xFDE
  5327                           postdec2	equ	0xFDD
  5328                           plusw2	equ	0xFDB
  5329                           fsr2h	equ	0xFDA
  5330                           fsr2l	equ	0xFD9
  5331                           status	equ	0xFD8
  5332                           
  5333 ;; *************** function _ISR *****************
  5334 ;; Defined at:
  5335 ;;		line 21 in file "main.c"
  5336 ;; Parameters:    Size  Location     Type
  5337 ;;		None
  5338 ;; Auto vars:     Size  Location     Type
  5339 ;;		None
  5340 ;; Return value:  Size  Location     Type
  5341 ;;                  1    wreg      void 
  5342 ;; Registers used:
  5343 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5344 ;; Tracked objects:
  5345 ;;		On entry : 0/0
  5346 ;;		On exit  : 0/0
  5347 ;;		Unchanged: 0/0
  5348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5351 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5352 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5353 ;;Total ram usage:       14 bytes
  5354 ;; Hardware stack levels used:    1
  5355 ;; Hardware stack levels required when called:    2
  5356 ;; This function calls:
  5357 ;;		_read_cdc1
  5358 ;;		_read_cdc2
  5359 ;;		i2_read_AD7147
  5360 ;; This function is called by:
  5361 ;;		Interrupt level 2
  5362 ;; This function uses a non-reentrant model
  5363 ;;
  5364                           
  5365                           	psect	intcode
  5366  000008                     __pintcode:
  5367                           	opt stack 0
  5368  000008                     _ISR:
  5369                           	opt stack 25
  5370                           
  5371                           ; BSR set to: 0
  5372                           ;incstack = 0
  5373  000008  8257               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5374  00000A  CFFA F023          	movff	pclath,??_ISR
  5375  00000E  CFFB F024          	movff	pclatu,??_ISR+1
  5376  000012  CFE9 F025          	movff	fsr0l,??_ISR+2
  5377  000016  CFEA F026          	movff	fsr0h,??_ISR+3
  5378  00001A  CFE1 F027          	movff	fsr1l,??_ISR+4
  5379  00001E  CFE2 F028          	movff	fsr1h,??_ISR+5
  5380  000022  CFD9 F029          	movff	fsr2l,??_ISR+6
  5381  000026  CFDA F02A          	movff	fsr2h,??_ISR+7
  5382  00002A  CFF3 F02B          	movff	prodl,??_ISR+8
  5383  00002E  CFF4 F02C          	movff	prodh,??_ISR+9
  5384  000032  CFF6 F02D          	movff	tblptrl,??_ISR+10
  5385  000036  CFF7 F02E          	movff	tblptrh,??_ISR+11
  5386  00003A  CFF8 F02F          	movff	tblptru,??_ISR+12
  5387  00003E  CFF5 F030          	movff	tablat,??_ISR+13
  5388                           
  5389                           ;main.c: 24: if(INTCONbits.INT0IF && INTCONbits.INT0IE)
  5390  000042  B2F2               	btfsc	intcon,1,c	;volatile
  5391  000044  A8F2               	btfss	intcon,4,c	;volatile
  5392  000046  D019               	goto	i2l2395
  5393                           
  5394                           ;main.c: 25: {
  5395                           ;main.c: 26: read_cdc1(sensor_values);
  5396  000048  0E7C               	movlw	low _sensor_values
  5397  00004A  6E17               	movwf	read_cdc1@sensor_values,c
  5398  00004C  0E00               	movlw	high _sensor_values
  5399  00004E  6E18               	movwf	read_cdc1@sensor_values+1,c
  5400  000050  ECFE  F008         	call	_read_cdc1	;wreg free
  5401                           
  5402                           ;main.c: 27: read_AD7147(interrupt_values_cdc1, 0x008, 3, 1);
  5403  000054  0E51               	movlw	low _interrupt_values_cdc1
  5404  000056  6E17               	movwf	i2read_AD7147@DataBuffer,c
  5405  000058  0E00               	movlw	high _interrupt_values_cdc1
  5406  00005A  6E18               	movwf	i2read_AD7147@DataBuffer+1,c
  5407  00005C  0E00               	movlw	0
  5408  00005E  6E1A               	movwf	i2read_AD7147@RegisterStartAddress+1,c
  5409  000060  0E08               	movlw	8
  5410  000062  6E19               	movwf	i2read_AD7147@RegisterStartAddress,c
  5411  000064  0E00               	movlw	0
  5412  000066  6E1C               	movwf	i2read_AD7147@NumberOfRegisters+1,c
  5413  000068  0E03               	movlw	3
  5414  00006A  6E1B               	movwf	i2read_AD7147@NumberOfRegisters,c
  5415  00006C  0E00               	movlw	0
  5416  00006E  6E1E               	movwf	i2read_AD7147@cdc+1,c
  5417  000070  0E01               	movlw	1
  5418  000072  6E1D               	movwf	i2read_AD7147@cdc,c
  5419  000074  EC7C  F009         	call	i2_read_AD7147	;wreg free
  5420                           
  5421                           ;main.c: 28: INTCONbits.INT0IF = 0;
  5422  000078  92F2               	bcf	intcon,1,c	;volatile
  5423  00007A                     i2l2395:
  5424                           
  5425                           ;main.c: 29: }
  5426                           ;main.c: 30: if(INTCON3bits.INT1IF && INTCON3bits.INT1E)
  5427  00007A  B0F0               	btfsc	intcon3,0,c	;volatile
  5428  00007C  A6F0               	btfss	intcon3,3,c	;volatile
  5429  00007E  D019               	goto	i2l156
  5430                           
  5431                           ;main.c: 31: {
  5432                           ;main.c: 32: read_cdc2(sensor_values);
  5433  000080  0E7C               	movlw	low _sensor_values
  5434  000082  6E17               	movwf	read_cdc2@sensor_values,c
  5435  000084  0E00               	movlw	high _sensor_values
  5436  000086  6E18               	movwf	read_cdc2@sensor_values+1,c
  5437  000088  ECBD  F008         	call	_read_cdc2	;wreg free
  5438                           
  5439                           ;main.c: 33: read_AD7147(interrupt_values_cdc2, 0x008, 3, 2);
  5440  00008C  0E4B               	movlw	low _interrupt_values_cdc2
  5441  00008E  6E17               	movwf	i2read_AD7147@DataBuffer,c
  5442  000090  0E00               	movlw	high _interrupt_values_cdc2
  5443  000092  6E18               	movwf	i2read_AD7147@DataBuffer+1,c
  5444  000094  0E00               	movlw	0
  5445  000096  6E1A               	movwf	i2read_AD7147@RegisterStartAddress+1,c
  5446  000098  0E08               	movlw	8
  5447  00009A  6E19               	movwf	i2read_AD7147@RegisterStartAddress,c
  5448  00009C  0E00               	movlw	0
  5449  00009E  6E1C               	movwf	i2read_AD7147@NumberOfRegisters+1,c
  5450  0000A0  0E03               	movlw	3
  5451  0000A2  6E1B               	movwf	i2read_AD7147@NumberOfRegisters,c
  5452  0000A4  0E00               	movlw	0
  5453  0000A6  6E1E               	movwf	i2read_AD7147@cdc+1,c
  5454  0000A8  0E02               	movlw	2
  5455  0000AA  6E1D               	movwf	i2read_AD7147@cdc,c
  5456  0000AC  EC7C  F009         	call	i2_read_AD7147	;wreg free
  5457                           
  5458                           ;main.c: 34: INTCON3bits.INT1IF = 0;
  5459  0000B0  90F0               	bcf	intcon3,0,c	;volatile
  5460  0000B2                     i2l156:
  5461  0000B2  C030  FFF5         	movff	??_ISR+13,tablat
  5462  0000B6  C02F  FFF8         	movff	??_ISR+12,tblptru
  5463  0000BA  C02E  FFF7         	movff	??_ISR+11,tblptrh
  5464  0000BE  C02D  FFF6         	movff	??_ISR+10,tblptrl
  5465  0000C2  C02C  FFF4         	movff	??_ISR+9,prodh
  5466  0000C6  C02B  FFF3         	movff	??_ISR+8,prodl
  5467  0000CA  C02A  FFDA         	movff	??_ISR+7,fsr2h
  5468  0000CE  C029  FFD9         	movff	??_ISR+6,fsr2l
  5469  0000D2  C028  FFE2         	movff	??_ISR+5,fsr1h
  5470  0000D6  C027  FFE1         	movff	??_ISR+4,fsr1l
  5471  0000DA  C026  FFEA         	movff	??_ISR+3,fsr0h
  5472  0000DE  C025  FFE9         	movff	??_ISR+2,fsr0l
  5473  0000E2  C024  FFFB         	movff	??_ISR+1,pclatu
  5474  0000E6  C023  FFFA         	movff	??_ISR,pclath
  5475  0000EA  9257               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5476  0000EC  0011               	retfie		f
  5477  0000EE                     __end_of_ISR:
  5478                           	opt stack 0
  5479                           pclatu	equ	0xFFB
  5480                           pclath	equ	0xFFA
  5481                           tblptru	equ	0xFF8
  5482                           tblptrh	equ	0xFF7
  5483                           tblptrl	equ	0xFF6
  5484                           tablat	equ	0xFF5
  5485                           prodh	equ	0xFF4
  5486                           prodl	equ	0xFF3
  5487                           intcon	equ	0xFF2
  5488                           intcon2	equ	0xFF1
  5489                           intcon3	equ	0xFF0
  5490                           postinc0	equ	0xFEE
  5491                           fsr0h	equ	0xFEA
  5492                           fsr0l	equ	0xFE9
  5493                           wreg	equ	0xFE8
  5494                           plusw1	equ	0xFE3
  5495                           fsr1h	equ	0xFE2
  5496                           fsr1l	equ	0xFE1
  5497                           indf2	equ	0xFDF
  5498                           postinc2	equ	0xFDE
  5499                           postdec2	equ	0xFDD
  5500                           plusw2	equ	0xFDB
  5501                           fsr2h	equ	0xFDA
  5502                           fsr2l	equ	0xFD9
  5503                           status	equ	0xFD8
  5504                           
  5505 ;; *************** function i2_read_AD7147 *****************
  5506 ;; Defined at:
  5507 ;;		line 221 in file "AD7147.c"
  5508 ;; Parameters:    Size  Location     Type
  5509 ;;  DataBuffer      2   22[COMRAM] PTR unsigned int 
  5510 ;;		 -> interrupt_values_cdc2(6), interrupt_values_cdc1(6), 
  5511 ;;  RegisterStar    2   24[COMRAM] unsigned int 
  5512 ;;  NumberOfRegi    2   26[COMRAM] unsigned int 
  5513 ;;  cdc             2   28[COMRAM] unsigned int 
  5514 ;; Auto vars:     Size  Location     Type
  5515 ;;  read_AD7147     2   32[COMRAM] unsigned int 
  5516 ;;  read_AD7147     2   30[COMRAM] unsigned int 
  5517 ;; Return value:  Size  Location     Type
  5518 ;;                  1    wreg      void 
  5519 ;; Registers used:
  5520 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5521 ;; Tracked objects:
  5522 ;;		On entry : 0/0
  5523 ;;		On exit  : 0/0
  5524 ;;		Unchanged: 0/0
  5525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5526 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5527 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5529 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5530 ;;Total ram usage:       12 bytes
  5531 ;; Hardware stack levels used:    1
  5532 ;; Hardware stack levels required when called:    1
  5533 ;; This function calls:
  5534 ;;		i2_get_CDC
  5535 ;;		i2_w16_r16_spi
  5536 ;; This function is called by:
  5537 ;;		_ISR
  5538 ;; This function uses a non-reentrant model
  5539 ;;
  5540                           
  5541                           	psect	text26
  5542  0012F8                     __ptext26:
  5543                           	opt stack 0
  5544  0012F8                     i2_read_AD7147:
  5545                           	opt stack 25
  5546                           
  5547                           ;AD7147.c: 223: get_CDC(cdc,0);
  5548                           
  5549                           ;incstack = 0
  5550  0012F8  C01D  F001         	movff	i2read_AD7147@cdc,i2get_CDC@cdc
  5551  0012FC  C01E  F002         	movff	i2read_AD7147@cdc+1,i2get_CDC@cdc+1
  5552  001300  0E00               	movlw	0
  5553  001302  6E04               	movwf	i2get_CDC@state+1,c
  5554  001304  0E00               	movlw	0
  5555  001306  6E03               	movwf	i2get_CDC@state,c
  5556  001308  EC0B  F00B         	call	i2_get_CDC	;wreg free
  5557                           
  5558                           ;AD7147.c: 224: unsigned int Register_Values = 0xE400 + RegisterStartAddress;
  5559  00130C  0E00               	movlw	0
  5560  00130E  2419               	addwf	i2read_AD7147@RegisterStartAddress,w,c
  5561  001310  6E1F               	movwf	i2read_AD7147@Register_Values,c
  5562  001312  0EE4               	movlw	228
  5563  001314  201A               	addwfc	i2read_AD7147@RegisterStartAddress+1,w,c
  5564  001316  6E20               	movwf	i2read_AD7147@Register_Values+1,c
  5565                           
  5566                           ;AD7147.c: 225: for (unsigned int i=0; i<NumberOfRegisters; i++)
  5567  001318  0E00               	movlw	0
  5568  00131A  6E22               	movwf	i2read_AD7147@i+1,c
  5569  00131C  0E00               	movlw	0
  5570  00131E  6E21               	movwf	i2read_AD7147@i,c
  5571  001320  D017               	goto	i2l2365
  5572  001322                     i2l2361:
  5573                           
  5574                           ;AD7147.c: 226: {
  5575                           ;AD7147.c: 227: DataBuffer[i]=w16_r16_spi(Register_Values+i);
  5576  001322  5021               	movf	i2read_AD7147@i,w,c
  5577  001324  241F               	addwf	i2read_AD7147@Register_Values,w,c
  5578  001326  6E01               	movwf	i2w16_r16_spi@address,c
  5579  001328  5022               	movf	i2read_AD7147@i+1,w,c
  5580  00132A  2020               	addwfc	i2read_AD7147@Register_Values+1,w,c
  5581  00132C  6E02               	movwf	i2w16_r16_spi@address+1,c
  5582  00132E  EC3D  F009         	call	i2_w16_r16_spi	;wreg free
  5583  001332  90D8               	bcf	status,0,c
  5584  001334  3421               	rlcf	i2read_AD7147@i,w,c
  5585  001336  6ED9               	movwf	fsr2l,c
  5586  001338  3422               	rlcf	i2read_AD7147@i+1,w,c
  5587  00133A  6EDA               	movwf	fsr2h,c
  5588  00133C  5017               	movf	i2read_AD7147@DataBuffer,w,c
  5589  00133E  26D9               	addwf	fsr2l,f,c
  5590  001340  5018               	movf	i2read_AD7147@DataBuffer+1,w,c
  5591  001342  22DA               	addwfc	fsr2h,f,c
  5592  001344  C001  FFDE         	movff	?i2_w16_r16_spi,postinc2
  5593  001348  C002  FFDD         	movff	?i2_w16_r16_spi+1,postdec2
  5594  00134C  4A21               	infsnz	i2read_AD7147@i,f,c
  5595  00134E  2A22               	incf	i2read_AD7147@i+1,f,c
  5596  001350                     i2l2365:
  5597  001350  501B               	movf	i2read_AD7147@NumberOfRegisters,w,c
  5598  001352  5C21               	subwf	i2read_AD7147@i,w,c
  5599  001354  501C               	movf	i2read_AD7147@NumberOfRegisters+1,w,c
  5600  001356  5822               	subwfb	i2read_AD7147@i+1,w,c
  5601  001358  A0D8               	btfss	status,0,c
  5602  00135A  D7E3               	goto	i2l2361
  5603                           
  5604                           ;AD7147.c: 228: }
  5605                           ;AD7147.c: 229: get_CDC(cdc,1);
  5606  00135C  C01D  F001         	movff	i2read_AD7147@cdc,i2get_CDC@cdc
  5607  001360  C01E  F002         	movff	i2read_AD7147@cdc+1,i2get_CDC@cdc+1
  5608  001364  0E00               	movlw	0
  5609  001366  6E04               	movwf	i2get_CDC@state+1,c
  5610  001368  0E01               	movlw	1
  5611  00136A  6E03               	movwf	i2get_CDC@state,c
  5612  00136C  EC0B  F00B         	call	i2_get_CDC	;wreg free
  5613  001370  0012               	return		;funcret
  5614  001372                     __end_ofi2_read_AD7147:
  5615                           	opt stack 0
  5616                           pclatu	equ	0xFFB
  5617                           pclath	equ	0xFFA
  5618                           tblptru	equ	0xFF8
  5619                           tblptrh	equ	0xFF7
  5620                           tblptrl	equ	0xFF6
  5621                           tablat	equ	0xFF5
  5622                           prodh	equ	0xFF4
  5623                           prodl	equ	0xFF3
  5624                           intcon	equ	0xFF2
  5625                           intcon2	equ	0xFF1
  5626                           intcon3	equ	0xFF0
  5627                           postinc0	equ	0xFEE
  5628                           fsr0h	equ	0xFEA
  5629                           fsr0l	equ	0xFE9
  5630                           wreg	equ	0xFE8
  5631                           plusw1	equ	0xFE3
  5632                           fsr1h	equ	0xFE2
  5633                           fsr1l	equ	0xFE1
  5634                           indf2	equ	0xFDF
  5635                           postinc2	equ	0xFDE
  5636                           postdec2	equ	0xFDD
  5637                           plusw2	equ	0xFDB
  5638                           fsr2h	equ	0xFDA
  5639                           fsr2l	equ	0xFD9
  5640                           status	equ	0xFD8
  5641                           
  5642 ;; *************** function _read_cdc2 *****************
  5643 ;; Defined at:
  5644 ;;		line 281 in file "AD7147.c"
  5645 ;; Parameters:    Size  Location     Type
  5646 ;;  sensor_value    2   22[COMRAM] PTR unsigned int 
  5647 ;;		 -> sensor_values(48), 
  5648 ;; Auto vars:     Size  Location     Type
  5649 ;;  i               2   24[COMRAM] unsigned int 
  5650 ;; Return value:  Size  Location     Type
  5651 ;;                  1    wreg      void 
  5652 ;; Registers used:
  5653 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5654 ;; Tracked objects:
  5655 ;;		On entry : 0/0
  5656 ;;		On exit  : 0/0
  5657 ;;		Unchanged: 0/0
  5658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5659 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5660 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5662 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5663 ;;Total ram usage:        4 bytes
  5664 ;; Hardware stack levels used:    1
  5665 ;; Hardware stack levels required when called:    1
  5666 ;; This function calls:
  5667 ;;		_r16_spi
  5668 ;;		i2_get_CDC
  5669 ;;		i2_w16_r16_spi
  5670 ;; This function is called by:
  5671 ;;		_ISR
  5672 ;; This function uses a non-reentrant model
  5673 ;;
  5674                           
  5675                           	psect	text27
  5676  00117A                     __ptext27:
  5677                           	opt stack 0
  5678  00117A                     _read_cdc2:
  5679                           	opt stack 25
  5680                           
  5681                           ;AD7147.c: 283: get_CDC(2,0);
  5682                           
  5683                           ;incstack = 0
  5684  00117A  0E00               	movlw	0
  5685  00117C  6E02               	movwf	i2get_CDC@cdc+1,c
  5686  00117E  0E02               	movlw	2
  5687  001180  6E01               	movwf	i2get_CDC@cdc,c
  5688  001182  0E00               	movlw	0
  5689  001184  6E04               	movwf	i2get_CDC@state+1,c
  5690  001186  0E00               	movlw	0
  5691  001188  6E03               	movwf	i2get_CDC@state,c
  5692  00118A  EC0B  F00B         	call	i2_get_CDC	;wreg free
  5693                           
  5694                           ;AD7147.c: 284: sensor_values[12] = w16_r16_spi(0xE400 + 0x00B);
  5695  00118E  0EE4               	movlw	228
  5696  001190  6E02               	movwf	i2w16_r16_spi@address+1,c
  5697  001192  0E0B               	movlw	11
  5698  001194  6E01               	movwf	i2w16_r16_spi@address,c
  5699  001196  EC3D  F009         	call	i2_w16_r16_spi	;wreg free
  5700  00119A  EE20 F018          	lfsr	2,24
  5701  00119E  5017               	movf	read_cdc2@sensor_values,w,c
  5702  0011A0  26D9               	addwf	fsr2l,f,c
  5703  0011A2  5018               	movf	read_cdc2@sensor_values+1,w,c
  5704  0011A4  22DA               	addwfc	fsr2h,f,c
  5705  0011A6  C001  FFDE         	movff	?i2_w16_r16_spi,postinc2
  5706  0011AA  C002  FFDD         	movff	?i2_w16_r16_spi+1,postdec2
  5707                           
  5708                           ;AD7147.c: 285: for(unsigned int i = 13; i<17; i++)
  5709  0011AE  0E00               	movlw	0
  5710  0011B0  6E1A               	movwf	read_cdc2@i+1,c
  5711  0011B2  0E0D               	movlw	13
  5712  0011B4  6E19               	movwf	read_cdc2@i,c
  5713  0011B6                     i2l2251:
  5714  0011B6  501A               	movf	read_cdc2@i+1,w,c
  5715  0011B8  E116               	bnz	i2l2261
  5716  0011BA  0E11               	movlw	17
  5717  0011BC  5C19               	subwf	read_cdc2@i,w,c
  5718  0011BE  B0D8               	btfsc	status,0,c
  5719  0011C0  D012               	goto	i2l2261
  5720                           
  5721                           ;AD7147.c: 286: {
  5722                           ;AD7147.c: 287: sensor_values[i] = r16_spi();
  5723  0011C2  EC67  F00A         	call	_r16_spi	;wreg free
  5724  0011C6  90D8               	bcf	status,0,c
  5725  0011C8  3419               	rlcf	read_cdc2@i,w,c
  5726  0011CA  6ED9               	movwf	fsr2l,c
  5727  0011CC  341A               	rlcf	read_cdc2@i+1,w,c
  5728  0011CE  6EDA               	movwf	fsr2h,c
  5729  0011D0  5017               	movf	read_cdc2@sensor_values,w,c
  5730  0011D2  26D9               	addwf	fsr2l,f,c
  5731  0011D4  5018               	movf	read_cdc2@sensor_values+1,w,c
  5732  0011D6  22DA               	addwfc	fsr2h,f,c
  5733  0011D8  C001  FFDE         	movff	?_r16_spi,postinc2
  5734  0011DC  C002  FFDD         	movff	?_r16_spi+1,postdec2
  5735  0011E0  4A19               	infsnz	read_cdc2@i,f,c
  5736  0011E2  2A1A               	incf	read_cdc2@i+1,f,c
  5737  0011E4  D7E8               	goto	i2l2251
  5738  0011E6                     i2l2261:
  5739                           
  5740                           ;AD7147.c: 288: }
  5741                           ;AD7147.c: 289: get_CDC(2,1);
  5742  0011E6  0E00               	movlw	0
  5743  0011E8  6E02               	movwf	i2get_CDC@cdc+1,c
  5744  0011EA  0E02               	movlw	2
  5745  0011EC  6E01               	movwf	i2get_CDC@cdc,c
  5746  0011EE  0E00               	movlw	0
  5747  0011F0  6E04               	movwf	i2get_CDC@state+1,c
  5748  0011F2  0E01               	movlw	1
  5749  0011F4  6E03               	movwf	i2get_CDC@state,c
  5750  0011F6  EC0B  F00B         	call	i2_get_CDC	;wreg free
  5751  0011FA  0012               	return		;funcret
  5752  0011FC                     __end_of_read_cdc2:
  5753                           	opt stack 0
  5754                           pclatu	equ	0xFFB
  5755                           pclath	equ	0xFFA
  5756                           tblptru	equ	0xFF8
  5757                           tblptrh	equ	0xFF7
  5758                           tblptrl	equ	0xFF6
  5759                           tablat	equ	0xFF5
  5760                           prodh	equ	0xFF4
  5761                           prodl	equ	0xFF3
  5762                           intcon	equ	0xFF2
  5763                           intcon2	equ	0xFF1
  5764                           intcon3	equ	0xFF0
  5765                           postinc0	equ	0xFEE
  5766                           fsr0h	equ	0xFEA
  5767                           fsr0l	equ	0xFE9
  5768                           wreg	equ	0xFE8
  5769                           plusw1	equ	0xFE3
  5770                           fsr1h	equ	0xFE2
  5771                           fsr1l	equ	0xFE1
  5772                           indf2	equ	0xFDF
  5773                           postinc2	equ	0xFDE
  5774                           postdec2	equ	0xFDD
  5775                           plusw2	equ	0xFDB
  5776                           fsr2h	equ	0xFDA
  5777                           fsr2l	equ	0xFD9
  5778                           status	equ	0xFD8
  5779                           
  5780 ;; *************** function _read_cdc1 *****************
  5781 ;; Defined at:
  5782 ;;		line 271 in file "AD7147.c"
  5783 ;; Parameters:    Size  Location     Type
  5784 ;;  sensor_value    2   22[COMRAM] PTR unsigned int 
  5785 ;;		 -> sensor_values(48), 
  5786 ;; Auto vars:     Size  Location     Type
  5787 ;;  i               2   24[COMRAM] unsigned int 
  5788 ;; Return value:  Size  Location     Type
  5789 ;;                  1    wreg      void 
  5790 ;; Registers used:
  5791 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5792 ;; Tracked objects:
  5793 ;;		On entry : 0/0
  5794 ;;		On exit  : 0/0
  5795 ;;		Unchanged: 0/0
  5796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5797 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5798 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5800 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5801 ;;Total ram usage:        4 bytes
  5802 ;; Hardware stack levels used:    1
  5803 ;; Hardware stack levels required when called:    1
  5804 ;; This function calls:
  5805 ;;		_r16_spi
  5806 ;;		i2_get_CDC
  5807 ;;		i2_w16_r16_spi
  5808 ;; This function is called by:
  5809 ;;		_ISR
  5810 ;; This function uses a non-reentrant model
  5811 ;;
  5812                           
  5813                           	psect	text28
  5814  0011FC                     __ptext28:
  5815                           	opt stack 0
  5816  0011FC                     _read_cdc1:
  5817                           	opt stack 25
  5818                           
  5819                           ;AD7147.c: 273: get_CDC(1,0);
  5820                           
  5821                           ;incstack = 0
  5822  0011FC  0E00               	movlw	0
  5823  0011FE  6E02               	movwf	i2get_CDC@cdc+1,c
  5824  001200  0E01               	movlw	1
  5825  001202  6E01               	movwf	i2get_CDC@cdc,c
  5826  001204  0E00               	movlw	0
  5827  001206  6E04               	movwf	i2get_CDC@state+1,c
  5828  001208  0E00               	movlw	0
  5829  00120A  6E03               	movwf	i2get_CDC@state,c
  5830  00120C  EC0B  F00B         	call	i2_get_CDC	;wreg free
  5831                           
  5832                           ;AD7147.c: 274: sensor_values[0] = w16_r16_spi(0xE400 + 0x00B);
  5833  001210  0EE4               	movlw	228
  5834  001212  6E02               	movwf	i2w16_r16_spi@address+1,c
  5835  001214  0E0B               	movlw	11
  5836  001216  6E01               	movwf	i2w16_r16_spi@address,c
  5837  001218  EC3D  F009         	call	i2_w16_r16_spi	;wreg free
  5838  00121C  C017  FFD9         	movff	read_cdc1@sensor_values,fsr2l
  5839  001220  C018  FFDA         	movff	read_cdc1@sensor_values+1,fsr2h
  5840  001224  C001  FFDE         	movff	?i2_w16_r16_spi,postinc2
  5841  001228  C002  FFDD         	movff	?i2_w16_r16_spi+1,postdec2
  5842                           
  5843                           ;AD7147.c: 275: for(unsigned int i = 1; i<3; i++)
  5844  00122C  0E00               	movlw	0
  5845  00122E  6E1A               	movwf	read_cdc1@i+1,c
  5846  001230  0E01               	movlw	1
  5847  001232  6E19               	movwf	read_cdc1@i,c
  5848  001234                     i2l2233:
  5849  001234  501A               	movf	read_cdc1@i+1,w,c
  5850  001236  E116               	bnz	i2l2243
  5851  001238  0E03               	movlw	3
  5852  00123A  5C19               	subwf	read_cdc1@i,w,c
  5853  00123C  B0D8               	btfsc	status,0,c
  5854  00123E  D012               	goto	i2l2243
  5855                           
  5856                           ;AD7147.c: 276: {
  5857                           ;AD7147.c: 277: sensor_values[i] = r16_spi();
  5858  001240  EC67  F00A         	call	_r16_spi	;wreg free
  5859  001244  90D8               	bcf	status,0,c
  5860  001246  3419               	rlcf	read_cdc1@i,w,c
  5861  001248  6ED9               	movwf	fsr2l,c
  5862  00124A  341A               	rlcf	read_cdc1@i+1,w,c
  5863  00124C  6EDA               	movwf	fsr2h,c
  5864  00124E  5017               	movf	read_cdc1@sensor_values,w,c
  5865  001250  26D9               	addwf	fsr2l,f,c
  5866  001252  5018               	movf	read_cdc1@sensor_values+1,w,c
  5867  001254  22DA               	addwfc	fsr2h,f,c
  5868  001256  C001  FFDE         	movff	?_r16_spi,postinc2
  5869  00125A  C002  FFDD         	movff	?_r16_spi+1,postdec2
  5870  00125E  4A19               	infsnz	read_cdc1@i,f,c
  5871  001260  2A1A               	incf	read_cdc1@i+1,f,c
  5872  001262  D7E8               	goto	i2l2233
  5873  001264                     i2l2243:
  5874                           
  5875                           ;AD7147.c: 278: }
  5876                           ;AD7147.c: 279: get_CDC(1,1);
  5877  001264  0E00               	movlw	0
  5878  001266  6E02               	movwf	i2get_CDC@cdc+1,c
  5879  001268  0E01               	movlw	1
  5880  00126A  6E01               	movwf	i2get_CDC@cdc,c
  5881  00126C  0E00               	movlw	0
  5882  00126E  6E04               	movwf	i2get_CDC@state+1,c
  5883  001270  0E01               	movlw	1
  5884  001272  6E03               	movwf	i2get_CDC@state,c
  5885  001274  EC0B  F00B         	call	i2_get_CDC	;wreg free
  5886  001278  0012               	return		;funcret
  5887  00127A                     __end_of_read_cdc1:
  5888                           	opt stack 0
  5889                           pclatu	equ	0xFFB
  5890                           pclath	equ	0xFFA
  5891                           tblptru	equ	0xFF8
  5892                           tblptrh	equ	0xFF7
  5893                           tblptrl	equ	0xFF6
  5894                           tablat	equ	0xFF5
  5895                           prodh	equ	0xFF4
  5896                           prodl	equ	0xFF3
  5897                           intcon	equ	0xFF2
  5898                           intcon2	equ	0xFF1
  5899                           intcon3	equ	0xFF0
  5900                           postinc0	equ	0xFEE
  5901                           fsr0h	equ	0xFEA
  5902                           fsr0l	equ	0xFE9
  5903                           wreg	equ	0xFE8
  5904                           plusw1	equ	0xFE3
  5905                           fsr1h	equ	0xFE2
  5906                           fsr1l	equ	0xFE1
  5907                           indf2	equ	0xFDF
  5908                           postinc2	equ	0xFDE
  5909                           postdec2	equ	0xFDD
  5910                           plusw2	equ	0xFDB
  5911                           fsr2h	equ	0xFDA
  5912                           fsr2l	equ	0xFD9
  5913                           status	equ	0xFD8
  5914                           
  5915 ;; *************** function i2_w16_r16_spi *****************
  5916 ;; Defined at:
  5917 ;;		line 89 in file "spi.c"
  5918 ;; Parameters:    Size  Location     Type
  5919 ;;  address         2    0[COMRAM] unsigned int 
  5920 ;; Auto vars:     Size  Location     Type
  5921 ;;  w16_r16_spi     2   20[COMRAM] unsigned int 
  5922 ;;  w16_r16_spi     2   18[COMRAM] unsigned int 
  5923 ;;  w16_r16_spi     2   16[COMRAM] unsigned int 
  5924 ;;  w16_r16_spi     2   14[COMRAM] unsigned int 
  5925 ;;  w16_r16_spi     2   12[COMRAM] unsigned int 
  5926 ;;  w16_r16_spi     2   10[COMRAM] unsigned int 
  5927 ;;  w16_r16_spi     2    8[COMRAM] unsigned int 
  5928 ;;  w16_r16_spi     2    6[COMRAM] unsigned int 
  5929 ;;  w16_r16_spi     2    4[COMRAM] unsigned int 
  5930 ;; Return value:  Size  Location     Type
  5931 ;;                  2    0[COMRAM] unsigned int 
  5932 ;; Registers used:
  5933 ;;		wreg, status,2, status,0
  5934 ;; Tracked objects:
  5935 ;;		On entry : 0/0
  5936 ;;		On exit  : 0/0
  5937 ;;		Unchanged: 0/0
  5938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5939 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5940 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5941 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5942 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5943 ;;Total ram usage:       22 bytes
  5944 ;; Hardware stack levels used:    1
  5945 ;; This function calls:
  5946 ;;		Nothing
  5947 ;; This function is called by:
  5948 ;;		_read_cdc1
  5949 ;;		_read_cdc2
  5950 ;;		i2_read_AD7147
  5951 ;; This function uses a non-reentrant model
  5952 ;;
  5953                           
  5954                           	psect	text29
  5955  00127A                     __ptext29:
  5956                           	opt stack 0
  5957  00127A                     i2_w16_r16_spi:
  5958                           	opt stack 25
  5959                           
  5960                           ;spi.c: 91: unsigned int address_low, address_high, result;
  5961                           ;spi.c: 92: unsigned int blank_low = 0x000;
  5962                           
  5963                           ;incstack = 0
  5964  00127A  0E00               	movlw	0
  5965  00127C  6E10               	movwf	i2w16_r16_spi@blank_low+1,c
  5966  00127E  0E00               	movlw	0
  5967  001280  6E0F               	movwf	i2w16_r16_spi@blank_low,c
  5968                           
  5969                           ;spi.c: 93: unsigned int blank_high = 0x000;
  5970  001282  0E00               	movlw	0
  5971  001284  6E12               	movwf	i2w16_r16_spi@blank_high+1,c
  5972  001286  0E00               	movlw	0
  5973  001288  6E11               	movwf	i2w16_r16_spi@blank_high,c
  5974                           
  5975                           ;spi.c: 94: unsigned int p1, p2, p3, p4;
  5976                           ;spi.c: 96: address_low = address & 0xFF;
  5977  00128A  5001               	movf	i2w16_r16_spi@address,w,c
  5978  00128C  6E09               	movwf	i2w16_r16_spi@address_low,c
  5979  00128E  6A0A               	clrf	i2w16_r16_spi@address_low+1,c
  5980                           
  5981                           ;spi.c: 97: address_high = (address >> 8) & 0xFF;
  5982  001290  C001  F003         	movff	i2w16_r16_spi@address,??i2_w16_r16_spi
  5983  001294  C002  F004         	movff	i2w16_r16_spi@address+1,??i2_w16_r16_spi+1
  5984  001298  C004  F003         	movff	??i2_w16_r16_spi+1,??i2_w16_r16_spi
  5985  00129C  6A04               	clrf	??i2_w16_r16_spi+1,c
  5986  00129E  5003               	movf	??i2_w16_r16_spi,w,c
  5987  0012A0  6E0B               	movwf	i2w16_r16_spi@address_high,c
  5988  0012A2  6A0C               	clrf	i2w16_r16_spi@address_high+1,c
  5989                           
  5990                           ;spi.c: 99: SSPBUF = address_high;
  5991  0012A4  C00B  FFC9         	movff	i2w16_r16_spi@address_high,4041	;volatile
  5992  0012A8                     i2l300:
  5993  0012A8  A0C7               	btfss	4039,0,c	;volatile
  5994  0012AA  D7FE               	goto	i2l300
  5995                           
  5996                           ;spi.c: 101: p1 = SSPBUF;
  5997  0012AC  CFC9 F005          	movff	4041,i2w16_r16_spi@p1	;volatile
  5998  0012B0  6A06               	clrf	i2w16_r16_spi@p1+1,c
  5999                           
  6000                           ;spi.c: 103: SSPBUF = address_low;
  6001  0012B2  C009  FFC9         	movff	i2w16_r16_spi@address_low,4041	;volatile
  6002  0012B6                     i2l303:
  6003  0012B6  A0C7               	btfss	4039,0,c	;volatile
  6004  0012B8  D7FE               	goto	i2l303
  6005                           
  6006                           ;spi.c: 105: p2 = SSPBUF;
  6007  0012BA  CFC9 F007          	movff	4041,i2w16_r16_spi@p2	;volatile
  6008  0012BE  6A08               	clrf	i2w16_r16_spi@p2+1,c
  6009                           
  6010                           ;spi.c: 107: SSPBUF = blank_high;
  6011  0012C0  C011  FFC9         	movff	i2w16_r16_spi@blank_high,4041	;volatile
  6012  0012C4                     i2l306:
  6013  0012C4  A0C7               	btfss	4039,0,c	;volatile
  6014  0012C6  D7FE               	goto	i2l306
  6015                           
  6016                           ;spi.c: 109: p3 = SSPBUF;
  6017  0012C8  CFC9 F013          	movff	4041,i2w16_r16_spi@p3	;volatile
  6018  0012CC  6A14               	clrf	i2w16_r16_spi@p3+1,c
  6019                           
  6020                           ;spi.c: 111: SSPBUF = blank_low;
  6021  0012CE  C00F  FFC9         	movff	i2w16_r16_spi@blank_low,4041	;volatile
  6022  0012D2                     i2l309:
  6023  0012D2  A0C7               	btfss	4039,0,c	;volatile
  6024  0012D4  D7FE               	goto	i2l309
  6025                           
  6026                           ;spi.c: 113: p4 = SSPBUF;
  6027  0012D6  CFC9 F015          	movff	4041,i2w16_r16_spi@p4	;volatile
  6028  0012DA  6A16               	clrf	i2w16_r16_spi@p4+1,c
  6029                           
  6030                           ;spi.c: 115: result = (p3 << 8) + p4;
  6031  0012DC  5013               	movf	i2w16_r16_spi@p3,w,c
  6032  0012DE  6E04               	movwf	(??i2_w16_r16_spi+1)& (0+255),c
  6033  0012E0  6A03               	clrf	??i2_w16_r16_spi& (0+255),c
  6034  0012E2  5015               	movf	i2w16_r16_spi@p4,w,c
  6035  0012E4  2403               	addwf	??i2_w16_r16_spi,w,c
  6036  0012E6  6E0D               	movwf	i2w16_r16_spi@result,c
  6037  0012E8  5016               	movf	i2w16_r16_spi@p4+1,w,c
  6038  0012EA  2004               	addwfc	??i2_w16_r16_spi+1,w,c
  6039  0012EC  6E0E               	movwf	i2w16_r16_spi@result+1,c
  6040                           
  6041                           ;spi.c: 116: return result;
  6042  0012EE  C00D  F001         	movff	i2w16_r16_spi@result,?i2_w16_r16_spi
  6043  0012F2  C00E  F002         	movff	i2w16_r16_spi@result+1,?i2_w16_r16_spi+1
  6044  0012F6  0012               	return	
  6045  0012F8                     __end_ofi2_w16_r16_spi:
  6046                           	opt stack 0
  6047                           pclatu	equ	0xFFB
  6048                           pclath	equ	0xFFA
  6049                           tblptru	equ	0xFF8
  6050                           tblptrh	equ	0xFF7
  6051                           tblptrl	equ	0xFF6
  6052                           tablat	equ	0xFF5
  6053                           prodh	equ	0xFF4
  6054                           prodl	equ	0xFF3
  6055                           intcon	equ	0xFF2
  6056                           intcon2	equ	0xFF1
  6057                           intcon3	equ	0xFF0
  6058                           postinc0	equ	0xFEE
  6059                           fsr0h	equ	0xFEA
  6060                           fsr0l	equ	0xFE9
  6061                           wreg	equ	0xFE8
  6062                           plusw1	equ	0xFE3
  6063                           fsr1h	equ	0xFE2
  6064                           fsr1l	equ	0xFE1
  6065                           indf2	equ	0xFDF
  6066                           postinc2	equ	0xFDE
  6067                           postdec2	equ	0xFDD
  6068                           plusw2	equ	0xFDB
  6069                           fsr2h	equ	0xFDA
  6070                           fsr2l	equ	0xFD9
  6071                           status	equ	0xFD8
  6072                           
  6073 ;; *************** function i2_get_CDC *****************
  6074 ;; Defined at:
  6075 ;;		line 343 in file "AD7147.c"
  6076 ;; Parameters:    Size  Location     Type
  6077 ;;  cdc             2    0[COMRAM] unsigned int 
  6078 ;;  state           2    2[COMRAM] unsigned int 
  6079 ;; Auto vars:     Size  Location     Type
  6080 ;;		None
  6081 ;; Return value:  Size  Location     Type
  6082 ;;                  1    wreg      void 
  6083 ;; Registers used:
  6084 ;;		wreg, status,2, status,0
  6085 ;; Tracked objects:
  6086 ;;		On entry : 0/0
  6087 ;;		On exit  : 0/0
  6088 ;;		Unchanged: 0/0
  6089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6090 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6093 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6094 ;;Total ram usage:        4 bytes
  6095 ;; Hardware stack levels used:    1
  6096 ;; This function calls:
  6097 ;;		Nothing
  6098 ;; This function is called by:
  6099 ;;		_read_cdc1
  6100 ;;		_read_cdc2
  6101 ;;		i2_read_AD7147
  6102 ;; This function uses a non-reentrant model
  6103 ;;
  6104                           
  6105                           	psect	text30
  6106  001616                     __ptext30:
  6107                           	opt stack 0
  6108  001616                     i2_get_CDC:
  6109                           	opt stack 25
  6110                           
  6111                           ;AD7147.c: 345: if (state == 1)
  6112                           
  6113                           ;incstack = 0
  6114  001616  0403               	decf	i2get_CDC@state,w,c
  6115  001618  1004               	iorwf	i2get_CDC@state+1,w,c
  6116  00161A  A4D8               	btfss	status,2,c
  6117  00161C  D003               	goto	i2l1951
  6118                           
  6119                           ;AD7147.c: 346: {
  6120                           ;AD7147.c: 347: LATCbits.LATC1 = 1;
  6121  00161E  828B               	bsf	3979,1,c	;volatile
  6122                           
  6123                           ;AD7147.c: 348: LATCbits.LATC0 = 1;
  6124  001620  808B               	bsf	3979,0,c	;volatile
  6125                           
  6126                           ;AD7147.c: 349: }
  6127  001622  0012               	return	
  6128  001624                     i2l1951:
  6129                           
  6130                           ;AD7147.c: 350: else
  6131                           ;AD7147.c: 351: {
  6132                           ;AD7147.c: 352: if (cdc == 1)
  6133  001624  0401               	decf	i2get_CDC@cdc,w,c
  6134  001626  1002               	iorwf	i2get_CDC@cdc+1,w,c
  6135  001628  A4D8               	btfss	status,2,c
  6136  00162A  D003               	goto	i2l79
  6137                           
  6138                           ;AD7147.c: 353: {
  6139                           ;AD7147.c: 354: LATCbits.LATC1 = 0;
  6140  00162C  928B               	bcf	3979,1,c	;volatile
  6141                           
  6142                           ;AD7147.c: 355: LATCbits.LATC0 = 1;
  6143  00162E  808B               	bsf	3979,0,c	;volatile
  6144                           
  6145                           ;AD7147.c: 356: }
  6146  001630  0012               	return	
  6147  001632                     i2l79:
  6148                           
  6149                           ;AD7147.c: 357: else
  6150                           ;AD7147.c: 358: {
  6151                           ;AD7147.c: 359: LATCbits.LATC0 = 0;
  6152  001632  908B               	bcf	3979,0,c	;volatile
  6153                           
  6154                           ;AD7147.c: 360: LATCbits.LATC1 = 1;
  6155  001634  828B               	bsf	3979,1,c	;volatile
  6156  001636  0012               	return	
  6157  001638                     __end_ofi2_get_CDC:
  6158                           	opt stack 0
  6159                           pclatu	equ	0xFFB
  6160                           pclath	equ	0xFFA
  6161                           tblptru	equ	0xFF8
  6162                           tblptrh	equ	0xFF7
  6163                           tblptrl	equ	0xFF6
  6164                           tablat	equ	0xFF5
  6165                           prodh	equ	0xFF4
  6166                           prodl	equ	0xFF3
  6167                           intcon	equ	0xFF2
  6168                           intcon2	equ	0xFF1
  6169                           intcon3	equ	0xFF0
  6170                           postinc0	equ	0xFEE
  6171                           fsr0h	equ	0xFEA
  6172                           fsr0l	equ	0xFE9
  6173                           wreg	equ	0xFE8
  6174                           plusw1	equ	0xFE3
  6175                           fsr1h	equ	0xFE2
  6176                           fsr1l	equ	0xFE1
  6177                           indf2	equ	0xFDF
  6178                           postinc2	equ	0xFDE
  6179                           postdec2	equ	0xFDD
  6180                           plusw2	equ	0xFDB
  6181                           fsr2h	equ	0xFDA
  6182                           fsr2l	equ	0xFD9
  6183                           status	equ	0xFD8
  6184                           
  6185 ;; *************** function _r16_spi *****************
  6186 ;; Defined at:
  6187 ;;		line 70 in file "spi.c"
  6188 ;; Parameters:    Size  Location     Type
  6189 ;;		None
  6190 ;; Auto vars:     Size  Location     Type
  6191 ;;  result          2   12[COMRAM] unsigned int 
  6192 ;;  p2              2   10[COMRAM] unsigned int 
  6193 ;;  p1              2    8[COMRAM] unsigned int 
  6194 ;;  blank_high      2    6[COMRAM] unsigned int 
  6195 ;;  blank_low       2    4[COMRAM] unsigned int 
  6196 ;; Return value:  Size  Location     Type
  6197 ;;                  2    0[COMRAM] unsigned int 
  6198 ;; Registers used:
  6199 ;;		wreg, status,2, status,0
  6200 ;; Tracked objects:
  6201 ;;		On entry : 0/0
  6202 ;;		On exit  : 0/0
  6203 ;;		Unchanged: 0/0
  6204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6205 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6206 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6207 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6208 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6209 ;;Total ram usage:       14 bytes
  6210 ;; Hardware stack levels used:    1
  6211 ;; This function calls:
  6212 ;;		Nothing
  6213 ;; This function is called by:
  6214 ;;		_read_cdc1
  6215 ;;		_read_cdc2
  6216 ;; This function uses a non-reentrant model
  6217 ;;
  6218                           
  6219                           	psect	text31
  6220  0014CE                     __ptext31:
  6221                           	opt stack 0
  6222  0014CE                     _r16_spi:
  6223                           	opt stack 25
  6224                           
  6225                           ;spi.c: 72: unsigned int blank_low = 0x000;
  6226                           
  6227                           ;incstack = 0
  6228  0014CE  0E00               	movlw	0
  6229  0014D0  6E06               	movwf	r16_spi@blank_low+1,c
  6230  0014D2  0E00               	movlw	0
  6231  0014D4  6E05               	movwf	r16_spi@blank_low,c
  6232                           
  6233                           ;spi.c: 73: unsigned int blank_high = 0x000;
  6234  0014D6  0E00               	movlw	0
  6235  0014D8  6E08               	movwf	r16_spi@blank_high+1,c
  6236  0014DA  0E00               	movlw	0
  6237  0014DC  6E07               	movwf	r16_spi@blank_high,c
  6238                           
  6239                           ;spi.c: 74: unsigned int p1, p2, result;
  6240                           ;spi.c: 77: SSPBUF = blank_high;
  6241  0014DE  C007  FFC9         	movff	r16_spi@blank_high,4041	;volatile
  6242  0014E2                     i2l291:
  6243  0014E2  A0C7               	btfss	4039,0,c	;volatile
  6244  0014E4  D7FE               	goto	i2l291
  6245                           
  6246                           ;spi.c: 79: p1 = SSPBUF;
  6247  0014E6  CFC9 F009          	movff	4041,r16_spi@p1	;volatile
  6248  0014EA  6A0A               	clrf	r16_spi@p1+1,c
  6249                           
  6250                           ;spi.c: 81: SSPBUF = blank_low;
  6251  0014EC  C005  FFC9         	movff	r16_spi@blank_low,4041	;volatile
  6252  0014F0                     i2l294:
  6253  0014F0  A0C7               	btfss	4039,0,c	;volatile
  6254  0014F2  D7FE               	goto	i2l294
  6255                           
  6256                           ;spi.c: 83: p2 = SSPBUF;
  6257  0014F4  CFC9 F00B          	movff	4041,r16_spi@p2	;volatile
  6258  0014F8  6A0C               	clrf	r16_spi@p2+1,c
  6259                           
  6260                           ;spi.c: 85: result = (p1 << 8) + p2;
  6261  0014FA  5009               	movf	r16_spi@p1,w,c
  6262  0014FC  6E04               	movwf	(??_r16_spi+1)& (0+255),c
  6263  0014FE  6A03               	clrf	??_r16_spi& (0+255),c
  6264  001500  500B               	movf	r16_spi@p2,w,c
  6265  001502  2403               	addwf	??_r16_spi,w,c
  6266  001504  6E0D               	movwf	r16_spi@result,c
  6267  001506  500C               	movf	r16_spi@p2+1,w,c
  6268  001508  2004               	addwfc	??_r16_spi+1,w,c
  6269  00150A  6E0E               	movwf	r16_spi@result+1,c
  6270                           
  6271                           ;spi.c: 86: return result;
  6272  00150C  C00D  F001         	movff	r16_spi@result,?_r16_spi
  6273  001510  C00E  F002         	movff	r16_spi@result+1,?_r16_spi+1
  6274  001514  0012               	return	
  6275  001516                     __end_of_r16_spi:
  6276                           	opt stack 0
  6277  0000                     pclatu	equ	0xFFB
  6278                           pclath	equ	0xFFA
  6279                           tblptru	equ	0xFF8
  6280                           tblptrh	equ	0xFF7
  6281                           tblptrl	equ	0xFF6
  6282                           tablat	equ	0xFF5
  6283                           prodh	equ	0xFF4
  6284                           prodl	equ	0xFF3
  6285                           intcon	equ	0xFF2
  6286                           intcon2	equ	0xFF1
  6287                           intcon3	equ	0xFF0
  6288                           postinc0	equ	0xFEE
  6289                           fsr0h	equ	0xFEA
  6290                           fsr0l	equ	0xFE9
  6291                           wreg	equ	0xFE8
  6292                           plusw1	equ	0xFE3
  6293                           fsr1h	equ	0xFE2
  6294                           fsr1l	equ	0xFE1
  6295                           indf2	equ	0xFDF
  6296                           postinc2	equ	0xFDE
  6297                           postdec2	equ	0xFDD
  6298                           plusw2	equ	0xFDB
  6299                           fsr2h	equ	0xFDA
  6300                           fsr2l	equ	0xFD9
  6301                           status	equ	0xFD8
  6302                           pclatu	equ	0xFFB
  6303                           pclath	equ	0xFFA
  6304                           tblptru	equ	0xFF8
  6305                           tblptrh	equ	0xFF7
  6306                           tblptrl	equ	0xFF6
  6307                           tablat	equ	0xFF5
  6308                           prodh	equ	0xFF4
  6309                           prodl	equ	0xFF3
  6310                           intcon	equ	0xFF2
  6311                           intcon2	equ	0xFF1
  6312                           intcon3	equ	0xFF0
  6313                           postinc0	equ	0xFEE
  6314                           fsr0h	equ	0xFEA
  6315                           fsr0l	equ	0xFE9
  6316                           wreg	equ	0xFE8
  6317                           plusw1	equ	0xFE3
  6318                           fsr1h	equ	0xFE2
  6319                           fsr1l	equ	0xFE1
  6320                           indf2	equ	0xFDF
  6321                           postinc2	equ	0xFDE
  6322                           postdec2	equ	0xFDD
  6323                           plusw2	equ	0xFDB
  6324                           fsr2h	equ	0xFDA
  6325                           fsr2l	equ	0xFD9
  6326                           status	equ	0xFD8
  6327                           
  6328                           	psect	rparam
  6329  0000                     pclatu	equ	0xFFB
  6330                           pclath	equ	0xFFA
  6331                           tblptru	equ	0xFF8
  6332                           tblptrh	equ	0xFF7
  6333                           tblptrl	equ	0xFF6
  6334                           tablat	equ	0xFF5
  6335                           prodh	equ	0xFF4
  6336                           prodl	equ	0xFF3
  6337                           intcon	equ	0xFF2
  6338                           intcon2	equ	0xFF1
  6339                           intcon3	equ	0xFF0
  6340                           postinc0	equ	0xFEE
  6341                           fsr0h	equ	0xFEA
  6342                           fsr0l	equ	0xFE9
  6343                           wreg	equ	0xFE8
  6344                           plusw1	equ	0xFE3
  6345                           fsr1h	equ	0xFE2
  6346                           fsr1l	equ	0xFE1
  6347                           indf2	equ	0xFDF
  6348                           postinc2	equ	0xFDE
  6349                           postdec2	equ	0xFDD
  6350                           plusw2	equ	0xFDB
  6351                           fsr2h	equ	0xFDA
  6352                           fsr2l	equ	0xFD9
  6353                           status	equ	0xFD8
  6354                           
  6355                           	psect	temp
  6356  000057                     btemp:
  6357                           	opt stack 0
  6358  000057                     	ds	1
  6359  0000                     int$flags	set	btemp
  6360                           pclatu	equ	0xFFB
  6361                           pclath	equ	0xFFA
  6362                           tblptru	equ	0xFF8
  6363                           tblptrh	equ	0xFF7
  6364                           tblptrl	equ	0xFF6
  6365                           tablat	equ	0xFF5
  6366                           prodh	equ	0xFF4
  6367                           prodl	equ	0xFF3
  6368                           intcon	equ	0xFF2
  6369                           intcon2	equ	0xFF1
  6370                           intcon3	equ	0xFF0
  6371                           postinc0	equ	0xFEE
  6372                           fsr0h	equ	0xFEA
  6373                           fsr0l	equ	0xFE9
  6374                           wreg	equ	0xFE8
  6375                           plusw1	equ	0xFE3
  6376                           fsr1h	equ	0xFE2
  6377                           fsr1l	equ	0xFE1
  6378                           indf2	equ	0xFDF
  6379                           postinc2	equ	0xFDE
  6380                           postdec2	equ	0xFDD
  6381                           plusw2	equ	0xFDB
  6382                           fsr2h	equ	0xFDA
  6383                           fsr2l	equ	0xFD9
  6384                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        3
    BSS         162
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      86
    BANK0           160     70     149
    BANK1           256      0      48
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 48
		 -> avail_sensors(BANK1[48]), 

    memset@p	PTR unsigned char  size(2) Largest target is 48
		 -> avail_sensors(BANK1[48]), 

    CDC_RESULT	PTR unsigned int [12] size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sp__memset	PTR void  size(2) Largest target is 48
		 -> avail_sensors(BANK1[48]), 

    read_cdc2@sensor_values	PTR unsigned int  size(2) Largest target is 48
		 -> sensor_values(BANK0[48]), 

    read_cdc1@sensor_values	PTR unsigned int  size(2) Largest target is 48
		 -> sensor_values(BANK0[48]), 

    read_sensor@sensor_values	PTR unsigned int  size(2) Largest target is 48
		 -> sensor_values(BANK0[48]), 

    read_AD7147@DataBuffer	PTR unsigned int  size(2) Largest target is 6
		 -> interrupt_values_cdc2(COMRAM[6]), interrupt_values_cdc1(COMRAM[6]), 

    write_AD7147@OutputBuffer	PTR unsigned int  size(2) Largest target is 16
		 -> setup_AD7147@StageBuffer(BANK0[16]), 

    setup_AD7147@DataBuffer	PTR unsigned int  size(2) Largest target is 6
		 -> interrupt_values_cdc1(COMRAM[6]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->i2_read_AD7147
    i2_read_AD7147->i2_w16_r16_spi
    _read_cdc2->i2_w16_r16_spi
    _read_cdc1->i2_w16_r16_spi

Critical Paths under _main in BANK0

    _main->_setup_AD7147
    _switch_LED->_w32_spi
    _setup_AD7147->_write_AD7147
    _write_AD7147->_w32_spi
    _read_AD7147->_w16_r16_spi
    _read_sensor->_w16_r16_spi
    _sensor_CDC->_get_CDC
    _get_ID->_w16_r16_spi
    _blink_LED->_w32_spi
    _delay_ms->___awdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0   41394
                                             60 BANK0     10    10      0
                          _blink_LED
                           _delay_ms
                             _get_ID
                    _init_interrupts
                             _memset
                        _read_AD7147
                        _read_sensor
                       _setup_AD7147
                          _setup_mcu
                          _setup_spi
                         _switch_LED
                     _uart_read_char
                _uart_read_indicator
             _uart_read_unsigned_int
                    _uart_write_char
            _uart_write_unsigned_int
 ---------------------------------------------------------------------------------
 (1) _uart_write_unsigned_int                              4     2      2     470
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _uart_write_char                                      1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _uart_read_unsigned_int                               8     6      2      69
                                              0 BANK0      8     6      2
                     _uart_read_char
 ---------------------------------------------------------------------------------
 (2) _uart_read_char                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _uart_read_indicator                                  2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _switch_LED                                           8     4      4    4657
                                             22 BANK0      8     4      4
                           _delay_ms
                            _get_CDC
                            _w32_spi
 ---------------------------------------------------------------------------------
 (1) _setup_spi                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_mcu                                            0     0      0       0
                          _init_uart
                         _setup_port
 ---------------------------------------------------------------------------------
 (2) _setup_port                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_uart                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_AD7147                                        20    16      4   17706
                                             40 BANK0     20    16      4
                        _read_AD7147
                       _write_AD7147
 ---------------------------------------------------------------------------------
 (2) _write_AD7147                                        18     8     10    9843
                                             22 BANK0     18     8     10
                            _get_CDC
                            _w32_spi
 ---------------------------------------------------------------------------------
 (2) _read_AD7147                                         12     4      8    4696
                                             22 BANK0     12     4      8
                            _get_CDC
                        _w16_r16_spi
 ---------------------------------------------------------------------------------
 (1) _read_sensor                                         12     8      4    4363
                                             22 BANK0     12     8      4
                         _sensor_CDC
                        _w16_r16_spi
 ---------------------------------------------------------------------------------
 (2) _sensor_CDC                                           4     0      4    3246
                                              4 BANK0      4     0      4
                            _get_CDC
 ---------------------------------------------------------------------------------
 (1) _memset                                               8     2      6     324
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (1) _init_interrupts                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_ID                                               5     3      2    3326
                                             22 BANK0      5     3      2
                            _get_CDC
                        _w16_r16_spi
 ---------------------------------------------------------------------------------
 (3) _w16_r16_spi                                         22    20      2     611
                                              0 BANK0     22    20      2
 ---------------------------------------------------------------------------------
 (1) _blink_LED                                            4     2      2    4679
                                             22 BANK0      4     2      2
                           _delay_ms
                            _get_CDC
                            _w32_spi
 ---------------------------------------------------------------------------------
 (2) _w32_spi                                             22    18      4     944
                                              0 BANK0     22    18      4
 ---------------------------------------------------------------------------------
 (2) _get_CDC                                              4     0      4    2572
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             5     3      2     877
                                              8 BANK0      5     3      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     452
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                 14    14      0    2938
                                             34 COMRAM    14    14      0
                          _read_cdc1
                          _read_cdc2
                      i2_read_AD7147
 ---------------------------------------------------------------------------------
 (5) i2_read_AD7147                                       12     4      8    1050
                                             22 COMRAM    12     4      8
                          i2_get_CDC
                      i2_w16_r16_spi
 ---------------------------------------------------------------------------------
 (5) _read_cdc2                                            4     2      2     944
                                             22 COMRAM     4     2      2
                            _r16_spi
                          i2_get_CDC
                      i2_w16_r16_spi
 ---------------------------------------------------------------------------------
 (5) _read_cdc1                                            4     2      2     944
                                             22 COMRAM     4     2      2
                            _r16_spi
                          i2_get_CDC
                      i2_w16_r16_spi
 ---------------------------------------------------------------------------------
 (6) i2_w16_r16_spi                                       22    20      2     285
                                              0 COMRAM    22    20      2
 ---------------------------------------------------------------------------------
 (6) i2_get_CDC                                            4     0      4     356
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (6) _r16_spi                                             14    12      2     115
                                              0 COMRAM    14    12      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _blink_LED
     _delay_ms
       ___awdiv
     _get_CDC
     _w32_spi
   _delay_ms
     ___awdiv
   _get_ID
     _get_CDC
     _w16_r16_spi
   _init_interrupts
   _memset
   _read_AD7147
     _get_CDC
     _w16_r16_spi
   _read_sensor
     _sensor_CDC
       _get_CDC
     _w16_r16_spi
   _setup_AD7147
     _read_AD7147
       _get_CDC
       _w16_r16_spi
     _write_AD7147
       _get_CDC
       _w32_spi
   _setup_mcu
     _init_uart
     _setup_port
   _setup_spi
   _switch_LED
     _delay_ms
       ___awdiv
     _get_CDC
     _w32_spi
   _uart_read_char
   _uart_read_indicator
   _uart_read_unsigned_int
     _uart_read_char
   _uart_write_char
   _uart_write_unsigned_int

 _ISR (ROOT)
   _read_cdc1
     _r16_spi
     i2_get_CDC
     i2_w16_r16_spi
   _read_cdc2
     _r16_spi
     i2_get_CDC
     i2_w16_r16_spi
   i2_read_AD7147
     i2_get_CDC
     i2_w16_r16_spi

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      30       8       18.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     46      95       5       93.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      56       1       91.5%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     11B       6        0.0%
DATA                 0      0     11B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Mon Sep 04 21:43:49 2017

                      _SSPSTATbits 000FC7                                 l38 0CF4  
                               l79 15EC                       ___awdiv@sign 00B1  
                     __CFG_CP0$OFF 000000                                l300 0FFE  
                              l303 100E                                l306 101E  
                              l309 102E                                l270 114C  
                              l334 1698                                l273 115C  
                              l346 1644                                l267 113C  
                              l276 116C                                l349 164C  
                              l393 13EA                                l385 1678  
                              l386 166E                   i2read_AD7147@cdc 001D  
                ??_init_interrupts 00AC                                _ISR 0008  
                              u870 1526                                u991 00FC  
                              _cdc 0074                                wreg 000FE8  
                       _TXSTA1bits 000FAC                  write_AD7147@index 00C8  
                             ?_ISR 0001                               l2219 0CFC  
                             l2331 1408                               l2501 0B8E  
                             l2421 090E                               l2343 1430  
                             l2335 141C                               l2511 0BAC  
                             l2353 15B0                               l2281 10CA  
                             l2329 13F4                               l2513 0BB0  
                             l2433 0970                               l2515 0BB4  
                             l2507 0B96                               l2523 0BD4  
                             l2419 0904                               l2349 159E  
                             l2277 10AA                               l2509 0BA8  
                             l2453 0A32                               l2437 099E  
                             l2429 0956                               l2445 09CC  
                             l1807 15DA                               l2519 0BBC  
                             l2447 09EA                               l1833 0E76  
                             l1921 14B6                               l1905 153E  
                             l2465 0A92                               l2457 0A42  
                             l2491 0B22                               l2475 0ABC  
                             l2483 0AD4                               l1845 0EAA  
                             l1861 0EFA                               l2485 0AE6  
                             l2469 0A9A                               l1847 0EB6  
                             l1839 0E8C                               l1919 14A4  
                             l1865 0F0E                               l1857 0EEC  
                             l1849 0EBC                               l2497 0B78  
                             l1883 0C98                               l1893 0F4E  
                             l1877 0C32                               l1897 0F96  
                             u1000 0CDE                               u1130 142C  
                             u1055 139C                               u1307 14AC  
                             i2l79 1632                      r16_spi@result 000D  
                 ??_uart_read_char 00AC             _uart_read_unsigned_int 1556  
                             _main 0894                               fsr0h 000FEA  
                             fsr1h 000FE2                               fsr2h 000FDA  
                             fsr0l 000FE9                               indf2 000FDF  
                             fsr1l 000FE1                               fsr2l 000FD9  
                             btemp 0057   __size_of_uart_write_unsigned_int 001E  
                     ?_read_AD7147 00C2                    ??i2_w16_r16_spi 0003  
    uart_read_unsigned_int@message 00B0                               prodh 000FF4  
                             prodl 000FF3                               start 00EE  
                    ??_w16_r16_spi 00AE                      __CFG_IESO$OFF 000000  
                    __CFG_FOSC$HS1 000000                       ___param_bank 000000  
           read_cdc2@sensor_values 0017                    __end_of_r16_spi 1516  
                            ??_ISR 0023                    __end_of_w32_spi 117A  
         __size_of_uart_write_char 000E                              ?_main 0001  
                  __end_of___awdiv 0F18                    ___awdiv@divisor 00AE  
                            _RC1IF 007CF5              w16_r16_spi@blank_high 00BC  
     read_AD7147@NumberOfRegisters 00C6                              i2l300 12A8  
                            i2l303 12B6                              i2l306 12C4  
                            i2l156 00B2                              i2l309 12D2  
                            i2l291 14E2                              i2l294 14F0  
                  ___awdiv@counter 00B0                              _TRISC 000F94  
                  __end_of_get_CDC 15F2                     __CFG_FCMEN$OFF 000000  
            __size_of_write_AD7147 00D2                       ?_read_sensor 00C2  
                            _state 00F4                              main@i 00F0  
                            main@k 00EE                              pclath 000FFA  
                            tablat 000FF5                              plusw1 000FE3  
                            plusw2 000FDB                              status 000FD8  
           w16_r16_spi@address_low 00B4                     __CFG_MCLRE$OFF 000000  
                  __initialization 1434                 __size_ofi2_get_CDC 0022  
                     __end_of_main 0BF2             i2w16_r16_spi@blank_low 000F  
              __end_of_w16_r16_spi 1066                    switch_LED@state 00C4  
                     _write_AD7147 0BF2                             ??_main 00E8  
                    __activetblptr 000002                   ___awdiv@dividend 00AC  
         uart_read_indicator@count 00AC                        w32_spi@data 00AE  
                           i2l2233 1234                             i2l2243 1264  
                           i2l2251 11B6                             i2l2261 11E6  
                           i2l2361 1322                             i2l2365 1350  
                   __CFG_WDTEN$OFF 000000                             i2l2395 007A  
                           i2l1951 1624                             _RCREG1 000FAE  
                           _SPBRG1 000FAF                     read_AD7147@cdc 00C8  
                           _SSPBUF 000FC9              switch_LED@message_160 00C8  
                           _TXREG1 000FAD                          ??_r16_spi 0003  
                           _TXSTA1 000FAC                   __end_of_delay_ms 14CE  
                        ??_w32_spi 00B0   write_AD7147@RegisterStartAddress 00C2  
                   __CFG_XINST$OFF 000000                          ??___awdiv 00B0  
                   __CFG_STVREN$ON 000000                             _get_ID 1372  
                           _memset 1594                             clear_0 1458  
                           clear_1 1464                             clear_2 1470  
                           _on_off 0072                   ___awdiv@quotient 00B2  
                        ??_get_CDC 00B0         write_AD7147@Register_Value 00CE  
                           tblptrh 000FF7                             tblptrl 000FF6  
                           tblptru 000FF8                  ??_uart_write_char 00AC  
                __end_ofi2_get_CDC 1638                       i2get_CDC@cdc 0001  
          w16_r16_spi@address_high 00B6            _uart_write_unsigned_int 1638  
                       __accesstop 0060            __end_of__initialization 1476  
                    ___rparam_used 000001                        _w16_r16_spi 0FC2  
             __size_of_read_AD7147 00AA                    _init_interrupts 15F2  
                   __pcstackCOMRAM 0001                       __pidataBANK0 16B8  
             i2w16_r16_spi@address 0001            i2w16_r16_spi@blank_high 0011  
               __size_of_blink_LED 00C4              _interrupt_values_cdc1 0051  
            _interrupt_values_cdc2 004B                   r16_spi@blank_low 0005  
                     read_AD7147@i 00CC             __size_ofi2_read_AD7147 007A  
          ?_uart_read_unsigned_int 00AC                         __pbssBANK0 0060  
                       __pbssBANK1 0100               __size_of_read_sensor 00D2  
               __size_of_read_cdc1 007E                 __size_of_read_cdc2 0082  
               __size_of_init_uart 0014       __size_of_uart_read_indicator 0056  
                          ?_get_ID 00C2                         _break_loop 007A  
                          ?_memset 00AC                   __CFG_CANMX$PORTB 000000  
               __size_of_setup_mcu 000A  i2read_AD7147@RegisterStartAddress 0019  
  read_AD7147@RegisterStartAddress 00C4                 __size_of_setup_spi 0016  
                        ?_delay_ms 00B4     __end_of_uart_read_unsigned_int 1594  
                    w16_r16_spi@p1 00B0                      w16_r16_spi@p2 00B2  
                    w16_r16_spi@p3 00BE                      w16_r16_spi@p4 00C0  
        ??_uart_write_unsigned_int 00AE            __end_of_init_interrupts 1616  
                __end_of_blink_LED 0E5A              read_AD7147@DataBuffer 00C2  
                          _r16_spi 14CE                            _w32_spi 10F0  
                    i2_read_AD7147 12F8                            __Hparam 0000  
            __end_ofi2_w16_r16_spi 12F8                            __Lparam 0000  
                          ___awdiv 0E5A                    __size_of_get_ID 006C  
         write_AD7147@OutputBuffer 00C6                    sensor_CDC@state 00B2  
                          __pcinit 1434                            _get_CDC 15C8  
                  __size_of_memset 0034                            __ramtop 0F00  
                          __ptext0 0894                            __ptext1 1638  
                          __ptext2 1694                            __ptext3 1556  
                          __ptext4 166C                            __ptext5 13DE  
                          __ptext6 1066                            __ptext7 1656  
                          __ptext8 16AE                            __ptext9 16A2  
                     __size_of_ISR 00E6                     w32_spi@address 00AC  
                __end_of_read_cdc1 127A                  __end_of_read_cdc2 11FC  
                __end_of_init_uart 1694                         ??_delay_ms 00B6  
                       get_CDC@cdc 00AC               end_of_initialization 1476  
                    ?_setup_AD7147 00D4                            memset@c 00AE  
                          memset@n 00B0                            memset@p 00B2  
                    __Lmediumconst 0000                     ?i2_read_AD7147 0017  
                __end_of_setup_mcu 16B8                  __end_of_setup_spi 166C  
                          postdec2 000FDD    __end_of_uart_write_unsigned_int 1656  
                          postinc0 000FEE                            postinc2 000FDE  
                       _sensor_CDC 1516            __size_of_uart_read_char 0014  
                  _uart_write_char 1694                         _setup_port 16A2  
                        _TRISBbits 000F93                          r16_spi@p1 0009  
                        r16_spi@p2 000B                     i2read_AD7147@i 0021  
                  write_AD7147@cdc 00CA           i2w16_r16_spi@address_low 0009  
                   ??_setup_AD7147 00D8                         _start_stop 00F2  
                        i2_get_CDC 1616                   ?_init_interrupts 0001  
            read_sensor@cdc_sensor 00CC                       ?_w16_r16_spi 00AC  
                       _switch_LED 1066                          w32_spi@p1 00B2  
                        w32_spi@p2 00B4                          w32_spi@p3 00B6  
                        w32_spi@p4 00B8               w16_r16_spi@blank_low 00BA  
                   __end_of_get_ID 13DE                     __end_of_memset 15C8  
              w32_spi@address_high 00BC                start_initialization 1434  
              _uart_read_indicator 13DE                        __end_of_ISR 00EE  
                switch_LED@message 00C6                uart_write_char@data 00AC  
                    _second_sensor 0049            i2read_AD7147@DataBuffer 0017  
                       ?i2_get_CDC 0001                    ??i2_read_AD7147 001F  
                r16_spi@blank_high 0007                      ??_read_AD7147 00CA  
          __end_of_uart_write_char 16A2               ?_uart_read_indicator 0001  
          setup_AD7147@StageBuffer 00D8                        ?_sensor_CDC 00B0  
                       read_cdc1@i 0019                         read_cdc2@i 0019  
                         ??_get_ID 00C4          i2w16_r16_spi@address_high 000B  
                      __pdataBANK0 00F2                           ??_memset 00B2  
         read_sensor@sensor_values 00C2             setup_AD7147@DataBuffer 00D4  
                      ?_setup_port 0001                        __pbssCOMRAM 0031  
                    __pcstackBANK0 00AC                      ??_read_sensor 00C6  
                __size_of_delay_ms 004A             write_AD7147@Data_Value 00D0  
              i2w16_r16_spi@result 000D                           ?_r16_spi 0001  
            ??_uart_read_indicator 00AC                           ?_w32_spi 00AC  
                      ?_switch_LED 00C2                          _blink_LED 0D96  
                        __pintcode 0008                          _device_ID 0076  
                   _uart_read_char 166C                __end_of_read_AD7147 0FC2  
                         ?___awdiv 00AC       i2read_AD7147@Register_Values 001F  
             __end_of_setup_AD7147 0894                           ?_get_CDC 00AC  
                    ?_write_AD7147 00C2                           _BAUDCON1 000FA7  
     uart_write_unsigned_int@char1 00AE       uart_write_unsigned_int@char2 00AF  
                        _indicator 007B                   w32_spi@data_high 00C0  
                        _read_cdc1 11FC                          _read_cdc2 117A  
                        _init_uart 1680                __size_of_sensor_CDC 0040  
                      ??i2_get_CDC 0005                           _LATCbits 000F8B  
                        delay_ms@j 00B7                          delay_ms@n 00B4  
              __end_of_read_sensor 0D96      write_AD7147@NumberOfRegisters 00C4  
                        get_ID@cdc 00C2                           _PIE1bits 000F9D  
              __size_of_setup_port 000C                   ?_uart_write_char 0001  
           __end_of_uart_read_char 1680                           _PIR1bits 000F9E  
                       ?_blink_LED 00C2                           _RCONbits 000FD0  
             __size_of_w16_r16_spi 00A4                          _setup_mcu 16AE  
                        _setup_spi 1656                     ??_write_AD7147 00CC  
                  setup_AD7147@cdc 00D6         read_AD7147@Register_Values 00CA  
                     get_CDC@state 00AE                   __CFG_SOSCSEL$DIG 000000  
                        main@index 00EC           ?_uart_write_unsigned_int 00AC  
           __size_ofi2_w16_r16_spi 007E                __size_of_switch_LED 008A  
                       ?_read_cdc1 0017                         ?_read_cdc2 0017  
                       ?_init_uart 0001                        _INTCON2bits 000FF1  
                      _INTCON3bits 000FF0                 w32_spi@address_low 00BA  
                    switch_LED@cdc 00C2                         _CDC_RESULT 0031  
                  i2w16_r16_spi@p1 0005                    i2w16_r16_spi@p2 0007  
                  i2w16_r16_spi@p3 0013                    i2w16_r16_spi@p4 0015  
                      _read_AD7147 0F18                   __size_of_r16_spi 0048  
   i2read_AD7147@NumberOfRegisters 001B                         _ANCON1bits 000F5C  
                         __Hrparam 0000             read_cdc1@sensor_values 0017  
                  ?_uart_read_char 0001                       get_ID@result 00C5  
                 __size_of_w32_spi 008A                           __Lrparam 0000  
                     blink_LED@cdc 00C2                   __size_of___awdiv 00BE  
                       ?_setup_mcu 0001                         ?_setup_spi 0001  
         ??_uart_read_unsigned_int 00AE                   __size_of_get_CDC 002A  
      uart_read_unsigned_int@part1 00B2        uart_read_unsigned_int@part2 00B3  
                 sensor_CDC@sensor 00B0                      _single_sensor 0078  
                         _delay_ms 1484                      _sensor_values 007C  
             read_sensor@register1 00CA                           __ptext10 1680  
                         __ptext11 00F2                           __ptext20 0D96  
                         __ptext12 0BF2                           __ptext21 10F0  
                         __ptext13 0F18                           __ptext30 1616  
                         __ptext22 15C8                           __ptext14 0CC4  
                         __ptext31 14CE                           __ptext23 1484  
                         __ptext15 1516                           __ptext24 0E5A  
                         __ptext16 1594                           __ptext17 15F2  
                         __ptext26 12F8                           __ptext18 1372  
                         __ptext27 117A                           __ptext19 0FC2  
                         __ptext28 11FC                           __ptext29 127A  
                      _read_sensor 0CC4                      _avail_sensors 0100  
                    __size_of_main 035E                    w32_spi@data_low 00BE  
                read_sensor@sensor 00C4                        ??_blink_LED 00C4  
                    i2_w16_r16_spi 127A              __size_of_setup_AD7147 07A2  
         __size_of_init_interrupts 0024                       ??_sensor_CDC 00B4  
                         int$flags 0057                      write_AD7147@i 00D2  
               w16_r16_spi@address 00AC                       ??_setup_port 00AC  
                       _INTCONbits 000FF2                           memset@p1 00AC  
                      ??_read_cdc1 0019                        ??_read_cdc2 0019  
                      ??_init_uart 00AC                           intlevel2 0000  
               __end_of_sensor_CDC 1556               __end_of_write_AD7147 0CC4  
                     _setup_AD7147 00F2              __end_ofi2_read_AD7147 1372  
                       _RCSTA1bits 000FAB                     ?i2_w16_r16_spi 0001  
                     ??_switch_LED 00C6                 __end_of_setup_port 16AE  
                      ??_setup_mcu 00AC                        ??_setup_spi 00AC  
               setup_AD7147@F14884 0060                  w16_r16_spi@result 00B8  
  __size_of_uart_read_unsigned_int 003E                     i2get_CDC@state 0003  
                      _num_sensors 0070                        _SSPCON1bits 000FC6  
               __end_of_switch_LED 10F0        __end_of_uart_read_indicator 1434  
                 blink_LED@message 00C4      uart_write_unsigned_int@number 00AC  
