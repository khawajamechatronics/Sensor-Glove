

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Mon Jul 31 16:43:17 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F25K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	text13,global,reloc=2,class=CODE,delta=1
    22                           	psect	text14,global,reloc=2,class=CODE,delta=1
    23                           	psect	text15,global,reloc=2,class=CODE,delta=1
    24                           	psect	text16,global,reloc=2,class=CODE,delta=1
    25                           	psect	text17,global,reloc=2,class=CODE,delta=1
    26                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    29  0000                     
    30                           ; Version 1.42
    31                           ; Generated 13/04/2017 GMT
    32                           ; 
    33                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC18F25K80 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     _RCREG1	set	4014
    65  0000                     _PIR1bits	set	3998
    66  0000                     _TXREG1	set	4013
    67  0000                     _TXSTA1bits	set	4012
    68  0000                     _PIE1bits	set	3997
    69  0000                     _SSPCON1bits	set	4038
    70  0000                     _RCSTA1bits	set	4011
    71  0000                     _BAUDCON1	set	4007
    72  0000                     _SPBRG1	set	4015
    73  0000                     _TXSTA1	set	4012
    74  0000                     _TRISC	set	3988
    75  0000                     _TRISB	set	3987
    76  0000                     _SSPSTATbits	set	4039
    77  0000                     _SSPBUF	set	4041
    78  0000                     _LATCbits	set	3979
    79  0000                     _RC1IF	set	31989
    80                           
    81                           ; #config settings
    82  0000                     
    83                           	psect	cinit
    84  007504                     __pcinit:
    85                           	opt stack 0
    86  007504                     start_initialization:
    87                           	opt stack 0
    88  007504                     __initialization:
    89                           	opt stack 0
    90                           
    91                           ; Clear objects allocated to BANK0 (24 bytes)
    92  007504  EE00  F060         	lfsr	0,__pbssBANK0
    93  007508  0E18               	movlw	24
    94  00750A                     clear_0:
    95  00750A  6AEE               	clrf	postinc0,c
    96  00750C  06E8               	decf	wreg,f,c
    97  00750E  E1FD               	bnz	clear_0
    98  007510                     end_of_initialization:
    99                           	opt stack 0
   100  007510                     __end_of__initialization:
   101                           	opt stack 0
   102  007510  0100               	movlb	0
   103  007512  EFC7  F03C         	goto	_main	;jump to C main() function
   104                           postinc0	equ	0xFEE
   105                           wreg	equ	0xFE8
   106                           
   107                           	psect	bssBANK0
   108  000060                     __pbssBANK0:
   109                           	opt stack 0
   110  000060                     _CDC_RESULT:
   111                           	opt stack 0
   112  000060                     	ds	24
   113                           postinc0	equ	0xFEE
   114                           wreg	equ	0xFE8
   115                           
   116                           	psect	cstackCOMRAM
   117  000001                     __pcstackCOMRAM:
   118                           	opt stack 0
   119  000001                     ?_w16_r16_spi:
   120                           	opt stack 0
   121  000001                     ?___awdiv:
   122                           	opt stack 0
   123  000001                     uart_write_char@data:
   124                           	opt stack 0
   125  000001                     get_CDC@cdc:
   126                           	opt stack 0
   127  000001                     w32_spi@address:
   128                           	opt stack 0
   129  000001                     w16_r16_spi@address:
   130                           	opt stack 0
   131  000001                     uart_write_unsigned_int@number:
   132                           	opt stack 0
   133  000001                     ___awdiv@dividend:
   134                           	opt stack 0
   135                           
   136                           ; 2 bytes @ 0x0
   137  000001                     	ds	2
   138  000003                     ??_w16_r16_spi:
   139  000003                     uart_write_unsigned_int@char1:
   140                           	opt stack 0
   141  000003                     get_CDC@state:
   142                           	opt stack 0
   143  000003                     w32_spi@data:
   144                           	opt stack 0
   145  000003                     ___awdiv@divisor:
   146                           	opt stack 0
   147                           
   148                           ; 2 bytes @ 0x2
   149  000003                     	ds	1
   150  000004                     uart_write_unsigned_int@char2:
   151                           	opt stack 0
   152                           
   153                           ; 1 bytes @ 0x3
   154  000004                     	ds	1
   155  000005                     ??_w32_spi:
   156  000005                     ___awdiv@counter:
   157                           	opt stack 0
   158  000005                     sensor_CDC@sensor:
   159                           	opt stack 0
   160  000005                     w16_r16_spi@p1:
   161                           	opt stack 0
   162                           
   163                           ; 2 bytes @ 0x4
   164  000005                     	ds	1
   165  000006                     ___awdiv@sign:
   166                           	opt stack 0
   167                           
   168                           ; 1 bytes @ 0x5
   169  000006                     	ds	1
   170  000007                     sensor_CDC@state:
   171                           	opt stack 0
   172  000007                     w32_spi@p1:
   173                           	opt stack 0
   174  000007                     w16_r16_spi@p2:
   175                           	opt stack 0
   176  000007                     ___awdiv@quotient:
   177                           	opt stack 0
   178                           
   179                           ; 2 bytes @ 0x6
   180  000007                     	ds	2
   181  000009                     delay_ms@n:
   182                           	opt stack 0
   183  000009                     w32_spi@p2:
   184                           	opt stack 0
   185  000009                     w16_r16_spi@address_low:
   186                           	opt stack 0
   187                           
   188                           ; 2 bytes @ 0x8
   189  000009                     	ds	2
   190  00000B                     ??_delay_ms:
   191  00000B                     w32_spi@p3:
   192                           	opt stack 0
   193  00000B                     w16_r16_spi@address_high:
   194                           	opt stack 0
   195                           
   196                           ; 2 bytes @ 0xA
   197  00000B                     	ds	1
   198  00000C                     delay_ms@j:
   199                           	opt stack 0
   200                           
   201                           ; 2 bytes @ 0xB
   202  00000C                     	ds	1
   203  00000D                     w32_spi@p4:
   204                           	opt stack 0
   205  00000D                     w16_r16_spi@result:
   206                           	opt stack 0
   207                           
   208                           ; 2 bytes @ 0xC
   209  00000D                     	ds	2
   210  00000F                     w32_spi@address_low:
   211                           	opt stack 0
   212  00000F                     w16_r16_spi@blank_low:
   213                           	opt stack 0
   214                           
   215                           ; 2 bytes @ 0xE
   216  00000F                     	ds	2
   217  000011                     w32_spi@address_high:
   218                           	opt stack 0
   219  000011                     w16_r16_spi@blank_high:
   220                           	opt stack 0
   221                           
   222                           ; 2 bytes @ 0x10
   223  000011                     	ds	2
   224  000013                     w32_spi@data_low:
   225                           	opt stack 0
   226  000013                     w16_r16_spi@p3:
   227                           	opt stack 0
   228                           
   229                           ; 2 bytes @ 0x12
   230  000013                     	ds	2
   231  000015                     w32_spi@data_high:
   232                           	opt stack 0
   233  000015                     w16_r16_spi@p4:
   234                           	opt stack 0
   235                           
   236                           ; 2 bytes @ 0x14
   237  000015                     	ds	2
   238  000017                     ?_read_AD7147_interrupt:
   239                           	opt stack 0
   240  000017                     ?_read_sensor:
   241                           	opt stack 0
   242  000017                     ?_get_ID:
   243                           	opt stack 0
   244  000017                     write_AD7147@RegisterAddress:
   245                           	opt stack 0
   246  000017                     read_AD7147_interrupt@RegisterAddress:
   247                           	opt stack 0
   248  000017                     read_sensor@sensor:
   249                           	opt stack 0
   250  000017                     get_ID@cdc:
   251                           	opt stack 0
   252  000017                     blink_LED@cdc:
   253                           	opt stack 0
   254                           
   255                           ; 2 bytes @ 0x16
   256  000017                     	ds	2
   257  000019                     ??_get_ID:
   258  000019                     write_AD7147@NumberOfRegisters:
   259                           	opt stack 0
   260  000019                     read_AD7147_interrupt@Register_Values:
   261                           	opt stack 0
   262  000019                     read_sensor@register1:
   263                           	opt stack 0
   264  000019                     blink_LED@message:
   265                           	opt stack 0
   266                           
   267                           ; 2 bytes @ 0x18
   268  000019                     	ds	1
   269  00001A                     get_ID@result:
   270                           	opt stack 0
   271                           
   272                           ; 2 bytes @ 0x19
   273  00001A                     	ds	1
   274  00001B                     write_AD7147@DataBuffer:
   275                           	opt stack 0
   276  00001B                     read_AD7147_interrupt@interrupt_clear:
   277                           	opt stack 0
   278  00001B                     read_sensor@sensor_value:
   279                           	opt stack 0
   280                           
   281                           ; 2 bytes @ 0x1A
   282  00001B                     	ds	2
   283  00001D                     write_AD7147@index:
   284                           	opt stack 0
   285  00001D                     read_sensor@cdc_sensor:
   286                           	opt stack 0
   287                           
   288                           ; 2 bytes @ 0x1C
   289  00001D                     	ds	2
   290  00001F                     ??_write_AD7147:
   291                           
   292                           ; 1 bytes @ 0x1E
   293  00001F                     	ds	2
   294  000021                     write_AD7147@Register_Value:
   295                           	opt stack 0
   296                           
   297                           ; 2 bytes @ 0x20
   298  000021                     	ds	2
   299  000023                     write_AD7147@Data_Value:
   300                           	opt stack 0
   301                           
   302                           ; 2 bytes @ 0x22
   303  000023                     	ds	2
   304  000025                     write_AD7147@i:
   305                           	opt stack 0
   306                           
   307                           ; 2 bytes @ 0x24
   308  000025                     	ds	2
   309  000027                     setup_AD7147@cdc:
   310                           	opt stack 0
   311                           
   312                           ; 2 bytes @ 0x26
   313  000027                     	ds	2
   314  000029                     setup_AD7147@int_low:
   315                           	opt stack 0
   316                           
   317                           ; 2 bytes @ 0x28
   318  000029                     	ds	2
   319  00002B                     setup_AD7147@int_high:
   320                           	opt stack 0
   321                           
   322                           ; 2 bytes @ 0x2A
   323  00002B                     	ds	2
   324  00002D                     setup_AD7147@int_complete:
   325                           	opt stack 0
   326                           
   327                           ; 2 bytes @ 0x2C
   328  00002D                     	ds	2
   329  00002F                     setup_AD7147@AD7147Registers:
   330                           	opt stack 0
   331                           
   332                           ; 16 bytes @ 0x2E
   333  00002F                     	ds	16
   334  00003F                     setup_AD7147@StageBuffer:
   335                           	opt stack 0
   336                           
   337                           ; 16 bytes @ 0x3E
   338  00003F                     	ds	16
   339  00004F                     main@bb:
   340                           	opt stack 0
   341                           
   342                           ; 2 bytes @ 0x4E
   343  00004F                     	ds	2
   344  000051                     main@device_ID:
   345                           	opt stack 0
   346                           
   347                           ; 2 bytes @ 0x50
   348  000051                     	ds	2
   349  000053                     main@sensor_1:
   350                           	opt stack 0
   351                           
   352                           ; 2 bytes @ 0x52
   353  000053                     	ds	2
   354  000055                     main@sensor_2:
   355                           	opt stack 0
   356                           
   357                           ; 2 bytes @ 0x54
   358  000055                     	ds	2
   359  000057                     main@indicator:
   360                           	opt stack 0
   361                           
   362                           ; 1 bytes @ 0x56
   363  000057                     	ds	1
   364                           postinc0	equ	0xFEE
   365                           wreg	equ	0xFE8
   366                           
   367 ;;
   368 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   369 ;;
   370 ;; *************** function _main *****************
   371 ;; Defined at:
   372 ;;		line 6 in file "main.c"
   373 ;; Parameters:    Size  Location     Type
   374 ;;		None
   375 ;; Auto vars:     Size  Location     Type
   376 ;;  sensor_2        2   84[COMRAM] unsigned int 
   377 ;;  sensor_1        2   82[COMRAM] unsigned int 
   378 ;;  device_ID       2   80[COMRAM] unsigned int 
   379 ;;  bb              2   78[COMRAM] unsigned int 
   380 ;;  indicator       1   86[COMRAM] unsigned char 
   381 ;;  sensor          0    0        unsigned int [0]
   382 ;; Return value:  Size  Location     Type
   383 ;;                  1    wreg      void 
   384 ;; Registers used:
   385 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   386 ;; Tracked objects:
   387 ;;		On entry : 0/0
   388 ;;		On exit  : 0/0
   389 ;;		Unchanged: 0/0
   390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   392 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   394 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   395 ;;Total ram usage:        9 bytes
   396 ;; Hardware stack levels required when called:    3
   397 ;; This function calls:
   398 ;;		_blink_LED
   399 ;;		_delay_ms
   400 ;;		_get_ID
   401 ;;		_read_sensor
   402 ;;		_setup_AD7147
   403 ;;		_setup_mcu
   404 ;;		_setup_spi
   405 ;;		_uart_write_char
   406 ;;		_uart_write_unsigned_int
   407 ;; This function is called by:
   408 ;;		Startup code after reset
   409 ;; This function uses a non-reentrant model
   410 ;;
   411                           
   412                           	psect	text0
   413  00798E                     __ptext0:
   414                           	opt stack 0
   415  00798E                     _main:
   416                           	opt stack 28
   417                           
   418                           ;main.c: 8: delay_ms(500);
   419                           
   420                           ;incstack = 0
   421  00798E  0E01               	movlw	1
   422  007990  6E0A               	movwf	delay_ms@n+1,c
   423  007992  0EF4               	movlw	244
   424  007994  6E09               	movwf	delay_ms@n,c
   425  007996  ECEF  F03A         	call	_delay_ms	;wreg free
   426                           
   427                           ;main.c: 9: setup_mcu();
   428  00799A  EC6F  F03A         	call	_setup_mcu	;wreg free
   429                           
   430                           ;main.c: 10: setup_spi();
   431  00799E  EC95  F03A         	call	_setup_spi	;wreg free
   432                           
   433                           ;main.c: 11: setup_AD7147(1);
   434  0079A2  0E00               	movlw	0
   435  0079A4  6E28               	movwf	setup_AD7147@cdc+1,c
   436  0079A6  0E01               	movlw	1
   437  0079A8  6E27               	movwf	setup_AD7147@cdc,c
   438  0079AA  EC41  F03D         	call	_setup_AD7147	;wreg free
   439                           
   440                           ;main.c: 12: setup_AD7147(2);
   441  0079AE  0E00               	movlw	0
   442  0079B0  6E28               	movwf	setup_AD7147@cdc+1,c
   443  0079B2  0E02               	movlw	2
   444  0079B4  6E27               	movwf	setup_AD7147@cdc,c
   445  0079B6  EC41  F03D         	call	_setup_AD7147	;wreg free
   446                           
   447                           ;main.c: 14: blink_LED(2);
   448  0079BA  0E00               	movlw	0
   449  0079BC  6E18               	movwf	blink_LED@cdc+1,c
   450  0079BE  0E02               	movlw	2
   451  0079C0  6E17               	movwf	blink_LED@cdc,c
   452  0079C2  EC70  F03C         	call	_blink_LED	;wreg free
   453                           
   454                           ;main.c: 15: blink_LED(1);
   455  0079C6  0E00               	movlw	0
   456  0079C8  6E18               	movwf	blink_LED@cdc+1,c
   457  0079CA  0E01               	movlw	1
   458  0079CC  6E17               	movwf	blink_LED@cdc,c
   459  0079CE  EC70  F03C         	call	_blink_LED	;wreg free
   460                           
   461                           ;main.c: 16: char indicator = 's';
   462  0079D2  0E73               	movlw	115
   463  0079D4  6E57               	movwf	main@indicator,c
   464                           
   465                           ;main.c: 17: unsigned int bb = 1020;
   466  0079D6  0E03               	movlw	3
   467  0079D8  6E50               	movwf	main@bb+1,c
   468  0079DA  0EFC               	movlw	252
   469  0079DC  6E4F               	movwf	main@bb,c
   470  0079DE                     l1929:
   471                           
   472                           ;main.c: 20: {
   473                           ;main.c: 21: if (indicator == 'i')
   474  0079DE  0E69               	movlw	105
   475  0079E0  1857               	xorwf	main@indicator,w,c
   476  0079E2  A4D8               	btfss	status,2,c
   477  0079E4  D013               	goto	l1937
   478                           
   479                           ;main.c: 22: {
   480                           ;main.c: 23: uart_write_char('i');
   481  0079E6  0E69               	movlw	105
   482  0079E8  EC74  F03A         	call	_uart_write_char
   483                           
   484                           ;main.c: 24: unsigned int device_ID = get_ID(2);
   485  0079EC  0E00               	movlw	0
   486  0079EE  6E18               	movwf	get_ID@cdc+1,c
   487  0079F0  0E02               	movlw	2
   488  0079F2  6E17               	movwf	get_ID@cdc,c
   489  0079F4  EC0F  F03B         	call	_get_ID	;wreg free
   490  0079F8  C017  F051         	movff	?_get_ID,main@device_ID
   491  0079FC  C018  F052         	movff	?_get_ID+1,main@device_ID+1
   492                           
   493                           ;main.c: 25: uart_write_unsigned_int(device_ID);
   494  007A00  C051  F001         	movff	main@device_ID,uart_write_unsigned_int@number
   495  007A04  C052  F002         	movff	main@device_ID+1,uart_write_unsigned_int@number+1
   496  007A08  ECA0  F03A         	call	_uart_write_unsigned_int	;wreg free
   497  007A0C                     l1937:
   498                           
   499                           ;main.c: 26: }
   500                           ;main.c: 27: if (indicator == 's')
   501  007A0C  0E73               	movlw	115
   502  007A0E  1857               	xorwf	main@indicator,w,c
   503  007A10  A4D8               	btfss	status,2,c
   504  007A12  D023               	goto	l1949
   505                           
   506                           ;main.c: 28: {
   507                           ;main.c: 29: uart_write_char('s');
   508  007A14  0E73               	movlw	115
   509  007A16  EC74  F03A         	call	_uart_write_char
   510                           
   511                           ;main.c: 30: unsigned int sensor_1 = read_sensor(1);
   512  007A1A  0E00               	movlw	0
   513  007A1C  6E18               	movwf	read_sensor@sensor+1,c
   514  007A1E  0E01               	movlw	1
   515  007A20  6E17               	movwf	read_sensor@sensor,c
   516  007A22  EC72  F03B         	call	_read_sensor	;wreg free
   517  007A26  C017  F053         	movff	?_read_sensor,main@sensor_1
   518  007A2A  C018  F054         	movff	?_read_sensor+1,main@sensor_1+1
   519                           
   520                           ;main.c: 31: unsigned int sensor_2 = read_sensor(13);
   521  007A2E  0E00               	movlw	0
   522  007A30  6E18               	movwf	read_sensor@sensor+1,c
   523  007A32  0E0D               	movlw	13
   524  007A34  6E17               	movwf	read_sensor@sensor,c
   525  007A36  EC72  F03B         	call	_read_sensor	;wreg free
   526  007A3A  C017  F055         	movff	?_read_sensor,main@sensor_2
   527  007A3E  C018  F056         	movff	?_read_sensor+1,main@sensor_2+1
   528                           
   529                           ;main.c: 32: uart_write_unsigned_int(sensor_1);
   530  007A42  C053  F001         	movff	main@sensor_1,uart_write_unsigned_int@number
   531  007A46  C054  F002         	movff	main@sensor_1+1,uart_write_unsigned_int@number+1
   532  007A4A  ECA0  F03A         	call	_uart_write_unsigned_int	;wreg free
   533                           
   534                           ;main.c: 33: uart_write_unsigned_int(sensor_2);
   535  007A4E  C055  F001         	movff	main@sensor_2,uart_write_unsigned_int@number
   536  007A52  C056  F002         	movff	main@sensor_2+1,uart_write_unsigned_int@number+1
   537  007A56  ECA0  F03A         	call	_uart_write_unsigned_int	;wreg free
   538  007A5A                     l1949:
   539                           
   540                           ;main.c: 34: }
   541                           ;main.c: 35: if (indicator == 'f')
   542  007A5A  0E66               	movlw	102
   543  007A5C  1857               	xorwf	main@indicator,w,c
   544  007A5E  A4D8               	btfss	status,2,c
   545  007A60  D009               	goto	l1955
   546                           
   547                           ;main.c: 36: {
   548                           ;main.c: 37: uart_write_char('f');
   549  007A62  0E66               	movlw	102
   550  007A64  EC74  F03A         	call	_uart_write_char
   551                           
   552                           ;main.c: 39: uart_write_unsigned_int(bb);
   553  007A68  C04F  F001         	movff	main@bb,uart_write_unsigned_int@number
   554  007A6C  C050  F002         	movff	main@bb+1,uart_write_unsigned_int@number+1
   555  007A70  ECA0  F03A         	call	_uart_write_unsigned_int	;wreg free
   556  007A74                     l1955:
   557                           
   558                           ;main.c: 40: }
   559                           ;main.c: 41: delay_ms(200);
   560  007A74  0E00               	movlw	0
   561  007A76  6E0A               	movwf	delay_ms@n+1,c
   562  007A78  0EC8               	movlw	200
   563  007A7A  6E09               	movwf	delay_ms@n,c
   564  007A7C  ECEF  F03A         	call	_delay_ms	;wreg free
   565  007A80  D7AE               	goto	l1929
   566  007A82                     __end_of_main:
   567                           	opt stack 0
   568                           postinc0	equ	0xFEE
   569                           wreg	equ	0xFE8
   570                           status	equ	0xFD8
   571                           
   572 ;; *************** function _uart_write_unsigned_int *****************
   573 ;; Defined at:
   574 ;;		line 39 in file "uart.c"
   575 ;; Parameters:    Size  Location     Type
   576 ;;  number          2    0[COMRAM] unsigned int 
   577 ;; Auto vars:     Size  Location     Type
   578 ;;  char2           1    3[COMRAM] unsigned char 
   579 ;;  char1           1    2[COMRAM] unsigned char 
   580 ;; Return value:  Size  Location     Type
   581 ;;                  1    wreg      void 
   582 ;; Registers used:
   583 ;;		wreg, status,2
   584 ;; Tracked objects:
   585 ;;		On entry : 0/0
   586 ;;		On exit  : 0/0
   587 ;;		Unchanged: 0/0
   588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   589 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   590 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   592 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   593 ;;Total ram usage:        4 bytes
   594 ;; Hardware stack levels used:    1
   595 ;; This function calls:
   596 ;;		Nothing
   597 ;; This function is called by:
   598 ;;		_main
   599 ;; This function uses a non-reentrant model
   600 ;;
   601                           
   602                           	psect	text1
   603  007540                     __ptext1:
   604                           	opt stack 0
   605  007540                     _uart_write_unsigned_int:
   606                           	opt stack 30
   607                           
   608                           ;uart.c: 41: char char1 = number & 0xFF;
   609                           
   610                           ;incstack = 0
   611  007540  C001  F003         	movff	uart_write_unsigned_int@number,uart_write_unsigned_int@char1
   612                           
   613                           ;uart.c: 42: char char2 = number >> 8;
   614  007544  5002               	movf	uart_write_unsigned_int@number+1,w,c
   615  007546  6E04               	movwf	uart_write_unsigned_int@char2,c
   616  007548                     l246:
   617  007548  A2AC               	btfss	4012,1,c	;volatile
   618  00754A  D7FE               	goto	l246
   619                           
   620                           ;uart.c: 45: TXREG1 = char1;
   621  00754C  C003  FFAD         	movff	uart_write_unsigned_int@char1,4013	;volatile
   622  007550                     l249:
   623  007550  A2AC               	btfss	4012,1,c	;volatile
   624  007552  D7FE               	goto	l249
   625                           
   626                           ;uart.c: 47: TXREG1 = char2;
   627  007554  C004  FFAD         	movff	uart_write_unsigned_int@char2,4013	;volatile
   628  007558  0012               	return		;funcret
   629  00755A                     __end_of_uart_write_unsigned_int:
   630                           	opt stack 0
   631                           postinc0	equ	0xFEE
   632                           wreg	equ	0xFE8
   633                           status	equ	0xFD8
   634                           
   635 ;; *************** function _uart_write_char *****************
   636 ;; Defined at:
   637 ;;		line 24 in file "uart.c"
   638 ;; Parameters:    Size  Location     Type
   639 ;;  data            1    wreg     unsigned char 
   640 ;; Auto vars:     Size  Location     Type
   641 ;;  data            1    0[COMRAM] unsigned char 
   642 ;; Return value:  Size  Location     Type
   643 ;;                  1    wreg      void 
   644 ;; Registers used:
   645 ;;		wreg
   646 ;; Tracked objects:
   647 ;;		On entry : 0/0
   648 ;;		On exit  : 0/0
   649 ;;		Unchanged: 0/0
   650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   652 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   654 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   655 ;;Total ram usage:        1 bytes
   656 ;; Hardware stack levels used:    1
   657 ;; This function calls:
   658 ;;		Nothing
   659 ;; This function is called by:
   660 ;;		_main
   661 ;;		_uart_write_string
   662 ;; This function uses a non-reentrant model
   663 ;;
   664                           
   665                           	psect	text2
   666  0074E8                     __ptext2:
   667                           	opt stack 0
   668  0074E8                     _uart_write_char:
   669                           	opt stack 30
   670                           
   671                           ;incstack = 0
   672                           ;uart_write_char@data stored from wreg
   673  0074E8  6E01               	movwf	uart_write_char@data,c
   674  0074EA                     l234:
   675  0074EA  A2AC               	btfss	4012,1,c	;volatile
   676  0074EC  D7FE               	goto	l234
   677                           
   678                           ;uart.c: 28: TXREG1 = data;
   679  0074EE  C001  FFAD         	movff	uart_write_char@data,4013	;volatile
   680  0074F2  0012               	return		;funcret
   681  0074F4                     __end_of_uart_write_char:
   682                           	opt stack 0
   683                           postinc0	equ	0xFEE
   684                           wreg	equ	0xFE8
   685                           status	equ	0xFD8
   686                           
   687 ;; *************** function _setup_spi *****************
   688 ;; Defined at:
   689 ;;		line 4 in file "spi.c"
   690 ;; Parameters:    Size  Location     Type
   691 ;;		None
   692 ;; Auto vars:     Size  Location     Type
   693 ;;		None
   694 ;; Return value:  Size  Location     Type
   695 ;;                  1    wreg      void 
   696 ;; Registers used:
   697 ;;		None
   698 ;; Tracked objects:
   699 ;;		On entry : 0/0
   700 ;;		On exit  : 0/0
   701 ;;		Unchanged: 0/0
   702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   706 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   707 ;;Total ram usage:        0 bytes
   708 ;; Hardware stack levels used:    1
   709 ;; This function calls:
   710 ;;		Nothing
   711 ;; This function is called by:
   712 ;;		_main
   713 ;; This function uses a non-reentrant model
   714 ;;
   715                           
   716                           	psect	text3
   717  00752A                     __ptext3:
   718                           	opt stack 0
   719  00752A                     _setup_spi:
   720                           	opt stack 30
   721                           
   722                           ;spi.c: 6: SSPSTATbits.SMP = 0;
   723                           
   724                           ;incstack = 0
   725  00752A  9EC7               	bcf	4039,7,c	;volatile
   726                           
   727                           ;spi.c: 7: SSPSTATbits.CKE = 0;
   728  00752C  9CC7               	bcf	4039,6,c	;volatile
   729                           
   730                           ;spi.c: 9: SSPCON1bits.WCOL = 0;
   731  00752E  9EC6               	bcf	4038,7,c	;volatile
   732                           
   733                           ;spi.c: 10: SSPCON1bits.CKP = 1;
   734  007530  88C6               	bsf	4038,4,c	;volatile
   735                           
   736                           ;spi.c: 12: SSPCON1bits.SSPM3 = 0;
   737  007532  96C6               	bcf	4038,3,c	;volatile
   738                           
   739                           ;spi.c: 13: SSPCON1bits.SSPM2 = 0;
   740  007534  94C6               	bcf	4038,2,c	;volatile
   741                           
   742                           ;spi.c: 14: SSPCON1bits.SSPM1 = 1;
   743  007536  82C6               	bsf	4038,1,c	;volatile
   744                           
   745                           ;spi.c: 15: SSPCON1bits.SSPM0 = 0;
   746  007538  90C6               	bcf	4038,0,c	;volatile
   747                           
   748                           ;spi.c: 17: PIE1bits.SSPIE = 0;
   749  00753A  969D               	bcf	3997,3,c	;volatile
   750                           
   751                           ;spi.c: 19: SSPCON1bits.SSPEN = 1;
   752  00753C  8AC6               	bsf	4038,5,c	;volatile
   753  00753E  0012               	return		;funcret
   754  007540                     __end_of_setup_spi:
   755                           	opt stack 0
   756                           postinc0	equ	0xFEE
   757                           wreg	equ	0xFE8
   758                           status	equ	0xFD8
   759                           
   760 ;; *************** function _setup_mcu *****************
   761 ;; Defined at:
   762 ;;		line 6 in file "micro_setup.c"
   763 ;; Parameters:    Size  Location     Type
   764 ;;		None
   765 ;; Auto vars:     Size  Location     Type
   766 ;;		None
   767 ;; Return value:  Size  Location     Type
   768 ;;                  1    wreg      void 
   769 ;; Registers used:
   770 ;;		wreg, status,2, cstack
   771 ;; Tracked objects:
   772 ;;		On entry : 0/0
   773 ;;		On exit  : 0/0
   774 ;;		Unchanged: 0/0
   775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   779 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   780 ;;Total ram usage:        0 bytes
   781 ;; Hardware stack levels used:    1
   782 ;; Hardware stack levels required when called:    1
   783 ;; This function calls:
   784 ;;		_init_uart
   785 ;;		_setup_port
   786 ;; This function is called by:
   787 ;;		_main
   788 ;; This function uses a non-reentrant model
   789 ;;
   790                           
   791                           	psect	text4
   792  0074DE                     __ptext4:
   793                           	opt stack 0
   794  0074DE                     _setup_mcu:
   795                           	opt stack 29
   796                           
   797                           ;micro_setup.c: 8: setup_port();
   798                           
   799                           ;incstack = 0
   800  0074DE  EC7A  F03A         	call	_setup_port	;wreg free
   801                           
   802                           ;micro_setup.c: 9: init_uart();
   803  0074E2  EC8B  F03A         	call	_init_uart	;wreg free
   804  0074E6  0012               	return		;funcret
   805  0074E8                     __end_of_setup_mcu:
   806                           	opt stack 0
   807                           postinc0	equ	0xFEE
   808                           wreg	equ	0xFE8
   809                           status	equ	0xFD8
   810                           
   811 ;; *************** function _setup_port *****************
   812 ;; Defined at:
   813 ;;		line 12 in file "micro_setup.c"
   814 ;; Parameters:    Size  Location     Type
   815 ;;		None
   816 ;; Auto vars:     Size  Location     Type
   817 ;;		None
   818 ;; Return value:  Size  Location     Type
   819 ;;                  1    wreg      void 
   820 ;; Registers used:
   821 ;;		wreg, status,2
   822 ;; Tracked objects:
   823 ;;		On entry : 0/0
   824 ;;		On exit  : 0/0
   825 ;;		Unchanged: 0/0
   826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   830 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   831 ;;Total ram usage:        0 bytes
   832 ;; Hardware stack levels used:    1
   833 ;; This function calls:
   834 ;;		Nothing
   835 ;; This function is called by:
   836 ;;		_setup_mcu
   837 ;; This function uses a non-reentrant model
   838 ;;
   839                           
   840                           	psect	text5
   841  0074F4                     __ptext5:
   842                           	opt stack 0
   843  0074F4                     _setup_port:
   844                           	opt stack 29
   845                           
   846                           ;micro_setup.c: 15: TRISB = 0b00000011;
   847                           
   848                           ;incstack = 0
   849  0074F4  0E03               	movlw	3
   850  0074F6  6E93               	movwf	3987,c	;volatile
   851                           
   852                           ;micro_setup.c: 16: TRISC = 0b10010000;
   853  0074F8  0E90               	movlw	144
   854  0074FA  6E94               	movwf	3988,c	;volatile
   855                           
   856                           ;micro_setup.c: 17: LATCbits.LATC1=1;
   857  0074FC  828B               	bsf	3979,1,c	;volatile
   858                           
   859                           ;micro_setup.c: 18: LATCbits.LATC0=1;
   860  0074FE  808B               	bsf	3979,0,c	;volatile
   861                           
   862                           ;micro_setup.c: 19: LATCbits.LATC2=1;
   863  007500  848B               	bsf	3979,2,c	;volatile
   864  007502  0012               	return		;funcret
   865  007504                     __end_of_setup_port:
   866                           	opt stack 0
   867                           postinc0	equ	0xFEE
   868                           wreg	equ	0xFE8
   869                           status	equ	0xFD8
   870                           
   871 ;; *************** function _init_uart *****************
   872 ;; Defined at:
   873 ;;		line 22 in file "micro_setup.c"
   874 ;; Parameters:    Size  Location     Type
   875 ;;		None
   876 ;; Auto vars:     Size  Location     Type
   877 ;;		None
   878 ;; Return value:  Size  Location     Type
   879 ;;                  1    wreg      void 
   880 ;; Registers used:
   881 ;;		wreg, status,2
   882 ;; Tracked objects:
   883 ;;		On entry : 0/0
   884 ;;		On exit  : 0/0
   885 ;;		Unchanged: 0/0
   886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   890 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   891 ;;Total ram usage:        0 bytes
   892 ;; Hardware stack levels used:    1
   893 ;; This function calls:
   894 ;;		Nothing
   895 ;; This function is called by:
   896 ;;		_setup_mcu
   897 ;; This function uses a non-reentrant model
   898 ;;
   899                           
   900                           	psect	text6
   901  007516                     __ptext6:
   902                           	opt stack 0
   903  007516                     _init_uart:
   904                           	opt stack 29
   905                           
   906                           ;micro_setup.c: 24: TXSTA1 = 0b00100000;
   907                           
   908                           ;incstack = 0
   909  007516  0E20               	movlw	32
   910  007518  6EAC               	movwf	4012,c	;volatile
   911                           
   912                           ;micro_setup.c: 36: SPBRG1 = 12;
   913  00751A  0E0C               	movlw	12
   914  00751C  6EAF               	movwf	4015,c	;volatile
   915                           
   916                           ;micro_setup.c: 38: BAUDCON1 = 0b00000000;
   917  00751E  0E00               	movlw	0
   918  007520  6EA7               	movwf	4007,c	;volatile
   919                           
   920                           ;micro_setup.c: 58: RCSTA1bits.SPEN=1;
   921  007522  8EAB               	bsf	4011,7,c	;volatile
   922                           
   923                           ;micro_setup.c: 59: RCSTA1bits.RX9=0;
   924  007524  9CAB               	bcf	4011,6,c	;volatile
   925                           
   926                           ;micro_setup.c: 60: RCSTA1bits.CREN=1;
   927  007526  88AB               	bsf	4011,4,c	;volatile
   928  007528  0012               	return		;funcret
   929  00752A                     __end_of_init_uart:
   930                           	opt stack 0
   931                           postinc0	equ	0xFEE
   932                           wreg	equ	0xFE8
   933                           status	equ	0xFD8
   934                           
   935 ;; *************** function _setup_AD7147 *****************
   936 ;; Defined at:
   937 ;;		line 6 in file "AD7147.c"
   938 ;; Parameters:    Size  Location     Type
   939 ;;  cdc             2   38[COMRAM] unsigned int 
   940 ;; Auto vars:     Size  Location     Type
   941 ;;  StageBuffer    16   62[COMRAM] unsigned int [8]
   942 ;;  AD7147Regist   16   46[COMRAM] unsigned int [8]
   943 ;;  int_complete    2   44[COMRAM] unsigned int 
   944 ;;  int_high        2   42[COMRAM] unsigned int 
   945 ;;  int_low         2   40[COMRAM] unsigned int 
   946 ;; Return value:  Size  Location     Type
   947 ;;                  1    wreg      void 
   948 ;; Registers used:
   949 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   950 ;; Tracked objects:
   951 ;;		On entry : 0/0
   952 ;;		On exit  : 0/0
   953 ;;		Unchanged: 0/0
   954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   955 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   956 ;;      Locals:        38       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   958 ;;      Totals:        40       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   959 ;;Total ram usage:       40 bytes
   960 ;; Hardware stack levels used:    1
   961 ;; Hardware stack levels required when called:    2
   962 ;; This function calls:
   963 ;;		_get_CDC
   964 ;;		_read_AD7147_interrupt
   965 ;;		_write_AD7147
   966 ;; This function is called by:
   967 ;;		_main
   968 ;; This function uses a non-reentrant model
   969 ;;
   970                           
   971                           	psect	text7
   972  007A82                     __ptext7:
   973                           	opt stack 0
   974  007A82                     _setup_AD7147:
   975                           	opt stack 28
   976                           
   977                           ;AD7147.c: 8: unsigned int StageBuffer[8];
   978                           ;AD7147.c: 9: unsigned int AD7147Registers[8];
   979                           ;AD7147.c: 10: get_CDC(cdc,0);
   980                           
   981                           ;incstack = 0
   982  007A82  C027  F001         	movff	setup_AD7147@cdc,get_CDC@cdc
   983  007A86  C028  F002         	movff	setup_AD7147@cdc+1,get_CDC@cdc+1
   984  007A8A  0E00               	movlw	0
   985  007A8C  6E04               	movwf	get_CDC@state+1,c
   986  007A8E  0E00               	movlw	0
   987  007A90  6E03               	movwf	get_CDC@state,c
   988  007A92  ECAD  F03A         	call	_get_CDC	;wreg free
   989                           
   990                           ;AD7147.c: 25: StageBuffer[0] = 0xFFFE;
   991  007A96  0EFF               	movlw	255
   992  007A98  6E40               	movwf	setup_AD7147@StageBuffer+1,c
   993  007A9A  0EFE               	movlw	254
   994  007A9C  6E3F               	movwf	setup_AD7147@StageBuffer,c
   995                           
   996                           ;AD7147.c: 26: StageBuffer[1] = 0x1FFF;
   997  007A9E  0E1F               	movlw	31
   998  007AA0  6E42               	movwf	setup_AD7147@StageBuffer+3,c
   999  007AA2  6841               	setf	setup_AD7147@StageBuffer+2,c
  1000                           
  1001                           ;AD7147.c: 27: StageBuffer[2] = 0x0100;
  1002  007AA4  0E01               	movlw	1
  1003  007AA6  6E44               	movwf	setup_AD7147@StageBuffer+5,c
  1004  007AA8  0E00               	movlw	0
  1005  007AAA  6E43               	movwf	setup_AD7147@StageBuffer+4,c
  1006                           
  1007                           ;AD7147.c: 28: StageBuffer[3] = 0x2121;
  1008  007AAC  0E21               	movlw	33
  1009  007AAE  6E46               	movwf	setup_AD7147@StageBuffer+7,c
  1010  007AB0  0E21               	movlw	33
  1011  007AB2  6E45               	movwf	setup_AD7147@StageBuffer+6,c
  1012                           
  1013                           ;AD7147.c: 29: StageBuffer[4] = 4000;
  1014  007AB4  0E0F               	movlw	15
  1015  007AB6  6E48               	movwf	setup_AD7147@StageBuffer+9,c
  1016  007AB8  0EA0               	movlw	160
  1017  007ABA  6E47               	movwf	setup_AD7147@StageBuffer+8,c
  1018                           
  1019                           ;AD7147.c: 30: StageBuffer[5] = 4000;
  1020  007ABC  0E0F               	movlw	15
  1021  007ABE  6E4A               	movwf	setup_AD7147@StageBuffer+11,c
  1022  007AC0  0EA0               	movlw	160
  1023  007AC2  6E49               	movwf	setup_AD7147@StageBuffer+10,c
  1024                           
  1025                           ;AD7147.c: 31: StageBuffer[6] = 4250;
  1026  007AC4  0E10               	movlw	16
  1027  007AC6  6E4C               	movwf	setup_AD7147@StageBuffer+13,c
  1028  007AC8  0E9A               	movlw	154
  1029  007ACA  6E4B               	movwf	setup_AD7147@StageBuffer+12,c
  1030                           
  1031                           ;AD7147.c: 32: StageBuffer[7] = 4250;
  1032  007ACC  0E10               	movlw	16
  1033  007ACE  6E4E               	movwf	setup_AD7147@StageBuffer+15,c
  1034  007AD0  0E9A               	movlw	154
  1035  007AD2  6E4D               	movwf	setup_AD7147@StageBuffer+14,c
  1036                           
  1037                           ;AD7147.c: 33: write_AD7147(0x080, 8, StageBuffer,0);
  1038  007AD4  0E00               	movlw	0
  1039  007AD6  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1040  007AD8  0E80               	movlw	128
  1041  007ADA  6E17               	movwf	write_AD7147@RegisterAddress,c
  1042  007ADC  0E00               	movlw	0
  1043  007ADE  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1044  007AE0  0E08               	movlw	8
  1045  007AE2  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1046  007AE4  0E3F               	movlw	low setup_AD7147@StageBuffer
  1047  007AE6  6E1B               	movwf	write_AD7147@DataBuffer,c
  1048  007AE8  0E00               	movlw	high setup_AD7147@StageBuffer
  1049  007AEA  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1050  007AEC  0E00               	movlw	0
  1051  007AEE  6E1E               	movwf	write_AD7147@index+1,c
  1052  007AF0  0E00               	movlw	0
  1053  007AF2  6E1D               	movwf	write_AD7147@index,c
  1054  007AF4  ECEF  F03B         	call	_write_AD7147	;wreg free
  1055                           
  1056                           ;AD7147.c: 38: StageBuffer[0]=0xFFFF;
  1057  007AF8  683F               	setf	setup_AD7147@StageBuffer,c
  1058  007AFA  6840               	setf	setup_AD7147@StageBuffer+1,c
  1059                           
  1060                           ;AD7147.c: 39: StageBuffer[1]=0x3FFF;
  1061  007AFC  0E3F               	movlw	63
  1062  007AFE  6E42               	movwf	setup_AD7147@StageBuffer+3,c
  1063  007B00  6841               	setf	setup_AD7147@StageBuffer+2,c
  1064                           
  1065                           ;AD7147.c: 40: StageBuffer[2]=0x0000;
  1066  007B02  0E00               	movlw	0
  1067  007B04  6E44               	movwf	setup_AD7147@StageBuffer+5,c
  1068  007B06  0E00               	movlw	0
  1069  007B08  6E43               	movwf	setup_AD7147@StageBuffer+4,c
  1070                           
  1071                           ;AD7147.c: 41: StageBuffer[3]=0x2626;
  1072  007B0A  0E26               	movlw	38
  1073  007B0C  6E46               	movwf	setup_AD7147@StageBuffer+7,c
  1074  007B0E  0E26               	movlw	38
  1075  007B10  6E45               	movwf	setup_AD7147@StageBuffer+6,c
  1076                           
  1077                           ;AD7147.c: 42: StageBuffer[4]=3000;
  1078  007B12  0E0B               	movlw	11
  1079  007B14  6E48               	movwf	setup_AD7147@StageBuffer+9,c
  1080  007B16  0EB8               	movlw	184
  1081  007B18  6E47               	movwf	setup_AD7147@StageBuffer+8,c
  1082                           
  1083                           ;AD7147.c: 43: StageBuffer[5]=3000;
  1084  007B1A  0E0B               	movlw	11
  1085  007B1C  6E4A               	movwf	setup_AD7147@StageBuffer+11,c
  1086  007B1E  0EB8               	movlw	184
  1087  007B20  6E49               	movwf	setup_AD7147@StageBuffer+10,c
  1088                           
  1089                           ;AD7147.c: 44: StageBuffer[6]=4000;
  1090  007B22  0E0F               	movlw	15
  1091  007B24  6E4C               	movwf	setup_AD7147@StageBuffer+13,c
  1092  007B26  0EA0               	movlw	160
  1093  007B28  6E4B               	movwf	setup_AD7147@StageBuffer+12,c
  1094                           
  1095                           ;AD7147.c: 45: StageBuffer[7]=4000;
  1096  007B2A  0E0F               	movlw	15
  1097  007B2C  6E4E               	movwf	setup_AD7147@StageBuffer+15,c
  1098  007B2E  0EA0               	movlw	160
  1099  007B30  6E4D               	movwf	setup_AD7147@StageBuffer+14,c
  1100                           
  1101                           ;AD7147.c: 46: write_AD7147(0x088, 8, StageBuffer,0);
  1102  007B32  0E00               	movlw	0
  1103  007B34  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1104  007B36  0E88               	movlw	136
  1105  007B38  6E17               	movwf	write_AD7147@RegisterAddress,c
  1106  007B3A  0E00               	movlw	0
  1107  007B3C  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1108  007B3E  0E08               	movlw	8
  1109  007B40  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1110  007B42  0E3F               	movlw	low setup_AD7147@StageBuffer
  1111  007B44  6E1B               	movwf	write_AD7147@DataBuffer,c
  1112  007B46  0E00               	movlw	high setup_AD7147@StageBuffer
  1113  007B48  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1114  007B4A  0E00               	movlw	0
  1115  007B4C  6E1E               	movwf	write_AD7147@index+1,c
  1116  007B4E  0E00               	movlw	0
  1117  007B50  6E1D               	movwf	write_AD7147@index,c
  1118  007B52  ECEF  F03B         	call	_write_AD7147	;wreg free
  1119                           
  1120                           ;AD7147.c: 51: StageBuffer[0]=0xFFFF;
  1121  007B56  683F               	setf	setup_AD7147@StageBuffer,c
  1122  007B58  6840               	setf	setup_AD7147@StageBuffer+1,c
  1123                           
  1124                           ;AD7147.c: 52: StageBuffer[1]=0x3FFF;
  1125  007B5A  0E3F               	movlw	63
  1126  007B5C  6E42               	movwf	setup_AD7147@StageBuffer+3,c
  1127  007B5E  6841               	setf	setup_AD7147@StageBuffer+2,c
  1128                           
  1129                           ;AD7147.c: 53: StageBuffer[2]=0x0000;
  1130  007B60  0E00               	movlw	0
  1131  007B62  6E44               	movwf	setup_AD7147@StageBuffer+5,c
  1132  007B64  0E00               	movlw	0
  1133  007B66  6E43               	movwf	setup_AD7147@StageBuffer+4,c
  1134                           
  1135                           ;AD7147.c: 54: StageBuffer[3]=0x2626;
  1136  007B68  0E26               	movlw	38
  1137  007B6A  6E46               	movwf	setup_AD7147@StageBuffer+7,c
  1138  007B6C  0E26               	movlw	38
  1139  007B6E  6E45               	movwf	setup_AD7147@StageBuffer+6,c
  1140                           
  1141                           ;AD7147.c: 55: StageBuffer[4]=3000;
  1142  007B70  0E0B               	movlw	11
  1143  007B72  6E48               	movwf	setup_AD7147@StageBuffer+9,c
  1144  007B74  0EB8               	movlw	184
  1145  007B76  6E47               	movwf	setup_AD7147@StageBuffer+8,c
  1146                           
  1147                           ;AD7147.c: 56: StageBuffer[5]=3000;
  1148  007B78  0E0B               	movlw	11
  1149  007B7A  6E4A               	movwf	setup_AD7147@StageBuffer+11,c
  1150  007B7C  0EB8               	movlw	184
  1151  007B7E  6E49               	movwf	setup_AD7147@StageBuffer+10,c
  1152                           
  1153                           ;AD7147.c: 57: StageBuffer[6]=4000;
  1154  007B80  0E0F               	movlw	15
  1155  007B82  6E4C               	movwf	setup_AD7147@StageBuffer+13,c
  1156  007B84  0EA0               	movlw	160
  1157  007B86  6E4B               	movwf	setup_AD7147@StageBuffer+12,c
  1158                           
  1159                           ;AD7147.c: 58: StageBuffer[7]=4000;
  1160  007B88  0E0F               	movlw	15
  1161  007B8A  6E4E               	movwf	setup_AD7147@StageBuffer+15,c
  1162  007B8C  0EA0               	movlw	160
  1163  007B8E  6E4D               	movwf	setup_AD7147@StageBuffer+14,c
  1164                           
  1165                           ;AD7147.c: 59: write_AD7147(0x090, 8, StageBuffer,0);
  1166  007B90  0E00               	movlw	0
  1167  007B92  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1168  007B94  0E90               	movlw	144
  1169  007B96  6E17               	movwf	write_AD7147@RegisterAddress,c
  1170  007B98  0E00               	movlw	0
  1171  007B9A  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1172  007B9C  0E08               	movlw	8
  1173  007B9E  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1174  007BA0  0E3F               	movlw	low setup_AD7147@StageBuffer
  1175  007BA2  6E1B               	movwf	write_AD7147@DataBuffer,c
  1176  007BA4  0E00               	movlw	high setup_AD7147@StageBuffer
  1177  007BA6  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1178  007BA8  0E00               	movlw	0
  1179  007BAA  6E1E               	movwf	write_AD7147@index+1,c
  1180  007BAC  0E00               	movlw	0
  1181  007BAE  6E1D               	movwf	write_AD7147@index,c
  1182  007BB0  ECEF  F03B         	call	_write_AD7147	;wreg free
  1183                           
  1184                           ;AD7147.c: 64: StageBuffer[0]=0xFFFF;
  1185  007BB4  683F               	setf	setup_AD7147@StageBuffer,c
  1186  007BB6  6840               	setf	setup_AD7147@StageBuffer+1,c
  1187                           
  1188                           ;AD7147.c: 65: StageBuffer[1]=0x3FFF;
  1189  007BB8  0E3F               	movlw	63
  1190  007BBA  6E42               	movwf	setup_AD7147@StageBuffer+3,c
  1191  007BBC  6841               	setf	setup_AD7147@StageBuffer+2,c
  1192                           
  1193                           ;AD7147.c: 66: StageBuffer[2]=0x0000;
  1194  007BBE  0E00               	movlw	0
  1195  007BC0  6E44               	movwf	setup_AD7147@StageBuffer+5,c
  1196  007BC2  0E00               	movlw	0
  1197  007BC4  6E43               	movwf	setup_AD7147@StageBuffer+4,c
  1198                           
  1199                           ;AD7147.c: 67: StageBuffer[3]=0x2626;
  1200  007BC6  0E26               	movlw	38
  1201  007BC8  6E46               	movwf	setup_AD7147@StageBuffer+7,c
  1202  007BCA  0E26               	movlw	38
  1203  007BCC  6E45               	movwf	setup_AD7147@StageBuffer+6,c
  1204                           
  1205                           ;AD7147.c: 68: StageBuffer[4]=3000;
  1206  007BCE  0E0B               	movlw	11
  1207  007BD0  6E48               	movwf	setup_AD7147@StageBuffer+9,c
  1208  007BD2  0EB8               	movlw	184
  1209  007BD4  6E47               	movwf	setup_AD7147@StageBuffer+8,c
  1210                           
  1211                           ;AD7147.c: 69: StageBuffer[5]=3000;
  1212  007BD6  0E0B               	movlw	11
  1213  007BD8  6E4A               	movwf	setup_AD7147@StageBuffer+11,c
  1214  007BDA  0EB8               	movlw	184
  1215  007BDC  6E49               	movwf	setup_AD7147@StageBuffer+10,c
  1216                           
  1217                           ;AD7147.c: 70: StageBuffer[6]=4000;
  1218  007BDE  0E0F               	movlw	15
  1219  007BE0  6E4C               	movwf	setup_AD7147@StageBuffer+13,c
  1220  007BE2  0EA0               	movlw	160
  1221  007BE4  6E4B               	movwf	setup_AD7147@StageBuffer+12,c
  1222                           
  1223                           ;AD7147.c: 71: StageBuffer[7]=4000;
  1224  007BE6  0E0F               	movlw	15
  1225  007BE8  6E4E               	movwf	setup_AD7147@StageBuffer+15,c
  1226  007BEA  0EA0               	movlw	160
  1227  007BEC  6E4D               	movwf	setup_AD7147@StageBuffer+14,c
  1228                           
  1229                           ;AD7147.c: 72: write_AD7147(0x098, 8, StageBuffer,0);
  1230  007BEE  0E00               	movlw	0
  1231  007BF0  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1232  007BF2  0E98               	movlw	152
  1233  007BF4  6E17               	movwf	write_AD7147@RegisterAddress,c
  1234  007BF6  0E00               	movlw	0
  1235  007BF8  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1236  007BFA  0E08               	movlw	8
  1237  007BFC  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1238  007BFE  0E3F               	movlw	low setup_AD7147@StageBuffer
  1239  007C00  6E1B               	movwf	write_AD7147@DataBuffer,c
  1240  007C02  0E00               	movlw	high setup_AD7147@StageBuffer
  1241  007C04  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1242  007C06  0E00               	movlw	0
  1243  007C08  6E1E               	movwf	write_AD7147@index+1,c
  1244  007C0A  0E00               	movlw	0
  1245  007C0C  6E1D               	movwf	write_AD7147@index,c
  1246  007C0E  ECEF  F03B         	call	_write_AD7147	;wreg free
  1247                           
  1248                           ;AD7147.c: 77: StageBuffer[0]=0xFFFF;
  1249  007C12  683F               	setf	setup_AD7147@StageBuffer,c
  1250  007C14  6840               	setf	setup_AD7147@StageBuffer+1,c
  1251                           
  1252                           ;AD7147.c: 78: StageBuffer[1]=0x3FFF;
  1253  007C16  0E3F               	movlw	63
  1254  007C18  6E42               	movwf	setup_AD7147@StageBuffer+3,c
  1255  007C1A  6841               	setf	setup_AD7147@StageBuffer+2,c
  1256                           
  1257                           ;AD7147.c: 79: StageBuffer[2]=0x0000;
  1258  007C1C  0E00               	movlw	0
  1259  007C1E  6E44               	movwf	setup_AD7147@StageBuffer+5,c
  1260  007C20  0E00               	movlw	0
  1261  007C22  6E43               	movwf	setup_AD7147@StageBuffer+4,c
  1262                           
  1263                           ;AD7147.c: 80: StageBuffer[3]=0x2626;
  1264  007C24  0E26               	movlw	38
  1265  007C26  6E46               	movwf	setup_AD7147@StageBuffer+7,c
  1266  007C28  0E26               	movlw	38
  1267  007C2A  6E45               	movwf	setup_AD7147@StageBuffer+6,c
  1268                           
  1269                           ;AD7147.c: 81: StageBuffer[4]=3000;
  1270  007C2C  0E0B               	movlw	11
  1271  007C2E  6E48               	movwf	setup_AD7147@StageBuffer+9,c
  1272  007C30  0EB8               	movlw	184
  1273  007C32  6E47               	movwf	setup_AD7147@StageBuffer+8,c
  1274                           
  1275                           ;AD7147.c: 82: StageBuffer[5]=3000;
  1276  007C34  0E0B               	movlw	11
  1277  007C36  6E4A               	movwf	setup_AD7147@StageBuffer+11,c
  1278  007C38  0EB8               	movlw	184
  1279  007C3A  6E49               	movwf	setup_AD7147@StageBuffer+10,c
  1280                           
  1281                           ;AD7147.c: 83: StageBuffer[6]=4000;
  1282  007C3C  0E0F               	movlw	15
  1283  007C3E  6E4C               	movwf	setup_AD7147@StageBuffer+13,c
  1284  007C40  0EA0               	movlw	160
  1285  007C42  6E4B               	movwf	setup_AD7147@StageBuffer+12,c
  1286                           
  1287                           ;AD7147.c: 84: StageBuffer[7]=4000;
  1288  007C44  0E0F               	movlw	15
  1289  007C46  6E4E               	movwf	setup_AD7147@StageBuffer+15,c
  1290  007C48  0EA0               	movlw	160
  1291  007C4A  6E4D               	movwf	setup_AD7147@StageBuffer+14,c
  1292                           
  1293                           ;AD7147.c: 85: write_AD7147(0x0A0, 8, StageBuffer,0);
  1294  007C4C  0E00               	movlw	0
  1295  007C4E  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1296  007C50  0EA0               	movlw	160
  1297  007C52  6E17               	movwf	write_AD7147@RegisterAddress,c
  1298  007C54  0E00               	movlw	0
  1299  007C56  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1300  007C58  0E08               	movlw	8
  1301  007C5A  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1302  007C5C  0E3F               	movlw	low setup_AD7147@StageBuffer
  1303  007C5E  6E1B               	movwf	write_AD7147@DataBuffer,c
  1304  007C60  0E00               	movlw	high setup_AD7147@StageBuffer
  1305  007C62  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1306  007C64  0E00               	movlw	0
  1307  007C66  6E1E               	movwf	write_AD7147@index+1,c
  1308  007C68  0E00               	movlw	0
  1309  007C6A  6E1D               	movwf	write_AD7147@index,c
  1310  007C6C  ECEF  F03B         	call	_write_AD7147	;wreg free
  1311                           
  1312                           ;AD7147.c: 90: StageBuffer[0]=0xFFFF;
  1313  007C70  683F               	setf	setup_AD7147@StageBuffer,c
  1314  007C72  6840               	setf	setup_AD7147@StageBuffer+1,c
  1315                           
  1316                           ;AD7147.c: 91: StageBuffer[1]=0x3FFF;
  1317  007C74  0E3F               	movlw	63
  1318  007C76  6E42               	movwf	setup_AD7147@StageBuffer+3,c
  1319  007C78  6841               	setf	setup_AD7147@StageBuffer+2,c
  1320                           
  1321                           ;AD7147.c: 92: StageBuffer[2]=0x0000;
  1322  007C7A  0E00               	movlw	0
  1323  007C7C  6E44               	movwf	setup_AD7147@StageBuffer+5,c
  1324  007C7E  0E00               	movlw	0
  1325  007C80  6E43               	movwf	setup_AD7147@StageBuffer+4,c
  1326                           
  1327                           ;AD7147.c: 93: StageBuffer[3]=0x2626;
  1328  007C82  0E26               	movlw	38
  1329  007C84  6E46               	movwf	setup_AD7147@StageBuffer+7,c
  1330  007C86  0E26               	movlw	38
  1331  007C88  6E45               	movwf	setup_AD7147@StageBuffer+6,c
  1332                           
  1333                           ;AD7147.c: 94: StageBuffer[4]=3000;
  1334  007C8A  0E0B               	movlw	11
  1335  007C8C  6E48               	movwf	setup_AD7147@StageBuffer+9,c
  1336  007C8E  0EB8               	movlw	184
  1337  007C90  6E47               	movwf	setup_AD7147@StageBuffer+8,c
  1338                           
  1339                           ;AD7147.c: 95: StageBuffer[5]=3000;
  1340  007C92  0E0B               	movlw	11
  1341  007C94  6E4A               	movwf	setup_AD7147@StageBuffer+11,c
  1342  007C96  0EB8               	movlw	184
  1343  007C98  6E49               	movwf	setup_AD7147@StageBuffer+10,c
  1344                           
  1345                           ;AD7147.c: 96: StageBuffer[6]=4000;
  1346  007C9A  0E0F               	movlw	15
  1347  007C9C  6E4C               	movwf	setup_AD7147@StageBuffer+13,c
  1348  007C9E  0EA0               	movlw	160
  1349  007CA0  6E4B               	movwf	setup_AD7147@StageBuffer+12,c
  1350                           
  1351                           ;AD7147.c: 97: StageBuffer[7]=4000;
  1352  007CA2  0E0F               	movlw	15
  1353  007CA4  6E4E               	movwf	setup_AD7147@StageBuffer+15,c
  1354  007CA6  0EA0               	movlw	160
  1355  007CA8  6E4D               	movwf	setup_AD7147@StageBuffer+14,c
  1356                           
  1357                           ;AD7147.c: 98: write_AD7147(0x0A8, 8, StageBuffer,0);
  1358  007CAA  0E00               	movlw	0
  1359  007CAC  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1360  007CAE  0EA8               	movlw	168
  1361  007CB0  6E17               	movwf	write_AD7147@RegisterAddress,c
  1362  007CB2  0E00               	movlw	0
  1363  007CB4  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1364  007CB6  0E08               	movlw	8
  1365  007CB8  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1366  007CBA  0E3F               	movlw	low setup_AD7147@StageBuffer
  1367  007CBC  6E1B               	movwf	write_AD7147@DataBuffer,c
  1368  007CBE  0E00               	movlw	high setup_AD7147@StageBuffer
  1369  007CC0  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1370  007CC2  0E00               	movlw	0
  1371  007CC4  6E1E               	movwf	write_AD7147@index+1,c
  1372  007CC6  0E00               	movlw	0
  1373  007CC8  6E1D               	movwf	write_AD7147@index,c
  1374  007CCA  ECEF  F03B         	call	_write_AD7147	;wreg free
  1375                           
  1376                           ;AD7147.c: 103: StageBuffer[0]=0xFFFF;
  1377  007CCE  683F               	setf	setup_AD7147@StageBuffer,c
  1378  007CD0  6840               	setf	setup_AD7147@StageBuffer+1,c
  1379                           
  1380                           ;AD7147.c: 104: StageBuffer[1]=0x3FFF;
  1381  007CD2  0E3F               	movlw	63
  1382  007CD4  6E42               	movwf	setup_AD7147@StageBuffer+3,c
  1383  007CD6  6841               	setf	setup_AD7147@StageBuffer+2,c
  1384                           
  1385                           ;AD7147.c: 105: StageBuffer[2]=0x0000;
  1386  007CD8  0E00               	movlw	0
  1387  007CDA  6E44               	movwf	setup_AD7147@StageBuffer+5,c
  1388  007CDC  0E00               	movlw	0
  1389  007CDE  6E43               	movwf	setup_AD7147@StageBuffer+4,c
  1390                           
  1391                           ;AD7147.c: 106: StageBuffer[3]=0x2626;
  1392  007CE0  0E26               	movlw	38
  1393  007CE2  6E46               	movwf	setup_AD7147@StageBuffer+7,c
  1394  007CE4  0E26               	movlw	38
  1395  007CE6  6E45               	movwf	setup_AD7147@StageBuffer+6,c
  1396                           
  1397                           ;AD7147.c: 107: StageBuffer[4]=3000;
  1398  007CE8  0E0B               	movlw	11
  1399  007CEA  6E48               	movwf	setup_AD7147@StageBuffer+9,c
  1400  007CEC  0EB8               	movlw	184
  1401  007CEE  6E47               	movwf	setup_AD7147@StageBuffer+8,c
  1402                           
  1403                           ;AD7147.c: 108: StageBuffer[5]=3000;
  1404  007CF0  0E0B               	movlw	11
  1405  007CF2  6E4A               	movwf	setup_AD7147@StageBuffer+11,c
  1406  007CF4  0EB8               	movlw	184
  1407  007CF6  6E49               	movwf	setup_AD7147@StageBuffer+10,c
  1408                           
  1409                           ;AD7147.c: 109: StageBuffer[6]=4000;
  1410  007CF8  0E0F               	movlw	15
  1411  007CFA  6E4C               	movwf	setup_AD7147@StageBuffer+13,c
  1412  007CFC  0EA0               	movlw	160
  1413  007CFE  6E4B               	movwf	setup_AD7147@StageBuffer+12,c
  1414                           
  1415                           ;AD7147.c: 110: StageBuffer[7]=4000;
  1416  007D00  0E0F               	movlw	15
  1417  007D02  6E4E               	movwf	setup_AD7147@StageBuffer+15,c
  1418  007D04  0EA0               	movlw	160
  1419  007D06  6E4D               	movwf	setup_AD7147@StageBuffer+14,c
  1420                           
  1421                           ;AD7147.c: 111: write_AD7147(0x0B0, 8, StageBuffer,0);
  1422  007D08  0E00               	movlw	0
  1423  007D0A  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1424  007D0C  0EB0               	movlw	176
  1425  007D0E  6E17               	movwf	write_AD7147@RegisterAddress,c
  1426  007D10  0E00               	movlw	0
  1427  007D12  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1428  007D14  0E08               	movlw	8
  1429  007D16  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1430  007D18  0E3F               	movlw	low setup_AD7147@StageBuffer
  1431  007D1A  6E1B               	movwf	write_AD7147@DataBuffer,c
  1432  007D1C  0E00               	movlw	high setup_AD7147@StageBuffer
  1433  007D1E  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1434  007D20  0E00               	movlw	0
  1435  007D22  6E1E               	movwf	write_AD7147@index+1,c
  1436  007D24  0E00               	movlw	0
  1437  007D26  6E1D               	movwf	write_AD7147@index,c
  1438  007D28  ECEF  F03B         	call	_write_AD7147	;wreg free
  1439                           
  1440                           ;AD7147.c: 116: StageBuffer[0]=0xFFFF;
  1441  007D2C  683F               	setf	setup_AD7147@StageBuffer,c
  1442  007D2E  6840               	setf	setup_AD7147@StageBuffer+1,c
  1443                           
  1444                           ;AD7147.c: 117: StageBuffer[1]=0x3FFF;
  1445  007D30  0E3F               	movlw	63
  1446  007D32  6E42               	movwf	setup_AD7147@StageBuffer+3,c
  1447  007D34  6841               	setf	setup_AD7147@StageBuffer+2,c
  1448                           
  1449                           ;AD7147.c: 118: StageBuffer[2]=0x0000;
  1450  007D36  0E00               	movlw	0
  1451  007D38  6E44               	movwf	setup_AD7147@StageBuffer+5,c
  1452  007D3A  0E00               	movlw	0
  1453  007D3C  6E43               	movwf	setup_AD7147@StageBuffer+4,c
  1454                           
  1455                           ;AD7147.c: 119: StageBuffer[3]=0x2626;
  1456  007D3E  0E26               	movlw	38
  1457  007D40  6E46               	movwf	setup_AD7147@StageBuffer+7,c
  1458  007D42  0E26               	movlw	38
  1459  007D44  6E45               	movwf	setup_AD7147@StageBuffer+6,c
  1460                           
  1461                           ;AD7147.c: 120: StageBuffer[4]=3000;
  1462  007D46  0E0B               	movlw	11
  1463  007D48  6E48               	movwf	setup_AD7147@StageBuffer+9,c
  1464  007D4A  0EB8               	movlw	184
  1465  007D4C  6E47               	movwf	setup_AD7147@StageBuffer+8,c
  1466                           
  1467                           ;AD7147.c: 121: StageBuffer[5]=3000;
  1468  007D4E  0E0B               	movlw	11
  1469  007D50  6E4A               	movwf	setup_AD7147@StageBuffer+11,c
  1470  007D52  0EB8               	movlw	184
  1471  007D54  6E49               	movwf	setup_AD7147@StageBuffer+10,c
  1472                           
  1473                           ;AD7147.c: 122: StageBuffer[6]=4000;
  1474  007D56  0E0F               	movlw	15
  1475  007D58  6E4C               	movwf	setup_AD7147@StageBuffer+13,c
  1476  007D5A  0EA0               	movlw	160
  1477  007D5C  6E4B               	movwf	setup_AD7147@StageBuffer+12,c
  1478                           
  1479                           ;AD7147.c: 123: StageBuffer[7]=4000;
  1480  007D5E  0E0F               	movlw	15
  1481  007D60  6E4E               	movwf	setup_AD7147@StageBuffer+15,c
  1482  007D62  0EA0               	movlw	160
  1483  007D64  6E4D               	movwf	setup_AD7147@StageBuffer+14,c
  1484                           
  1485                           ;AD7147.c: 124: write_AD7147(0x0B8, 8, StageBuffer,0);
  1486  007D66  0E00               	movlw	0
  1487  007D68  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1488  007D6A  0EB8               	movlw	184
  1489  007D6C  6E17               	movwf	write_AD7147@RegisterAddress,c
  1490  007D6E  0E00               	movlw	0
  1491  007D70  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1492  007D72  0E08               	movlw	8
  1493  007D74  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1494  007D76  0E3F               	movlw	low setup_AD7147@StageBuffer
  1495  007D78  6E1B               	movwf	write_AD7147@DataBuffer,c
  1496  007D7A  0E00               	movlw	high setup_AD7147@StageBuffer
  1497  007D7C  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1498  007D7E  0E00               	movlw	0
  1499  007D80  6E1E               	movwf	write_AD7147@index+1,c
  1500  007D82  0E00               	movlw	0
  1501  007D84  6E1D               	movwf	write_AD7147@index,c
  1502  007D86  ECEF  F03B         	call	_write_AD7147	;wreg free
  1503                           
  1504                           ;AD7147.c: 129: StageBuffer[0]=0xFFFF;
  1505  007D8A  683F               	setf	setup_AD7147@StageBuffer,c
  1506  007D8C  6840               	setf	setup_AD7147@StageBuffer+1,c
  1507                           
  1508                           ;AD7147.c: 130: StageBuffer[1]=0x3FFF;
  1509  007D8E  0E3F               	movlw	63
  1510  007D90  6E42               	movwf	setup_AD7147@StageBuffer+3,c
  1511  007D92  6841               	setf	setup_AD7147@StageBuffer+2,c
  1512                           
  1513                           ;AD7147.c: 131: StageBuffer[2]=0x0000;
  1514  007D94  0E00               	movlw	0
  1515  007D96  6E44               	movwf	setup_AD7147@StageBuffer+5,c
  1516  007D98  0E00               	movlw	0
  1517  007D9A  6E43               	movwf	setup_AD7147@StageBuffer+4,c
  1518                           
  1519                           ;AD7147.c: 132: StageBuffer[3]=0x2626;
  1520  007D9C  0E26               	movlw	38
  1521  007D9E  6E46               	movwf	setup_AD7147@StageBuffer+7,c
  1522  007DA0  0E26               	movlw	38
  1523  007DA2  6E45               	movwf	setup_AD7147@StageBuffer+6,c
  1524                           
  1525                           ;AD7147.c: 133: StageBuffer[4]=3000;
  1526  007DA4  0E0B               	movlw	11
  1527  007DA6  6E48               	movwf	setup_AD7147@StageBuffer+9,c
  1528  007DA8  0EB8               	movlw	184
  1529  007DAA  6E47               	movwf	setup_AD7147@StageBuffer+8,c
  1530                           
  1531                           ;AD7147.c: 134: StageBuffer[5]=3000;
  1532  007DAC  0E0B               	movlw	11
  1533  007DAE  6E4A               	movwf	setup_AD7147@StageBuffer+11,c
  1534  007DB0  0EB8               	movlw	184
  1535  007DB2  6E49               	movwf	setup_AD7147@StageBuffer+10,c
  1536                           
  1537                           ;AD7147.c: 135: StageBuffer[6]=4000;
  1538  007DB4  0E0F               	movlw	15
  1539  007DB6  6E4C               	movwf	setup_AD7147@StageBuffer+13,c
  1540  007DB8  0EA0               	movlw	160
  1541  007DBA  6E4B               	movwf	setup_AD7147@StageBuffer+12,c
  1542                           
  1543                           ;AD7147.c: 136: StageBuffer[7]=4000;
  1544  007DBC  0E0F               	movlw	15
  1545  007DBE  6E4E               	movwf	setup_AD7147@StageBuffer+15,c
  1546  007DC0  0EA0               	movlw	160
  1547  007DC2  6E4D               	movwf	setup_AD7147@StageBuffer+14,c
  1548                           
  1549                           ;AD7147.c: 137: write_AD7147(0x0C0, 8, StageBuffer,0);
  1550  007DC4  0E00               	movlw	0
  1551  007DC6  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1552  007DC8  0EC0               	movlw	192
  1553  007DCA  6E17               	movwf	write_AD7147@RegisterAddress,c
  1554  007DCC  0E00               	movlw	0
  1555  007DCE  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1556  007DD0  0E08               	movlw	8
  1557  007DD2  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1558  007DD4  0E3F               	movlw	low setup_AD7147@StageBuffer
  1559  007DD6  6E1B               	movwf	write_AD7147@DataBuffer,c
  1560  007DD8  0E00               	movlw	high setup_AD7147@StageBuffer
  1561  007DDA  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1562  007DDC  0E00               	movlw	0
  1563  007DDE  6E1E               	movwf	write_AD7147@index+1,c
  1564  007DE0  0E00               	movlw	0
  1565  007DE2  6E1D               	movwf	write_AD7147@index,c
  1566  007DE4  ECEF  F03B         	call	_write_AD7147	;wreg free
  1567                           
  1568                           ;AD7147.c: 142: StageBuffer[0]=0xFFFF;
  1569  007DE8  683F               	setf	setup_AD7147@StageBuffer,c
  1570  007DEA  6840               	setf	setup_AD7147@StageBuffer+1,c
  1571                           
  1572                           ;AD7147.c: 143: StageBuffer[1]=0x3FFF;
  1573  007DEC  0E3F               	movlw	63
  1574  007DEE  6E42               	movwf	setup_AD7147@StageBuffer+3,c
  1575  007DF0  6841               	setf	setup_AD7147@StageBuffer+2,c
  1576                           
  1577                           ;AD7147.c: 144: StageBuffer[2]=0x0000;
  1578  007DF2  0E00               	movlw	0
  1579  007DF4  6E44               	movwf	setup_AD7147@StageBuffer+5,c
  1580  007DF6  0E00               	movlw	0
  1581  007DF8  6E43               	movwf	setup_AD7147@StageBuffer+4,c
  1582                           
  1583                           ;AD7147.c: 145: StageBuffer[3]=0x2626;
  1584  007DFA  0E26               	movlw	38
  1585  007DFC  6E46               	movwf	setup_AD7147@StageBuffer+7,c
  1586  007DFE  0E26               	movlw	38
  1587  007E00  6E45               	movwf	setup_AD7147@StageBuffer+6,c
  1588                           
  1589                           ;AD7147.c: 146: StageBuffer[4]=3000;
  1590  007E02  0E0B               	movlw	11
  1591  007E04  6E48               	movwf	setup_AD7147@StageBuffer+9,c
  1592  007E06  0EB8               	movlw	184
  1593  007E08  6E47               	movwf	setup_AD7147@StageBuffer+8,c
  1594                           
  1595                           ;AD7147.c: 147: StageBuffer[5]=3000;
  1596  007E0A  0E0B               	movlw	11
  1597  007E0C  6E4A               	movwf	setup_AD7147@StageBuffer+11,c
  1598  007E0E  0EB8               	movlw	184
  1599  007E10  6E49               	movwf	setup_AD7147@StageBuffer+10,c
  1600                           
  1601                           ;AD7147.c: 148: StageBuffer[6]=4000;
  1602  007E12  0E0F               	movlw	15
  1603  007E14  6E4C               	movwf	setup_AD7147@StageBuffer+13,c
  1604  007E16  0EA0               	movlw	160
  1605  007E18  6E4B               	movwf	setup_AD7147@StageBuffer+12,c
  1606                           
  1607                           ;AD7147.c: 149: StageBuffer[7]=4000;
  1608  007E1A  0E0F               	movlw	15
  1609  007E1C  6E4E               	movwf	setup_AD7147@StageBuffer+15,c
  1610  007E1E  0EA0               	movlw	160
  1611  007E20  6E4D               	movwf	setup_AD7147@StageBuffer+14,c
  1612                           
  1613                           ;AD7147.c: 150: write_AD7147(0x0C8, 8, StageBuffer,0);
  1614  007E22  0E00               	movlw	0
  1615  007E24  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1616  007E26  0EC8               	movlw	200
  1617  007E28  6E17               	movwf	write_AD7147@RegisterAddress,c
  1618  007E2A  0E00               	movlw	0
  1619  007E2C  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1620  007E2E  0E08               	movlw	8
  1621  007E30  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1622  007E32  0E3F               	movlw	low setup_AD7147@StageBuffer
  1623  007E34  6E1B               	movwf	write_AD7147@DataBuffer,c
  1624  007E36  0E00               	movlw	high setup_AD7147@StageBuffer
  1625  007E38  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1626  007E3A  0E00               	movlw	0
  1627  007E3C  6E1E               	movwf	write_AD7147@index+1,c
  1628  007E3E  0E00               	movlw	0
  1629  007E40  6E1D               	movwf	write_AD7147@index,c
  1630  007E42  ECEF  F03B         	call	_write_AD7147	;wreg free
  1631                           
  1632                           ;AD7147.c: 155: StageBuffer[0]=0xFFFF;
  1633  007E46  683F               	setf	setup_AD7147@StageBuffer,c
  1634  007E48  6840               	setf	setup_AD7147@StageBuffer+1,c
  1635                           
  1636                           ;AD7147.c: 156: StageBuffer[1]=0x3FFF;
  1637  007E4A  0E3F               	movlw	63
  1638  007E4C  6E42               	movwf	setup_AD7147@StageBuffer+3,c
  1639  007E4E  6841               	setf	setup_AD7147@StageBuffer+2,c
  1640                           
  1641                           ;AD7147.c: 157: StageBuffer[2]=0x0000;
  1642  007E50  0E00               	movlw	0
  1643  007E52  6E44               	movwf	setup_AD7147@StageBuffer+5,c
  1644  007E54  0E00               	movlw	0
  1645  007E56  6E43               	movwf	setup_AD7147@StageBuffer+4,c
  1646                           
  1647                           ;AD7147.c: 158: StageBuffer[3]=0x2626;
  1648  007E58  0E26               	movlw	38
  1649  007E5A  6E46               	movwf	setup_AD7147@StageBuffer+7,c
  1650  007E5C  0E26               	movlw	38
  1651  007E5E  6E45               	movwf	setup_AD7147@StageBuffer+6,c
  1652                           
  1653                           ;AD7147.c: 159: StageBuffer[4]=3000;
  1654  007E60  0E0B               	movlw	11
  1655  007E62  6E48               	movwf	setup_AD7147@StageBuffer+9,c
  1656  007E64  0EB8               	movlw	184
  1657  007E66  6E47               	movwf	setup_AD7147@StageBuffer+8,c
  1658                           
  1659                           ;AD7147.c: 160: StageBuffer[5]=3000;
  1660  007E68  0E0B               	movlw	11
  1661  007E6A  6E4A               	movwf	setup_AD7147@StageBuffer+11,c
  1662  007E6C  0EB8               	movlw	184
  1663  007E6E  6E49               	movwf	setup_AD7147@StageBuffer+10,c
  1664                           
  1665                           ;AD7147.c: 161: StageBuffer[6]=4000;
  1666  007E70  0E0F               	movlw	15
  1667  007E72  6E4C               	movwf	setup_AD7147@StageBuffer+13,c
  1668  007E74  0EA0               	movlw	160
  1669  007E76  6E4B               	movwf	setup_AD7147@StageBuffer+12,c
  1670                           
  1671                           ;AD7147.c: 162: StageBuffer[7]=4000;
  1672  007E78  0E0F               	movlw	15
  1673  007E7A  6E4E               	movwf	setup_AD7147@StageBuffer+15,c
  1674  007E7C  0EA0               	movlw	160
  1675  007E7E  6E4D               	movwf	setup_AD7147@StageBuffer+14,c
  1676                           
  1677                           ;AD7147.c: 163: write_AD7147(0x0D0, 8, StageBuffer,0);
  1678  007E80  0E00               	movlw	0
  1679  007E82  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1680  007E84  0ED0               	movlw	208
  1681  007E86  6E17               	movwf	write_AD7147@RegisterAddress,c
  1682  007E88  0E00               	movlw	0
  1683  007E8A  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1684  007E8C  0E08               	movlw	8
  1685  007E8E  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1686  007E90  0E3F               	movlw	low setup_AD7147@StageBuffer
  1687  007E92  6E1B               	movwf	write_AD7147@DataBuffer,c
  1688  007E94  0E00               	movlw	high setup_AD7147@StageBuffer
  1689  007E96  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1690  007E98  0E00               	movlw	0
  1691  007E9A  6E1E               	movwf	write_AD7147@index+1,c
  1692  007E9C  0E00               	movlw	0
  1693  007E9E  6E1D               	movwf	write_AD7147@index,c
  1694  007EA0  ECEF  F03B         	call	_write_AD7147	;wreg free
  1695                           
  1696                           ;AD7147.c: 168: StageBuffer[0]=0xFFFF;
  1697  007EA4  683F               	setf	setup_AD7147@StageBuffer,c
  1698  007EA6  6840               	setf	setup_AD7147@StageBuffer+1,c
  1699                           
  1700                           ;AD7147.c: 169: StageBuffer[1]=0x3FFF;
  1701  007EA8  0E3F               	movlw	63
  1702  007EAA  6E42               	movwf	setup_AD7147@StageBuffer+3,c
  1703  007EAC  6841               	setf	setup_AD7147@StageBuffer+2,c
  1704                           
  1705                           ;AD7147.c: 170: StageBuffer[2]=0x0000;
  1706  007EAE  0E00               	movlw	0
  1707  007EB0  6E44               	movwf	setup_AD7147@StageBuffer+5,c
  1708  007EB2  0E00               	movlw	0
  1709  007EB4  6E43               	movwf	setup_AD7147@StageBuffer+4,c
  1710                           
  1711                           ;AD7147.c: 171: StageBuffer[3]=0x2626;
  1712  007EB6  0E26               	movlw	38
  1713  007EB8  6E46               	movwf	setup_AD7147@StageBuffer+7,c
  1714  007EBA  0E26               	movlw	38
  1715  007EBC  6E45               	movwf	setup_AD7147@StageBuffer+6,c
  1716                           
  1717                           ;AD7147.c: 172: StageBuffer[4]=3000;
  1718  007EBE  0E0B               	movlw	11
  1719  007EC0  6E48               	movwf	setup_AD7147@StageBuffer+9,c
  1720  007EC2  0EB8               	movlw	184
  1721  007EC4  6E47               	movwf	setup_AD7147@StageBuffer+8,c
  1722                           
  1723                           ;AD7147.c: 173: StageBuffer[5]=3000;
  1724  007EC6  0E0B               	movlw	11
  1725  007EC8  6E4A               	movwf	setup_AD7147@StageBuffer+11,c
  1726  007ECA  0EB8               	movlw	184
  1727  007ECC  6E49               	movwf	setup_AD7147@StageBuffer+10,c
  1728                           
  1729                           ;AD7147.c: 174: StageBuffer[6]=4000;
  1730  007ECE  0E0F               	movlw	15
  1731  007ED0  6E4C               	movwf	setup_AD7147@StageBuffer+13,c
  1732  007ED2  0EA0               	movlw	160
  1733  007ED4  6E4B               	movwf	setup_AD7147@StageBuffer+12,c
  1734                           
  1735                           ;AD7147.c: 175: StageBuffer[7]=4000;
  1736  007ED6  0E0F               	movlw	15
  1737  007ED8  6E4E               	movwf	setup_AD7147@StageBuffer+15,c
  1738  007EDA  0EA0               	movlw	160
  1739  007EDC  6E4D               	movwf	setup_AD7147@StageBuffer+14,c
  1740                           
  1741                           ;AD7147.c: 176: write_AD7147(0x0D8, 8, StageBuffer,0);
  1742  007EDE  0E00               	movlw	0
  1743  007EE0  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1744  007EE2  0ED8               	movlw	216
  1745  007EE4  6E17               	movwf	write_AD7147@RegisterAddress,c
  1746  007EE6  0E00               	movlw	0
  1747  007EE8  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1748  007EEA  0E08               	movlw	8
  1749  007EEC  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1750  007EEE  0E3F               	movlw	low setup_AD7147@StageBuffer
  1751  007EF0  6E1B               	movwf	write_AD7147@DataBuffer,c
  1752  007EF2  0E00               	movlw	high setup_AD7147@StageBuffer
  1753  007EF4  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1754  007EF6  0E00               	movlw	0
  1755  007EF8  6E1E               	movwf	write_AD7147@index+1,c
  1756  007EFA  0E00               	movlw	0
  1757  007EFC  6E1D               	movwf	write_AD7147@index,c
  1758  007EFE  ECEF  F03B         	call	_write_AD7147	;wreg free
  1759                           
  1760                           ;AD7147.c: 182: AD7147Registers[0] = 0x82B2;
  1761  007F02  0E82               	movlw	130
  1762  007F04  6E30               	movwf	setup_AD7147@AD7147Registers+1,c
  1763  007F06  0EB2               	movlw	178
  1764  007F08  6E2F               	movwf	setup_AD7147@AD7147Registers,c
  1765                           
  1766                           ;AD7147.c: 183: write_AD7147(0x000, 1, AD7147Registers,0);
  1767  007F0A  0E00               	movlw	0
  1768  007F0C  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1769  007F0E  0E00               	movlw	0
  1770  007F10  6E17               	movwf	write_AD7147@RegisterAddress,c
  1771  007F12  0E00               	movlw	0
  1772  007F14  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1773  007F16  0E01               	movlw	1
  1774  007F18  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1775  007F1A  0E2F               	movlw	low setup_AD7147@AD7147Registers
  1776  007F1C  6E1B               	movwf	write_AD7147@DataBuffer,c
  1777  007F1E  0E00               	movlw	high setup_AD7147@AD7147Registers
  1778  007F20  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1779  007F22  0E00               	movlw	0
  1780  007F24  6E1E               	movwf	write_AD7147@index+1,c
  1781  007F26  0E00               	movlw	0
  1782  007F28  6E1D               	movwf	write_AD7147@index,c
  1783  007F2A  ECEF  F03B         	call	_write_AD7147	;wreg free
  1784                           
  1785                           ;AD7147.c: 185: AD7147Registers[2] = 0x3230;
  1786  007F2E  0E32               	movlw	50
  1787  007F30  6E34               	movwf	setup_AD7147@AD7147Registers+5,c
  1788  007F32  0E30               	movlw	48
  1789  007F34  6E33               	movwf	setup_AD7147@AD7147Registers+4,c
  1790                           
  1791                           ;AD7147.c: 186: AD7147Registers[3] = 0x0419;
  1792  007F36  0E04               	movlw	4
  1793  007F38  6E36               	movwf	setup_AD7147@AD7147Registers+7,c
  1794  007F3A  0E19               	movlw	25
  1795  007F3C  6E35               	movwf	setup_AD7147@AD7147Registers+6,c
  1796                           
  1797                           ;AD7147.c: 187: AD7147Registers[4] = 0x0832;
  1798  007F3E  0E08               	movlw	8
  1799  007F40  6E38               	movwf	setup_AD7147@AD7147Registers+9,c
  1800  007F42  0E32               	movlw	50
  1801  007F44  6E37               	movwf	setup_AD7147@AD7147Registers+8,c
  1802                           
  1803                           ;AD7147.c: 188: AD7147Registers[5] = 0x0000;
  1804  007F46  0E00               	movlw	0
  1805  007F48  6E3A               	movwf	setup_AD7147@AD7147Registers+11,c
  1806  007F4A  0E00               	movlw	0
  1807  007F4C  6E39               	movwf	setup_AD7147@AD7147Registers+10,c
  1808                           
  1809                           ;AD7147.c: 189: AD7147Registers[6] = 0x0000;
  1810  007F4E  0E00               	movlw	0
  1811  007F50  6E3C               	movwf	setup_AD7147@AD7147Registers+13,c
  1812  007F52  0E00               	movlw	0
  1813  007F54  6E3B               	movwf	setup_AD7147@AD7147Registers+12,c
  1814                           
  1815                           ;AD7147.c: 190: AD7147Registers[7] = 0x0000;
  1816  007F56  0E00               	movlw	0
  1817  007F58  6E3E               	movwf	setup_AD7147@AD7147Registers+15,c
  1818  007F5A  0E00               	movlw	0
  1819  007F5C  6E3D               	movwf	setup_AD7147@AD7147Registers+14,c
  1820                           
  1821                           ;AD7147.c: 191: write_AD7147(0x002, 6, AD7147Registers,2);
  1822  007F5E  0E00               	movlw	0
  1823  007F60  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1824  007F62  0E02               	movlw	2
  1825  007F64  6E17               	movwf	write_AD7147@RegisterAddress,c
  1826  007F66  0E00               	movlw	0
  1827  007F68  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1828  007F6A  0E06               	movlw	6
  1829  007F6C  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1830  007F6E  0E2F               	movlw	low setup_AD7147@AD7147Registers
  1831  007F70  6E1B               	movwf	write_AD7147@DataBuffer,c
  1832  007F72  0E00               	movlw	high setup_AD7147@AD7147Registers
  1833  007F74  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1834  007F76  0E00               	movlw	0
  1835  007F78  6E1E               	movwf	write_AD7147@index+1,c
  1836  007F7A  0E02               	movlw	2
  1837  007F7C  6E1D               	movwf	write_AD7147@index,c
  1838  007F7E  ECEF  F03B         	call	_write_AD7147	;wreg free
  1839                           
  1840                           ;AD7147.c: 194: AD7147Registers[1] = 0x0001;
  1841  007F82  0E00               	movlw	0
  1842  007F84  6E32               	movwf	setup_AD7147@AD7147Registers+3,c
  1843  007F86  0E01               	movlw	1
  1844  007F88  6E31               	movwf	setup_AD7147@AD7147Registers+2,c
  1845                           
  1846                           ;AD7147.c: 195: write_AD7147(0x001, 1, AD7147Registers,1);
  1847  007F8A  0E00               	movlw	0
  1848  007F8C  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1849  007F8E  0E01               	movlw	1
  1850  007F90  6E17               	movwf	write_AD7147@RegisterAddress,c
  1851  007F92  0E00               	movlw	0
  1852  007F94  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1853  007F96  0E01               	movlw	1
  1854  007F98  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1855  007F9A  0E2F               	movlw	low setup_AD7147@AD7147Registers
  1856  007F9C  6E1B               	movwf	write_AD7147@DataBuffer,c
  1857  007F9E  0E00               	movlw	high setup_AD7147@AD7147Registers
  1858  007FA0  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1859  007FA2  0E00               	movlw	0
  1860  007FA4  6E1E               	movwf	write_AD7147@index+1,c
  1861  007FA6  0E01               	movlw	1
  1862  007FA8  6E1D               	movwf	write_AD7147@index,c
  1863  007FAA  ECEF  F03B         	call	_write_AD7147	;wreg free
  1864                           
  1865                           ;AD7147.c: 200: unsigned int int_low = read_AD7147_interrupt(0x008);
  1866  007FAE  0E00               	movlw	0
  1867  007FB0  6E18               	movwf	read_AD7147_interrupt@RegisterAddress+1,c
  1868  007FB2  0E08               	movlw	8
  1869  007FB4  6E17               	movwf	read_AD7147_interrupt@RegisterAddress,c
  1870  007FB6  ECBE  F03A         	call	_read_AD7147_interrupt	;wreg free
  1871  007FBA  C017  F029         	movff	?_read_AD7147_interrupt,setup_AD7147@int_low
  1872  007FBE  C018  F02A         	movff	?_read_AD7147_interrupt+1,setup_AD7147@int_low+1
  1873                           
  1874                           ;AD7147.c: 201: unsigned int int_high = read_AD7147_interrupt(0x009);
  1875  007FC2  0E00               	movlw	0
  1876  007FC4  6E18               	movwf	read_AD7147_interrupt@RegisterAddress+1,c
  1877  007FC6  0E09               	movlw	9
  1878  007FC8  6E17               	movwf	read_AD7147_interrupt@RegisterAddress,c
  1879  007FCA  ECBE  F03A         	call	_read_AD7147_interrupt	;wreg free
  1880  007FCE  C017  F02B         	movff	?_read_AD7147_interrupt,setup_AD7147@int_high
  1881  007FD2  C018  F02C         	movff	?_read_AD7147_interrupt+1,setup_AD7147@int_high+1
  1882                           
  1883                           ;AD7147.c: 202: unsigned int int_complete = read_AD7147_interrupt(0x00A);
  1884  007FD6  0E00               	movlw	0
  1885  007FD8  6E18               	movwf	read_AD7147_interrupt@RegisterAddress+1,c
  1886  007FDA  0E0A               	movlw	10
  1887  007FDC  6E17               	movwf	read_AD7147_interrupt@RegisterAddress,c
  1888  007FDE  ECBE  F03A         	call	_read_AD7147_interrupt	;wreg free
  1889  007FE2  C017  F02D         	movff	?_read_AD7147_interrupt,setup_AD7147@int_complete
  1890  007FE6  C018  F02E         	movff	?_read_AD7147_interrupt+1,setup_AD7147@int_complete+1
  1891                           
  1892                           ;AD7147.c: 203: get_CDC(cdc,1);
  1893  007FEA  C027  F001         	movff	setup_AD7147@cdc,get_CDC@cdc
  1894  007FEE  C028  F002         	movff	setup_AD7147@cdc+1,get_CDC@cdc+1
  1895  007FF2  0E00               	movlw	0
  1896  007FF4  6E04               	movwf	get_CDC@state+1,c
  1897  007FF6  0E01               	movlw	1
  1898  007FF8  6E03               	movwf	get_CDC@state,c
  1899  007FFA  ECAD  F03A         	call	_get_CDC	;wreg free
  1900  007FFE  0012               	return		;funcret
  1901  008000                     __end_of_setup_AD7147:
  1902                           	opt stack 0
  1903                           postinc0	equ	0xFEE
  1904                           wreg	equ	0xFE8
  1905                           status	equ	0xFD8
  1906                           
  1907 ;; *************** function _write_AD7147 *****************
  1908 ;; Defined at:
  1909 ;;		line 206 in file "AD7147.c"
  1910 ;; Parameters:    Size  Location     Type
  1911 ;;  RegisterAddr    2   22[COMRAM] unsigned int 
  1912 ;;  NumberOfRegi    2   24[COMRAM] unsigned int 
  1913 ;;  DataBuffer      2   26[COMRAM] PTR unsigned int 
  1914 ;;		 -> setup_AD7147@AD7147Registers(16), setup_AD7147@StageBuffer(16), 
  1915 ;;  index           2   28[COMRAM] unsigned int 
  1916 ;; Auto vars:     Size  Location     Type
  1917 ;;  i               2   36[COMRAM] unsigned int 
  1918 ;;  Data_Value      2   34[COMRAM] unsigned int 
  1919 ;;  Register_Val    2   32[COMRAM] unsigned int 
  1920 ;; Return value:  Size  Location     Type
  1921 ;;                  1    wreg      void 
  1922 ;; Registers used:
  1923 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1924 ;; Tracked objects:
  1925 ;;		On entry : 0/0
  1926 ;;		On exit  : 0/0
  1927 ;;		Unchanged: 0/0
  1928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1929 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1930 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1931 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1932 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1933 ;;Total ram usage:       16 bytes
  1934 ;; Hardware stack levels used:    1
  1935 ;; Hardware stack levels required when called:    1
  1936 ;; This function calls:
  1937 ;;		_w32_spi
  1938 ;; This function is called by:
  1939 ;;		_setup_AD7147
  1940 ;; This function uses a non-reentrant model
  1941 ;;
  1942                           
  1943                           	psect	text8
  1944  0077DE                     __ptext8:
  1945                           	opt stack 0
  1946  0077DE                     _write_AD7147:
  1947                           	opt stack 28
  1948                           
  1949                           ;AD7147.c: 208: unsigned int Register_Value = 0;
  1950                           
  1951                           ;incstack = 0
  1952  0077DE  0E00               	movlw	0
  1953  0077E0  6E22               	movwf	write_AD7147@Register_Value+1,c
  1954  0077E2  0E00               	movlw	0
  1955  0077E4  6E21               	movwf	write_AD7147@Register_Value,c
  1956                           
  1957                           ;AD7147.c: 209: unsigned int Data_Value = 0;
  1958  0077E6  0E00               	movlw	0
  1959  0077E8  6E24               	movwf	write_AD7147@Data_Value+1,c
  1960  0077EA  0E00               	movlw	0
  1961  0077EC  6E23               	movwf	write_AD7147@Data_Value,c
  1962                           
  1963                           ;AD7147.c: 211: for (unsigned int i=0; i<NumberOfRegisters; i++)
  1964  0077EE  0E00               	movlw	0
  1965  0077F0  6E26               	movwf	write_AD7147@i+1,c
  1966  0077F2  0E00               	movlw	0
  1967  0077F4  6E25               	movwf	write_AD7147@i,c
  1968  0077F6  D02B               	goto	l1569
  1969  0077F8                     l1561:
  1970                           
  1971                           ;AD7147.c: 212: {
  1972                           ;AD7147.c: 213: Register_Value = 0xE000 + RegisterAddress + i;
  1973  0077F8  5025               	movf	write_AD7147@i,w,c
  1974  0077FA  2417               	addwf	write_AD7147@RegisterAddress,w,c
  1975  0077FC  6E1F               	movwf	??_write_AD7147& (0+255),c
  1976  0077FE  5026               	movf	write_AD7147@i+1,w,c
  1977  007800  2018               	addwfc	write_AD7147@RegisterAddress+1,w,c
  1978  007802  6E20               	movwf	(??_write_AD7147+1)& (0+255),c
  1979  007804  0E00               	movlw	0
  1980  007806  241F               	addwf	??_write_AD7147,w,c
  1981  007808  6E21               	movwf	write_AD7147@Register_Value,c
  1982  00780A  0EE0               	movlw	224
  1983  00780C  2020               	addwfc	??_write_AD7147+1,w,c
  1984  00780E  6E22               	movwf	write_AD7147@Register_Value+1,c
  1985                           
  1986                           ;AD7147.c: 214: Data_Value = DataBuffer[index+i];
  1987  007810  5025               	movf	write_AD7147@i,w,c
  1988  007812  241D               	addwf	write_AD7147@index,w,c
  1989  007814  6E1F               	movwf	??_write_AD7147& (0+255),c
  1990  007816  5026               	movf	write_AD7147@i+1,w,c
  1991  007818  201E               	addwfc	write_AD7147@index+1,w,c
  1992  00781A  6E20               	movwf	(??_write_AD7147+1)& (0+255),c
  1993  00781C  90D8               	bcf	status,0,c
  1994  00781E  361F               	rlcf	??_write_AD7147,f,c
  1995  007820  3620               	rlcf	??_write_AD7147+1,f,c
  1996  007822  501F               	movf	??_write_AD7147,w,c
  1997  007824  241B               	addwf	write_AD7147@DataBuffer,w,c
  1998  007826  6ED9               	movwf	fsr2l,c
  1999  007828  5020               	movf	??_write_AD7147+1,w,c
  2000  00782A  201C               	addwfc	write_AD7147@DataBuffer+1,w,c
  2001  00782C  6EDA               	movwf	fsr2h,c
  2002  00782E  CFDE F023          	movff	postinc2,write_AD7147@Data_Value
  2003  007832  CFDD F024          	movff	postdec2,write_AD7147@Data_Value+1
  2004                           
  2005                           ;AD7147.c: 216: w32_spi(Register_Value,Data_Value);
  2006  007836  C021  F001         	movff	write_AD7147@Register_Value,w32_spi@address
  2007  00783A  C022  F002         	movff	write_AD7147@Register_Value+1,w32_spi@address+1
  2008  00783E  C023  F003         	movff	write_AD7147@Data_Value,w32_spi@data
  2009  007842  C024  F004         	movff	write_AD7147@Data_Value+1,w32_spi@data+1
  2010  007846  EC3B  F03B         	call	_w32_spi	;wreg free
  2011  00784A  4A25               	infsnz	write_AD7147@i,f,c
  2012  00784C  2A26               	incf	write_AD7147@i+1,f,c
  2013  00784E                     l1569:
  2014  00784E  5019               	movf	write_AD7147@NumberOfRegisters,w,c
  2015  007850  5C25               	subwf	write_AD7147@i,w,c
  2016  007852  501A               	movf	write_AD7147@NumberOfRegisters+1,w,c
  2017  007854  5826               	subwfb	write_AD7147@i+1,w,c
  2018  007856  B0D8               	btfsc	status,0,c
  2019  007858  0012               	return	
  2020  00785A  D7CE               	goto	l1561
  2021  00785C                     __end_of_write_AD7147:
  2022                           	opt stack 0
  2023                           postinc0	equ	0xFEE
  2024                           wreg	equ	0xFE8
  2025                           postinc2	equ	0xFDE
  2026                           postdec2	equ	0xFDD
  2027                           fsr2h	equ	0xFDA
  2028                           fsr2l	equ	0xFD9
  2029                           status	equ	0xFD8
  2030                           
  2031 ;; *************** function _read_AD7147_interrupt *****************
  2032 ;; Defined at:
  2033 ;;		line 234 in file "AD7147.c"
  2034 ;; Parameters:    Size  Location     Type
  2035 ;;  RegisterAddr    2   22[COMRAM] unsigned int 
  2036 ;; Auto vars:     Size  Location     Type
  2037 ;;  interrupt_cl    2   26[COMRAM] unsigned int 
  2038 ;;  Register_Val    2   24[COMRAM] unsigned int 
  2039 ;; Return value:  Size  Location     Type
  2040 ;;                  2   22[COMRAM] unsigned int 
  2041 ;; Registers used:
  2042 ;;		wreg, status,2, status,0, cstack
  2043 ;; Tracked objects:
  2044 ;;		On entry : 0/0
  2045 ;;		On exit  : 0/0
  2046 ;;		Unchanged: 0/0
  2047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2048 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2049 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2051 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2052 ;;Total ram usage:        6 bytes
  2053 ;; Hardware stack levels used:    1
  2054 ;; Hardware stack levels required when called:    1
  2055 ;; This function calls:
  2056 ;;		_w16_r16_spi
  2057 ;; This function is called by:
  2058 ;;		_setup_AD7147
  2059 ;; This function uses a non-reentrant model
  2060 ;;
  2061                           
  2062                           	psect	text9
  2063  00757C                     __ptext9:
  2064                           	opt stack 0
  2065  00757C                     _read_AD7147_interrupt:
  2066                           	opt stack 28
  2067                           
  2068                           ;AD7147.c: 236: unsigned int Register_Values = 0xE400 + RegisterAddress;
  2069                           
  2070                           ;incstack = 0
  2071  00757C  0E00               	movlw	0
  2072  00757E  2417               	addwf	read_AD7147_interrupt@RegisterAddress,w,c
  2073  007580  6E19               	movwf	read_AD7147_interrupt@Register_Values,c
  2074  007582  0EE4               	movlw	228
  2075  007584  2018               	addwfc	read_AD7147_interrupt@RegisterAddress+1,w,c
  2076  007586  6E1A               	movwf	read_AD7147_interrupt@Register_Values+1,c
  2077                           
  2078                           ;AD7147.c: 237: unsigned int interrupt_clear = w16_r16_spi(Register_Values);
  2079  007588  C019  F001         	movff	read_AD7147_interrupt@Register_Values,w16_r16_spi@address
  2080  00758C  C01A  F002         	movff	read_AD7147_interrupt@Register_Values+1,w16_r16_spi@address+1
  2081  007590  ECB0  F03B         	call	_w16_r16_spi	;wreg free
  2082  007594  C001  F01B         	movff	?_w16_r16_spi,read_AD7147_interrupt@interrupt_clear
  2083  007598  C002  F01C         	movff	?_w16_r16_spi+1,read_AD7147_interrupt@interrupt_clear+1
  2084                           
  2085                           ;AD7147.c: 240: return interrupt_clear;
  2086  00759C  C01B  F017         	movff	read_AD7147_interrupt@interrupt_clear,?_read_AD7147_interrupt
  2087  0075A0  C01C  F018         	movff	read_AD7147_interrupt@interrupt_clear+1,?_read_AD7147_interrupt+1
  2088  0075A4  0012               	return	
  2089  0075A6                     __end_of_read_AD7147_interrupt:
  2090                           	opt stack 0
  2091                           postinc0	equ	0xFEE
  2092                           wreg	equ	0xFE8
  2093                           postinc2	equ	0xFDE
  2094                           postdec2	equ	0xFDD
  2095                           fsr2h	equ	0xFDA
  2096                           fsr2l	equ	0xFD9
  2097                           status	equ	0xFD8
  2098                           
  2099 ;; *************** function _read_sensor *****************
  2100 ;; Defined at:
  2101 ;;		line 243 in file "AD7147.c"
  2102 ;; Parameters:    Size  Location     Type
  2103 ;;  sensor          2   22[COMRAM] unsigned int 
  2104 ;; Auto vars:     Size  Location     Type
  2105 ;;  cdc_sensor      2   28[COMRAM] unsigned int 
  2106 ;;  sensor_value    2   26[COMRAM] unsigned int 
  2107 ;;  register1       2   24[COMRAM] unsigned int 
  2108 ;; Return value:  Size  Location     Type
  2109 ;;                  2   22[COMRAM] unsigned int 
  2110 ;; Registers used:
  2111 ;;		wreg, status,2, status,0, cstack
  2112 ;; Tracked objects:
  2113 ;;		On entry : 0/0
  2114 ;;		On exit  : 0/0
  2115 ;;		Unchanged: 0/0
  2116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2117 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2118 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2120 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2121 ;;Total ram usage:        8 bytes
  2122 ;; Hardware stack levels used:    1
  2123 ;; Hardware stack levels required when called:    2
  2124 ;; This function calls:
  2125 ;;		_sensor_CDC
  2126 ;;		_w16_r16_spi
  2127 ;; This function is called by:
  2128 ;;		_main
  2129 ;; This function uses a non-reentrant model
  2130 ;;
  2131                           
  2132                           	psect	text10
  2133  0076E4                     __ptext10:
  2134                           	opt stack 0
  2135  0076E4                     _read_sensor:
  2136                           	opt stack 28
  2137                           
  2138                           ;AD7147.c: 245: unsigned int cdc_sensor = 0;
  2139                           
  2140                           ;incstack = 0
  2141  0076E4  0E00               	movlw	0
  2142  0076E6  6E1E               	movwf	read_sensor@cdc_sensor+1,c
  2143  0076E8  0E00               	movlw	0
  2144  0076EA  6E1D               	movwf	read_sensor@cdc_sensor,c
  2145                           
  2146                           ;AD7147.c: 246: if (sensor > 12)
  2147  0076EC  5018               	movf	read_sensor@sensor+1,w,c
  2148  0076EE  E104               	bnz	u700
  2149  0076F0  0E0D               	movlw	13
  2150  0076F2  5C17               	subwf	read_sensor@sensor,w,c
  2151  0076F4  A0D8               	btfss	status,0,c
  2152  0076F6  D007               	goto	l41
  2153  0076F8                     u700:
  2154                           
  2155                           ;AD7147.c: 247: {
  2156                           ;AD7147.c: 248: cdc_sensor = sensor - 12;
  2157  0076F8  0EF4               	movlw	244
  2158  0076FA  2417               	addwf	read_sensor@sensor,w,c
  2159  0076FC  6E1D               	movwf	read_sensor@cdc_sensor,c
  2160  0076FE  0EFF               	movlw	255
  2161  007700  2018               	addwfc	read_sensor@sensor+1,w,c
  2162  007702  6E1E               	movwf	read_sensor@cdc_sensor+1,c
  2163                           
  2164                           ;AD7147.c: 249: }
  2165  007704  D004               	goto	l1845
  2166  007706                     l41:
  2167                           
  2168                           ;AD7147.c: 250: else
  2169                           ;AD7147.c: 251: {
  2170                           ;AD7147.c: 252: cdc_sensor = sensor;
  2171  007706  C017  F01D         	movff	read_sensor@sensor,read_sensor@cdc_sensor
  2172  00770A  C018  F01E         	movff	read_sensor@sensor+1,read_sensor@cdc_sensor+1
  2173  00770E                     l1845:
  2174                           
  2175                           ;AD7147.c: 253: }
  2176                           ;AD7147.c: 254: unsigned int register1 = 0xE400 + 0x00A + cdc_sensor;
  2177  00770E  0E0A               	movlw	10
  2178  007710  241D               	addwf	read_sensor@cdc_sensor,w,c
  2179  007712  6E19               	movwf	read_sensor@register1,c
  2180  007714  0EE4               	movlw	228
  2181  007716  201E               	addwfc	read_sensor@cdc_sensor+1,w,c
  2182  007718  6E1A               	movwf	read_sensor@register1+1,c
  2183                           
  2184                           ;AD7147.c: 256: sensor_CDC(sensor, 0);
  2185  00771A  C017  F005         	movff	read_sensor@sensor,sensor_CDC@sensor
  2186  00771E  C018  F006         	movff	read_sensor@sensor+1,sensor_CDC@sensor+1
  2187  007722  0E00               	movlw	0
  2188  007724  6E08               	movwf	sensor_CDC@state+1,c
  2189  007726  0E00               	movlw	0
  2190  007728  6E07               	movwf	sensor_CDC@state,c
  2191  00772A  ECD3  F03A         	call	_sensor_CDC	;wreg free
  2192                           
  2193                           ;AD7147.c: 257: unsigned int sensor_value = w16_r16_spi(register1);
  2194  00772E  C019  F001         	movff	read_sensor@register1,w16_r16_spi@address
  2195  007732  C01A  F002         	movff	read_sensor@register1+1,w16_r16_spi@address+1
  2196  007736  ECB0  F03B         	call	_w16_r16_spi	;wreg free
  2197  00773A  C001  F01B         	movff	?_w16_r16_spi,read_sensor@sensor_value
  2198  00773E  C002  F01C         	movff	?_w16_r16_spi+1,read_sensor@sensor_value+1
  2199                           
  2200                           ;AD7147.c: 258: sensor_CDC(sensor, 1);
  2201  007742  C017  F005         	movff	read_sensor@sensor,sensor_CDC@sensor
  2202  007746  C018  F006         	movff	read_sensor@sensor+1,sensor_CDC@sensor+1
  2203  00774A  0E00               	movlw	0
  2204  00774C  6E08               	movwf	sensor_CDC@state+1,c
  2205  00774E  0E01               	movlw	1
  2206  007750  6E07               	movwf	sensor_CDC@state,c
  2207  007752  ECD3  F03A         	call	_sensor_CDC	;wreg free
  2208                           
  2209                           ;AD7147.c: 265: return sensor_value;
  2210  007756  C01B  F017         	movff	read_sensor@sensor_value,?_read_sensor
  2211  00775A  C01C  F018         	movff	read_sensor@sensor_value+1,?_read_sensor+1
  2212  00775E  0012               	return	
  2213  007760                     __end_of_read_sensor:
  2214                           	opt stack 0
  2215                           postinc0	equ	0xFEE
  2216                           wreg	equ	0xFE8
  2217                           postinc2	equ	0xFDE
  2218                           postdec2	equ	0xFDD
  2219                           fsr2h	equ	0xFDA
  2220                           fsr2l	equ	0xFD9
  2221                           status	equ	0xFD8
  2222                           
  2223 ;; *************** function _sensor_CDC *****************
  2224 ;; Defined at:
  2225 ;;		line 273 in file "AD7147.c"
  2226 ;; Parameters:    Size  Location     Type
  2227 ;;  sensor          2    4[COMRAM] unsigned int 
  2228 ;;  state           2    6[COMRAM] unsigned int 
  2229 ;; Auto vars:     Size  Location     Type
  2230 ;;		None
  2231 ;; Return value:  Size  Location     Type
  2232 ;;                  1    wreg      void 
  2233 ;; Registers used:
  2234 ;;		wreg, status,2, status,0, cstack
  2235 ;; Tracked objects:
  2236 ;;		On entry : 0/0
  2237 ;;		On exit  : 0/0
  2238 ;;		Unchanged: 0/0
  2239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2240 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2243 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2244 ;;Total ram usage:        4 bytes
  2245 ;; Hardware stack levels used:    1
  2246 ;; Hardware stack levels required when called:    1
  2247 ;; This function calls:
  2248 ;;		_get_CDC
  2249 ;; This function is called by:
  2250 ;;		_read_sensor
  2251 ;; This function uses a non-reentrant model
  2252 ;;
  2253                           
  2254                           	psect	text11
  2255  0075A6                     __ptext11:
  2256                           	opt stack 0
  2257  0075A6                     _sensor_CDC:
  2258                           	opt stack 28
  2259                           
  2260                           ;AD7147.c: 277: if (sensor > 12)
  2261                           
  2262                           ;incstack = 0
  2263  0075A6  5006               	movf	sensor_CDC@sensor+1,w,c
  2264  0075A8  E104               	bnz	u680
  2265  0075AA  0E0D               	movlw	13
  2266  0075AC  5C05               	subwf	sensor_CDC@sensor,w,c
  2267  0075AE  A0D8               	btfss	status,0,c
  2268  0075B0  D00B               	goto	l1583
  2269  0075B2                     u680:
  2270                           
  2271                           ;AD7147.c: 278: {
  2272                           ;AD7147.c: 279: get_CDC(2,state);
  2273  0075B2  0E00               	movlw	0
  2274  0075B4  6E02               	movwf	get_CDC@cdc+1,c
  2275  0075B6  0E02               	movlw	2
  2276  0075B8  6E01               	movwf	get_CDC@cdc,c
  2277  0075BA  C007  F003         	movff	sensor_CDC@state,get_CDC@state
  2278  0075BE  C008  F004         	movff	sensor_CDC@state+1,get_CDC@state+1
  2279  0075C2  ECAD  F03A         	call	_get_CDC	;wreg free
  2280                           
  2281                           ;AD7147.c: 280: }
  2282  0075C6  0012               	return	
  2283  0075C8                     l1583:
  2284                           
  2285                           ;AD7147.c: 281: else
  2286                           ;AD7147.c: 282: {
  2287                           ;AD7147.c: 283: get_CDC(1,state);
  2288  0075C8  0E00               	movlw	0
  2289  0075CA  6E02               	movwf	get_CDC@cdc+1,c
  2290  0075CC  0E01               	movlw	1
  2291  0075CE  6E01               	movwf	get_CDC@cdc,c
  2292  0075D0  C007  F003         	movff	sensor_CDC@state,get_CDC@state
  2293  0075D4  C008  F004         	movff	sensor_CDC@state+1,get_CDC@state+1
  2294  0075D8  ECAD  F03A         	call	_get_CDC	;wreg free
  2295  0075DC  0012               	return	
  2296  0075DE                     __end_of_sensor_CDC:
  2297                           	opt stack 0
  2298                           postinc0	equ	0xFEE
  2299                           wreg	equ	0xFE8
  2300                           postinc2	equ	0xFDE
  2301                           postdec2	equ	0xFDD
  2302                           fsr2h	equ	0xFDA
  2303                           fsr2l	equ	0xFD9
  2304                           status	equ	0xFD8
  2305                           
  2306 ;; *************** function _get_ID *****************
  2307 ;; Defined at:
  2308 ;;		line 333 in file "AD7147.c"
  2309 ;; Parameters:    Size  Location     Type
  2310 ;;  cdc             2   22[COMRAM] unsigned int 
  2311 ;; Auto vars:     Size  Location     Type
  2312 ;;  result          2   25[COMRAM] unsigned int 
  2313 ;; Return value:  Size  Location     Type
  2314 ;;                  2   22[COMRAM] unsigned int 
  2315 ;; Registers used:
  2316 ;;		wreg, status,2, status,0, cstack
  2317 ;; Tracked objects:
  2318 ;;		On entry : 0/0
  2319 ;;		On exit  : 0/0
  2320 ;;		Unchanged: 0/0
  2321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2322 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2323 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2324 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2325 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2326 ;;Total ram usage:        5 bytes
  2327 ;; Hardware stack levels used:    1
  2328 ;; Hardware stack levels required when called:    1
  2329 ;; This function calls:
  2330 ;;		_get_CDC
  2331 ;;		_w16_r16_spi
  2332 ;; This function is called by:
  2333 ;;		_main
  2334 ;; This function uses a non-reentrant model
  2335 ;;
  2336                           
  2337                           	psect	text12
  2338  00761E                     __ptext12:
  2339                           	opt stack 0
  2340  00761E                     _get_ID:
  2341                           	opt stack 29
  2342                           
  2343                           ;AD7147.c: 335: get_CDC(cdc,0);
  2344                           
  2345                           ;incstack = 0
  2346  00761E  C017  F001         	movff	get_ID@cdc,get_CDC@cdc
  2347  007622  C018  F002         	movff	get_ID@cdc+1,get_CDC@cdc+1
  2348  007626  0E00               	movlw	0
  2349  007628  6E04               	movwf	get_CDC@state+1,c
  2350  00762A  0E00               	movlw	0
  2351  00762C  6E03               	movwf	get_CDC@state,c
  2352  00762E  ECAD  F03A         	call	_get_CDC	;wreg free
  2353                           
  2354                           ;AD7147.c: 336: unsigned int result = (w16_r16_spi(0xE400 + 0x017) & 0b1111111111110000)
      +                           >> 4;
  2355  007632  0EE4               	movlw	228
  2356  007634  6E02               	movwf	w16_r16_spi@address+1,c
  2357  007636  0E17               	movlw	23
  2358  007638  6E01               	movwf	w16_r16_spi@address,c
  2359  00763A  ECB0  F03B         	call	_w16_r16_spi	;wreg free
  2360  00763E  0E04               	movlw	4
  2361  007640  6E19               	movwf	??_get_ID& (0+255),c
  2362  007642                     u715:
  2363  007642  90D8               	bcf	status,0,c
  2364  007644  3202               	rrcf	?_w16_r16_spi+1,f,c
  2365  007646  3201               	rrcf	?_w16_r16_spi,f,c
  2366  007648  2E19               	decfsz	??_get_ID& (0+255),f,c
  2367  00764A  D7FB               	goto	u715
  2368  00764C  0EFF               	movlw	255
  2369  00764E  1401               	andwf	?_w16_r16_spi,w,c
  2370  007650  6E1A               	movwf	get_ID@result,c
  2371  007652  0E0F               	movlw	15
  2372  007654  1402               	andwf	?_w16_r16_spi+1,w,c
  2373  007656  6E1B               	movwf	get_ID@result+1,c
  2374                           
  2375                           ;AD7147.c: 337: get_CDC(cdc,1);
  2376  007658  C017  F001         	movff	get_ID@cdc,get_CDC@cdc
  2377  00765C  C018  F002         	movff	get_ID@cdc+1,get_CDC@cdc+1
  2378  007660  0E00               	movlw	0
  2379  007662  6E04               	movwf	get_CDC@state+1,c
  2380  007664  0E01               	movlw	1
  2381  007666  6E03               	movwf	get_CDC@state,c
  2382  007668  ECAD  F03A         	call	_get_CDC	;wreg free
  2383                           
  2384                           ;AD7147.c: 338: return result;
  2385  00766C  C01A  F017         	movff	get_ID@result,?_get_ID
  2386  007670  C01B  F018         	movff	get_ID@result+1,?_get_ID+1
  2387  007674  0012               	return	
  2388  007676                     __end_of_get_ID:
  2389                           	opt stack 0
  2390                           postinc0	equ	0xFEE
  2391                           wreg	equ	0xFE8
  2392                           postinc2	equ	0xFDE
  2393                           postdec2	equ	0xFDD
  2394                           fsr2h	equ	0xFDA
  2395                           fsr2l	equ	0xFD9
  2396                           status	equ	0xFD8
  2397                           
  2398 ;; *************** function _w16_r16_spi *****************
  2399 ;; Defined at:
  2400 ;;		line 92 in file "spi.c"
  2401 ;; Parameters:    Size  Location     Type
  2402 ;;  address         2    0[COMRAM] unsigned int 
  2403 ;; Auto vars:     Size  Location     Type
  2404 ;;  p4              2   20[COMRAM] unsigned int 
  2405 ;;  p3              2   18[COMRAM] unsigned int 
  2406 ;;  blank_high      2   16[COMRAM] unsigned int 
  2407 ;;  blank_low       2   14[COMRAM] unsigned int 
  2408 ;;  result          2   12[COMRAM] unsigned int 
  2409 ;;  address_high    2   10[COMRAM] unsigned int 
  2410 ;;  address_low     2    8[COMRAM] unsigned int 
  2411 ;;  p2              2    6[COMRAM] unsigned int 
  2412 ;;  p1              2    4[COMRAM] unsigned int 
  2413 ;; Return value:  Size  Location     Type
  2414 ;;                  2    0[COMRAM] unsigned int 
  2415 ;; Registers used:
  2416 ;;		wreg, status,2, status,0
  2417 ;; Tracked objects:
  2418 ;;		On entry : 0/0
  2419 ;;		On exit  : 0/0
  2420 ;;		Unchanged: 0/0
  2421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2422 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2423 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2424 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2425 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2426 ;;Total ram usage:       22 bytes
  2427 ;; Hardware stack levels used:    1
  2428 ;; This function calls:
  2429 ;;		Nothing
  2430 ;; This function is called by:
  2431 ;;		_read_AD7147_interrupt
  2432 ;;		_read_sensor
  2433 ;;		_get_ID
  2434 ;;		_read_AD7147
  2435 ;; This function uses a non-reentrant model
  2436 ;;
  2437                           
  2438                           	psect	text13
  2439  007760                     __ptext13:
  2440                           	opt stack 0
  2441  007760                     _w16_r16_spi:
  2442                           	opt stack 28
  2443                           
  2444                           ;spi.c: 94: unsigned int address_low, address_high, result;
  2445                           ;spi.c: 95: unsigned int blank_low = 0x000;
  2446                           
  2447                           ;incstack = 0
  2448  007760  0E00               	movlw	0
  2449  007762  6E10               	movwf	w16_r16_spi@blank_low+1,c
  2450  007764  0E00               	movlw	0
  2451  007766  6E0F               	movwf	w16_r16_spi@blank_low,c
  2452                           
  2453                           ;spi.c: 96: unsigned int blank_high = 0x000;
  2454  007768  0E00               	movlw	0
  2455  00776A  6E12               	movwf	w16_r16_spi@blank_high+1,c
  2456  00776C  0E00               	movlw	0
  2457  00776E  6E11               	movwf	w16_r16_spi@blank_high,c
  2458                           
  2459                           ;spi.c: 97: unsigned int p1, p2, p3, p4;
  2460                           ;spi.c: 99: address_low = address & 0xFF;
  2461  007770  5001               	movf	w16_r16_spi@address,w,c
  2462  007772  6E09               	movwf	w16_r16_spi@address_low,c
  2463  007774  6A0A               	clrf	w16_r16_spi@address_low+1,c
  2464                           
  2465                           ;spi.c: 100: address_high = (address >> 8) & 0xFF;
  2466  007776  C001  F003         	movff	w16_r16_spi@address,??_w16_r16_spi
  2467  00777A  C002  F004         	movff	w16_r16_spi@address+1,??_w16_r16_spi+1
  2468  00777E  C004  F003         	movff	??_w16_r16_spi+1,??_w16_r16_spi
  2469  007782  6A04               	clrf	??_w16_r16_spi+1,c
  2470  007784  5003               	movf	??_w16_r16_spi,w,c
  2471  007786  6E0B               	movwf	w16_r16_spi@address_high,c
  2472  007788  6A0C               	clrf	w16_r16_spi@address_high+1,c
  2473                           
  2474                           ;spi.c: 102: SSPBUF = address_high;
  2475  00778A  C00B  FFC9         	movff	w16_r16_spi@address_high,4041	;volatile
  2476  00778E                     l200:
  2477  00778E  A0C7               	btfss	4039,0,c	;volatile
  2478  007790  D7FE               	goto	l200
  2479                           
  2480                           ;spi.c: 104: p1 = SSPBUF;
  2481  007792  CFC9 F005          	movff	4041,w16_r16_spi@p1	;volatile
  2482  007796  6A06               	clrf	w16_r16_spi@p1+1,c
  2483                           
  2484                           ;spi.c: 106: SSPBUF = address_low;
  2485  007798  C009  FFC9         	movff	w16_r16_spi@address_low,4041	;volatile
  2486  00779C                     l203:
  2487  00779C  A0C7               	btfss	4039,0,c	;volatile
  2488  00779E  D7FE               	goto	l203
  2489                           
  2490                           ;spi.c: 108: p2 = SSPBUF;
  2491  0077A0  CFC9 F007          	movff	4041,w16_r16_spi@p2	;volatile
  2492  0077A4  6A08               	clrf	w16_r16_spi@p2+1,c
  2493                           
  2494                           ;spi.c: 110: SSPBUF = blank_high;
  2495  0077A6  C011  FFC9         	movff	w16_r16_spi@blank_high,4041	;volatile
  2496  0077AA                     l206:
  2497  0077AA  A0C7               	btfss	4039,0,c	;volatile
  2498  0077AC  D7FE               	goto	l206
  2499                           
  2500                           ;spi.c: 112: p3 = SSPBUF;
  2501  0077AE  CFC9 F013          	movff	4041,w16_r16_spi@p3	;volatile
  2502  0077B2  6A14               	clrf	w16_r16_spi@p3+1,c
  2503                           
  2504                           ;spi.c: 114: SSPBUF = blank_low;
  2505  0077B4  C00F  FFC9         	movff	w16_r16_spi@blank_low,4041	;volatile
  2506  0077B8                     l209:
  2507  0077B8  A0C7               	btfss	4039,0,c	;volatile
  2508  0077BA  D7FE               	goto	l209
  2509                           
  2510                           ;spi.c: 116: p4 = SSPBUF;
  2511  0077BC  CFC9 F015          	movff	4041,w16_r16_spi@p4	;volatile
  2512  0077C0  6A16               	clrf	w16_r16_spi@p4+1,c
  2513                           
  2514                           ;spi.c: 118: result = (p3 << 8) + p4;
  2515  0077C2  5013               	movf	w16_r16_spi@p3,w,c
  2516  0077C4  6E04               	movwf	(??_w16_r16_spi+1)& (0+255),c
  2517  0077C6  6A03               	clrf	??_w16_r16_spi& (0+255),c
  2518  0077C8  5015               	movf	w16_r16_spi@p4,w,c
  2519  0077CA  2403               	addwf	??_w16_r16_spi,w,c
  2520  0077CC  6E0D               	movwf	w16_r16_spi@result,c
  2521  0077CE  5016               	movf	w16_r16_spi@p4+1,w,c
  2522  0077D0  2004               	addwfc	??_w16_r16_spi+1,w,c
  2523  0077D2  6E0E               	movwf	w16_r16_spi@result+1,c
  2524                           
  2525                           ;spi.c: 119: return result;
  2526  0077D4  C00D  F001         	movff	w16_r16_spi@result,?_w16_r16_spi
  2527  0077D8  C00E  F002         	movff	w16_r16_spi@result+1,?_w16_r16_spi+1
  2528  0077DC  0012               	return	
  2529  0077DE                     __end_of_w16_r16_spi:
  2530                           	opt stack 0
  2531                           postinc0	equ	0xFEE
  2532                           wreg	equ	0xFE8
  2533                           postinc2	equ	0xFDE
  2534                           postdec2	equ	0xFDD
  2535                           fsr2h	equ	0xFDA
  2536                           fsr2l	equ	0xFD9
  2537                           status	equ	0xFD8
  2538                           
  2539 ;; *************** function _blink_LED *****************
  2540 ;; Defined at:
  2541 ;;		line 357 in file "AD7147.c"
  2542 ;; Parameters:    Size  Location     Type
  2543 ;;  cdc             2   22[COMRAM] unsigned int 
  2544 ;; Auto vars:     Size  Location     Type
  2545 ;;  message         2   24[COMRAM] unsigned int 
  2546 ;; Return value:  Size  Location     Type
  2547 ;;                  1    wreg      void 
  2548 ;; Registers used:
  2549 ;;		wreg, status,2, status,0, cstack
  2550 ;; Tracked objects:
  2551 ;;		On entry : 0/0
  2552 ;;		On exit  : 0/0
  2553 ;;		Unchanged: 0/0
  2554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2555 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2556 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2558 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2559 ;;Total ram usage:        4 bytes
  2560 ;; Hardware stack levels used:    1
  2561 ;; Hardware stack levels required when called:    2
  2562 ;; This function calls:
  2563 ;;		_delay_ms
  2564 ;;		_get_CDC
  2565 ;;		_w32_spi
  2566 ;; This function is called by:
  2567 ;;		_main
  2568 ;; This function uses a non-reentrant model
  2569 ;;
  2570                           
  2571                           	psect	text14
  2572  0078E0                     __ptext14:
  2573                           	opt stack 0
  2574  0078E0                     _blink_LED:
  2575                           	opt stack 28
  2576                           
  2577                           ;AD7147.c: 359: get_CDC(cdc,0);
  2578                           
  2579                           ;incstack = 0
  2580  0078E0  C017  F001         	movff	blink_LED@cdc,get_CDC@cdc
  2581  0078E4  C018  F002         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  2582  0078E8  0E00               	movlw	0
  2583  0078EA  6E04               	movwf	get_CDC@state+1,c
  2584  0078EC  0E00               	movlw	0
  2585  0078EE  6E03               	movwf	get_CDC@state,c
  2586  0078F0  ECAD  F03A         	call	_get_CDC	;wreg free
  2587                           
  2588                           ;AD7147.c: 360: unsigned int message = 0b0010000000000000;
  2589  0078F4  0E20               	movlw	32
  2590  0078F6  6E1A               	movwf	blink_LED@message+1,c
  2591  0078F8  0E00               	movlw	0
  2592  0078FA  6E19               	movwf	blink_LED@message,c
  2593                           
  2594                           ;AD7147.c: 361: w32_spi((0xE000 + 0x005),message);
  2595  0078FC  0EE0               	movlw	224
  2596  0078FE  6E02               	movwf	w32_spi@address+1,c
  2597  007900  0E05               	movlw	5
  2598  007902  6E01               	movwf	w32_spi@address,c
  2599  007904  C019  F003         	movff	blink_LED@message,w32_spi@data
  2600  007908  C01A  F004         	movff	blink_LED@message+1,w32_spi@data+1
  2601  00790C  EC3B  F03B         	call	_w32_spi	;wreg free
  2602                           
  2603                           ;AD7147.c: 362: delay_ms(10);
  2604  007910  0E00               	movlw	0
  2605  007912  6E0A               	movwf	delay_ms@n+1,c
  2606  007914  0E0A               	movlw	10
  2607  007916  6E09               	movwf	delay_ms@n,c
  2608  007918  ECEF  F03A         	call	_delay_ms	;wreg free
  2609                           
  2610                           ;AD7147.c: 363: get_CDC(cdc,1);
  2611  00791C  C017  F001         	movff	blink_LED@cdc,get_CDC@cdc
  2612  007920  C018  F002         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  2613  007924  0E00               	movlw	0
  2614  007926  6E04               	movwf	get_CDC@state+1,c
  2615  007928  0E01               	movlw	1
  2616  00792A  6E03               	movwf	get_CDC@state,c
  2617  00792C  ECAD  F03A         	call	_get_CDC	;wreg free
  2618                           
  2619                           ;AD7147.c: 364: delay_ms(1000);
  2620  007930  0E03               	movlw	3
  2621  007932  6E0A               	movwf	delay_ms@n+1,c
  2622  007934  0EE8               	movlw	232
  2623  007936  6E09               	movwf	delay_ms@n,c
  2624  007938  ECEF  F03A         	call	_delay_ms	;wreg free
  2625                           
  2626                           ;AD7147.c: 365: get_CDC(cdc,0);
  2627  00793C  C017  F001         	movff	blink_LED@cdc,get_CDC@cdc
  2628  007940  C018  F002         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  2629  007944  0E00               	movlw	0
  2630  007946  6E04               	movwf	get_CDC@state+1,c
  2631  007948  0E00               	movlw	0
  2632  00794A  6E03               	movwf	get_CDC@state,c
  2633  00794C  ECAD  F03A         	call	_get_CDC	;wreg free
  2634                           
  2635                           ;AD7147.c: 366: unsigned int message = 0b0011000000000000;
  2636  007950  0E30               	movlw	48
  2637  007952  6E1A               	movwf	blink_LED@message+1,c
  2638  007954  0E00               	movlw	0
  2639  007956  6E19               	movwf	blink_LED@message,c
  2640                           
  2641                           ;AD7147.c: 367: w32_spi((0xE000 + 0x005),message);
  2642  007958  0EE0               	movlw	224
  2643  00795A  6E02               	movwf	w32_spi@address+1,c
  2644  00795C  0E05               	movlw	5
  2645  00795E  6E01               	movwf	w32_spi@address,c
  2646  007960  C019  F003         	movff	blink_LED@message,w32_spi@data
  2647  007964  C01A  F004         	movff	blink_LED@message+1,w32_spi@data+1
  2648  007968  EC3B  F03B         	call	_w32_spi	;wreg free
  2649                           
  2650                           ;AD7147.c: 368: delay_ms(10);
  2651  00796C  0E00               	movlw	0
  2652  00796E  6E0A               	movwf	delay_ms@n+1,c
  2653  007970  0E0A               	movlw	10
  2654  007972  6E09               	movwf	delay_ms@n,c
  2655  007974  ECEF  F03A         	call	_delay_ms	;wreg free
  2656                           
  2657                           ;AD7147.c: 369: get_CDC(cdc,1);
  2658  007978  C017  F001         	movff	blink_LED@cdc,get_CDC@cdc
  2659  00797C  C018  F002         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  2660  007980  0E00               	movlw	0
  2661  007982  6E04               	movwf	get_CDC@state+1,c
  2662  007984  0E01               	movlw	1
  2663  007986  6E03               	movwf	get_CDC@state,c
  2664  007988  ECAD  F03A         	call	_get_CDC	;wreg free
  2665  00798C  0012               	return		;funcret
  2666  00798E                     __end_of_blink_LED:
  2667                           	opt stack 0
  2668                           postinc0	equ	0xFEE
  2669                           wreg	equ	0xFE8
  2670                           postinc2	equ	0xFDE
  2671                           postdec2	equ	0xFDD
  2672                           fsr2h	equ	0xFDA
  2673                           fsr2l	equ	0xFD9
  2674                           status	equ	0xFD8
  2675                           
  2676 ;; *************** function _w32_spi *****************
  2677 ;; Defined at:
  2678 ;;		line 26 in file "spi.c"
  2679 ;; Parameters:    Size  Location     Type
  2680 ;;  address         2    0[COMRAM] unsigned int 
  2681 ;;  data            2    2[COMRAM] unsigned int 
  2682 ;; Auto vars:     Size  Location     Type
  2683 ;;  data_high       2   20[COMRAM] unsigned int 
  2684 ;;  data_low        2   18[COMRAM] unsigned int 
  2685 ;;  address_high    2   16[COMRAM] unsigned int 
  2686 ;;  address_low     2   14[COMRAM] unsigned int 
  2687 ;;  p4              2   12[COMRAM] unsigned int 
  2688 ;;  p3              2   10[COMRAM] unsigned int 
  2689 ;;  p2              2    8[COMRAM] unsigned int 
  2690 ;;  p1              2    6[COMRAM] unsigned int 
  2691 ;; Return value:  Size  Location     Type
  2692 ;;                  1    wreg      void 
  2693 ;; Registers used:
  2694 ;;		wreg, status,2
  2695 ;; Tracked objects:
  2696 ;;		On entry : 0/0
  2697 ;;		On exit  : 0/0
  2698 ;;		Unchanged: 0/0
  2699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2700 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2701 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2702 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2703 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2704 ;;Total ram usage:       22 bytes
  2705 ;; Hardware stack levels used:    1
  2706 ;; This function calls:
  2707 ;;		Nothing
  2708 ;; This function is called by:
  2709 ;;		_write_AD7147
  2710 ;;		_blink_LED
  2711 ;;		_switch_LED
  2712 ;; This function uses a non-reentrant model
  2713 ;;
  2714                           
  2715                           	psect	text15
  2716  007676                     __ptext15:
  2717                           	opt stack 0
  2718  007676                     _w32_spi:
  2719                           	opt stack 28
  2720                           
  2721                           ;spi.c: 28: unsigned int address_low, address_high, data_low, data_high;
  2722                           ;spi.c: 30: address_low = address & 0xFF;
  2723                           
  2724                           ;incstack = 0
  2725  007676  5001               	movf	w32_spi@address,w,c
  2726  007678  6E0F               	movwf	w32_spi@address_low,c
  2727  00767A  6A10               	clrf	w32_spi@address_low+1,c
  2728                           
  2729                           ;spi.c: 31: address_high = (address >> 8) & 0xFF;
  2730  00767C  C001  F005         	movff	w32_spi@address,??_w32_spi
  2731  007680  C002  F006         	movff	w32_spi@address+1,??_w32_spi+1
  2732  007684  C006  F005         	movff	??_w32_spi+1,??_w32_spi
  2733  007688  6A06               	clrf	??_w32_spi+1,c
  2734  00768A  5005               	movf	??_w32_spi,w,c
  2735  00768C  6E11               	movwf	w32_spi@address_high,c
  2736  00768E  6A12               	clrf	w32_spi@address_high+1,c
  2737                           
  2738                           ;spi.c: 33: data_low = data & 0xFF;
  2739  007690  5003               	movf	w32_spi@data,w,c
  2740  007692  6E13               	movwf	w32_spi@data_low,c
  2741  007694  6A14               	clrf	w32_spi@data_low+1,c
  2742                           
  2743                           ;spi.c: 34: data_high = (data >> 8) & 0xFF;
  2744  007696  C003  F005         	movff	w32_spi@data,??_w32_spi
  2745  00769A  C004  F006         	movff	w32_spi@data+1,??_w32_spi+1
  2746  00769E  C006  F005         	movff	??_w32_spi+1,??_w32_spi
  2747  0076A2  6A06               	clrf	??_w32_spi+1,c
  2748  0076A4  5005               	movf	??_w32_spi,w,c
  2749  0076A6  6E15               	movwf	w32_spi@data_high,c
  2750  0076A8  6A16               	clrf	w32_spi@data_high+1,c
  2751                           
  2752                           ;spi.c: 36: SSPBUF = address_high;
  2753  0076AA  C011  FFC9         	movff	w32_spi@address_high,4041	;volatile
  2754  0076AE                     l167:
  2755  0076AE  A0C7               	btfss	4039,0,c	;volatile
  2756  0076B0  D7FE               	goto	l167
  2757                           
  2758                           ;spi.c: 38: unsigned int p1 = SSPBUF;
  2759  0076B2  CFC9 F007          	movff	4041,w32_spi@p1	;volatile
  2760  0076B6  6A08               	clrf	w32_spi@p1+1,c
  2761                           
  2762                           ;spi.c: 40: SSPBUF = address_low;
  2763  0076B8  C00F  FFC9         	movff	w32_spi@address_low,4041	;volatile
  2764  0076BC                     l170:
  2765  0076BC  A0C7               	btfss	4039,0,c	;volatile
  2766  0076BE  D7FE               	goto	l170
  2767                           
  2768                           ;spi.c: 42: unsigned int p2 = SSPBUF;
  2769  0076C0  CFC9 F009          	movff	4041,w32_spi@p2	;volatile
  2770  0076C4  6A0A               	clrf	w32_spi@p2+1,c
  2771                           
  2772                           ;spi.c: 44: SSPBUF = data_high;
  2773  0076C6  C015  FFC9         	movff	w32_spi@data_high,4041	;volatile
  2774  0076CA                     l173:
  2775  0076CA  A0C7               	btfss	4039,0,c	;volatile
  2776  0076CC  D7FE               	goto	l173
  2777                           
  2778                           ;spi.c: 46: unsigned int p3 = SSPBUF;
  2779  0076CE  CFC9 F00B          	movff	4041,w32_spi@p3	;volatile
  2780  0076D2  6A0C               	clrf	w32_spi@p3+1,c
  2781                           
  2782                           ;spi.c: 48: SSPBUF = data_low;
  2783  0076D4  C013  FFC9         	movff	w32_spi@data_low,4041	;volatile
  2784  0076D8                     l176:
  2785  0076D8  A0C7               	btfss	4039,0,c	;volatile
  2786  0076DA  D7FE               	goto	l176
  2787                           
  2788                           ;spi.c: 50: unsigned int p4 = SSPBUF;
  2789  0076DC  CFC9 F00D          	movff	4041,w32_spi@p4	;volatile
  2790  0076E0  6A0E               	clrf	w32_spi@p4+1,c
  2791  0076E2  0012               	return		;funcret
  2792  0076E4                     __end_of_w32_spi:
  2793                           	opt stack 0
  2794                           postinc0	equ	0xFEE
  2795                           wreg	equ	0xFE8
  2796                           postinc2	equ	0xFDE
  2797                           postdec2	equ	0xFDD
  2798                           fsr2h	equ	0xFDA
  2799                           fsr2l	equ	0xFD9
  2800                           status	equ	0xFD8
  2801                           
  2802 ;; *************** function _get_CDC *****************
  2803 ;; Defined at:
  2804 ;;		line 371 in file "AD7147.c"
  2805 ;; Parameters:    Size  Location     Type
  2806 ;;  cdc             2    0[COMRAM] unsigned int 
  2807 ;;  state           2    2[COMRAM] unsigned int 
  2808 ;; Auto vars:     Size  Location     Type
  2809 ;;		None
  2810 ;; Return value:  Size  Location     Type
  2811 ;;                  1    wreg      void 
  2812 ;; Registers used:
  2813 ;;		wreg, status,2, status,0
  2814 ;; Tracked objects:
  2815 ;;		On entry : 0/0
  2816 ;;		On exit  : 0/0
  2817 ;;		Unchanged: 0/0
  2818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2819 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2822 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2823 ;;Total ram usage:        4 bytes
  2824 ;; Hardware stack levels used:    1
  2825 ;; This function calls:
  2826 ;;		Nothing
  2827 ;; This function is called by:
  2828 ;;		_setup_AD7147
  2829 ;;		_sensor_CDC
  2830 ;;		_get_ID
  2831 ;;		_blink_LED
  2832 ;;		_switch_LED
  2833 ;; This function uses a non-reentrant model
  2834 ;;
  2835                           
  2836                           	psect	text16
  2837  00755A                     __ptext16:
  2838                           	opt stack 0
  2839  00755A                     _get_CDC:
  2840                           	opt stack 29
  2841                           
  2842                           ;AD7147.c: 373: if (state == 1)
  2843                           
  2844                           ;incstack = 0
  2845  00755A  0403               	decf	get_CDC@state,w,c
  2846  00755C  1004               	iorwf	get_CDC@state+1,w,c
  2847  00755E  A4D8               	btfss	status,2,c
  2848  007560  D003               	goto	l1497
  2849                           
  2850                           ;AD7147.c: 374: {
  2851                           ;AD7147.c: 375: LATCbits.LATC1 = 1;
  2852  007562  828B               	bsf	3979,1,c	;volatile
  2853                           
  2854                           ;AD7147.c: 376: LATCbits.LATC0 = 1;
  2855  007564  808B               	bsf	3979,0,c	;volatile
  2856                           
  2857                           ;AD7147.c: 377: }
  2858  007566  0012               	return	
  2859  007568                     l1497:
  2860                           
  2861                           ;AD7147.c: 378: else
  2862                           ;AD7147.c: 379: {
  2863                           ;AD7147.c: 380: if (cdc == 1)
  2864  007568  0401               	decf	get_CDC@cdc,w,c
  2865  00756A  1002               	iorwf	get_CDC@cdc+1,w,c
  2866  00756C  A4D8               	btfss	status,2,c
  2867  00756E  D003               	goto	l83
  2868                           
  2869                           ;AD7147.c: 381: {
  2870                           ;AD7147.c: 382: LATCbits.LATC1 = 0;
  2871  007570  928B               	bcf	3979,1,c	;volatile
  2872                           
  2873                           ;AD7147.c: 383: LATCbits.LATC0 = 1;
  2874  007572  808B               	bsf	3979,0,c	;volatile
  2875                           
  2876                           ;AD7147.c: 384: }
  2877  007574  0012               	return	
  2878  007576                     l83:
  2879                           
  2880                           ;AD7147.c: 385: else
  2881                           ;AD7147.c: 386: {
  2882                           ;AD7147.c: 387: LATCbits.LATC0 = 0;
  2883  007576  908B               	bcf	3979,0,c	;volatile
  2884                           
  2885                           ;AD7147.c: 388: LATCbits.LATC1 = 1;
  2886  007578  828B               	bsf	3979,1,c	;volatile
  2887  00757A  0012               	return	
  2888  00757C                     __end_of_get_CDC:
  2889                           	opt stack 0
  2890                           postinc0	equ	0xFEE
  2891                           wreg	equ	0xFE8
  2892                           postinc2	equ	0xFDE
  2893                           postdec2	equ	0xFDD
  2894                           fsr2h	equ	0xFDA
  2895                           fsr2l	equ	0xFD9
  2896                           status	equ	0xFD8
  2897                           
  2898 ;; *************** function _delay_ms *****************
  2899 ;; Defined at:
  2900 ;;		line 67 in file "micro_setup.c"
  2901 ;; Parameters:    Size  Location     Type
  2902 ;;  n               2    8[COMRAM] int 
  2903 ;; Auto vars:     Size  Location     Type
  2904 ;;  j               2   11[COMRAM] int 
  2905 ;; Return value:  Size  Location     Type
  2906 ;;                  1    wreg      void 
  2907 ;; Registers used:
  2908 ;;		wreg, status,2, status,0, cstack
  2909 ;; Tracked objects:
  2910 ;;		On entry : 0/0
  2911 ;;		On exit  : 0/0
  2912 ;;		Unchanged: 0/0
  2913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2914 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2915 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2916 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2917 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2918 ;;Total ram usage:        5 bytes
  2919 ;; Hardware stack levels used:    1
  2920 ;; Hardware stack levels required when called:    1
  2921 ;; This function calls:
  2922 ;;		___awdiv
  2923 ;; This function is called by:
  2924 ;;		_blink_LED
  2925 ;;		_main
  2926 ;;		_switch_LED
  2927 ;; This function uses a non-reentrant model
  2928 ;;
  2929                           
  2930                           	psect	text17
  2931  0075DE                     __ptext17:
  2932                           	opt stack 0
  2933  0075DE                     _delay_ms:
  2934                           	opt stack 29
  2935                           
  2936                           ;micro_setup.c: 69: int j = n/10;
  2937                           
  2938                           ;incstack = 0
  2939  0075DE  C009  F001         	movff	delay_ms@n,___awdiv@dividend
  2940  0075E2  C00A  F002         	movff	delay_ms@n+1,___awdiv@dividend+1
  2941  0075E6  0E00               	movlw	0
  2942  0075E8  6E04               	movwf	___awdiv@divisor+1,c
  2943  0075EA  0E0A               	movlw	10
  2944  0075EC  6E03               	movwf	___awdiv@divisor,c
  2945  0075EE  EC2E  F03C         	call	___awdiv	;wreg free
  2946  0075F2  C001  F00C         	movff	?___awdiv,delay_ms@j
  2947  0075F6  C002  F00D         	movff	?___awdiv+1,delay_ms@j+1
  2948                           
  2949                           ;micro_setup.c: 70: while(j--)
  2950  0075FA  D008               	goto	l1589
  2951  0075FC                     l1587:
  2952                           
  2953                           ;micro_setup.c: 71: {
  2954                           ;micro_setup.c: 72: _delay((unsigned long)((10)*(8000000/4000.0)));
  2955  0075FC  0E1A               	movlw	26
  2956  0075FE  6E0B               	movwf	??_delay_ms& (0+255),c
  2957  007600  0EF8               	movlw	248
  2958  007602                     u797:
  2959  007602  2EE8               	decfsz	wreg,f,c
  2960  007604  D7FE               	bra	u797
  2961  007606  2E0B               	decfsz	??_delay_ms& (0+255),f,c
  2962  007608  D7FC               	bra	u797
  2963  00760A  D000               	nop2	
  2964  00760C                     l1589:
  2965  00760C  060C               	decf	delay_ms@j,f,c
  2966  00760E  A0D8               	btfss	status,0,c
  2967  007610  060D               	decf	delay_ms@j+1,f,c
  2968  007612  280C               	incf	delay_ms@j,w,c
  2969  007614  E1F3               	bnz	l1587
  2970  007616  280D               	incf	delay_ms@j+1,w,c
  2971  007618  B4D8               	btfsc	status,2,c
  2972  00761A  0012               	return	
  2973  00761C  D7EF               	goto	l1587
  2974  00761E                     __end_of_delay_ms:
  2975                           	opt stack 0
  2976                           postinc0	equ	0xFEE
  2977                           wreg	equ	0xFE8
  2978                           postinc2	equ	0xFDE
  2979                           postdec2	equ	0xFDD
  2980                           fsr2h	equ	0xFDA
  2981                           fsr2l	equ	0xFD9
  2982                           status	equ	0xFD8
  2983                           
  2984 ;; *************** function ___awdiv *****************
  2985 ;; Defined at:
  2986 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  2987 ;; Parameters:    Size  Location     Type
  2988 ;;  dividend        2    0[COMRAM] int 
  2989 ;;  divisor         2    2[COMRAM] int 
  2990 ;; Auto vars:     Size  Location     Type
  2991 ;;  quotient        2    6[COMRAM] int 
  2992 ;;  sign            1    5[COMRAM] unsigned char 
  2993 ;;  counter         1    4[COMRAM] unsigned char 
  2994 ;; Return value:  Size  Location     Type
  2995 ;;                  2    0[COMRAM] int 
  2996 ;; Registers used:
  2997 ;;		wreg, status,2, status,0
  2998 ;; Tracked objects:
  2999 ;;		On entry : 0/0
  3000 ;;		On exit  : 0/0
  3001 ;;		Unchanged: 0/0
  3002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3003 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3004 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3006 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3007 ;;Total ram usage:        8 bytes
  3008 ;; Hardware stack levels used:    1
  3009 ;; This function calls:
  3010 ;;		Nothing
  3011 ;; This function is called by:
  3012 ;;		_delay_ms
  3013 ;; This function uses a non-reentrant model
  3014 ;;
  3015                           
  3016                           	psect	text18
  3017  00785C                     __ptext18:
  3018                           	opt stack 0
  3019  00785C                     ___awdiv:
  3020                           	opt stack 29
  3021                           
  3022                           ;incstack = 0
  3023  00785C  0E00               	movlw	0
  3024  00785E  6E06               	movwf	___awdiv@sign,c
  3025  007860  AE04               	btfss	___awdiv@divisor+1,7,c
  3026  007862  D006               	goto	l1523
  3027  007864  6C03               	negf	___awdiv@divisor,c
  3028  007866  1E04               	comf	___awdiv@divisor+1,f,c
  3029  007868  B0D8               	btfsc	status,0,c
  3030  00786A  2A04               	incf	___awdiv@divisor+1,f,c
  3031  00786C  0E01               	movlw	1
  3032  00786E  6E06               	movwf	___awdiv@sign,c
  3033  007870                     l1523:
  3034  007870  AE02               	btfss	___awdiv@dividend+1,7,c
  3035  007872  D006               	goto	l1529
  3036  007874  6C01               	negf	___awdiv@dividend,c
  3037  007876  1E02               	comf	___awdiv@dividend+1,f,c
  3038  007878  B0D8               	btfsc	status,0,c
  3039  00787A  2A02               	incf	___awdiv@dividend+1,f,c
  3040  00787C  0E01               	movlw	1
  3041  00787E  1A06               	xorwf	___awdiv@sign,f,c
  3042  007880                     l1529:
  3043  007880  0E00               	movlw	0
  3044  007882  6E08               	movwf	___awdiv@quotient+1,c
  3045  007884  0E00               	movlw	0
  3046  007886  6E07               	movwf	___awdiv@quotient,c
  3047  007888  5003               	movf	___awdiv@divisor,w,c
  3048  00788A  1004               	iorwf	___awdiv@divisor+1,w,c
  3049  00788C  B4D8               	btfsc	status,2,c
  3050  00788E  D01C               	goto	l1551
  3051  007890  0E01               	movlw	1
  3052  007892  6E05               	movwf	___awdiv@counter,c
  3053  007894  D004               	goto	l1537
  3054  007896                     l1535:
  3055  007896  90D8               	bcf	status,0,c
  3056  007898  3603               	rlcf	___awdiv@divisor,f,c
  3057  00789A  3604               	rlcf	___awdiv@divisor+1,f,c
  3058  00789C  2A05               	incf	___awdiv@counter,f,c
  3059  00789E                     l1537:
  3060  00789E  AE04               	btfss	___awdiv@divisor+1,7,c
  3061  0078A0  D7FA               	goto	l1535
  3062  0078A2                     l1539:
  3063  0078A2  90D8               	bcf	status,0,c
  3064  0078A4  3607               	rlcf	___awdiv@quotient,f,c
  3065  0078A6  3608               	rlcf	___awdiv@quotient+1,f,c
  3066  0078A8  5003               	movf	___awdiv@divisor,w,c
  3067  0078AA  5C01               	subwf	___awdiv@dividend,w,c
  3068  0078AC  5004               	movf	___awdiv@divisor+1,w,c
  3069  0078AE  5802               	subwfb	___awdiv@dividend+1,w,c
  3070  0078B0  A0D8               	btfss	status,0,c
  3071  0078B2  D005               	goto	l1547
  3072  0078B4  5003               	movf	___awdiv@divisor,w,c
  3073  0078B6  5E01               	subwf	___awdiv@dividend,f,c
  3074  0078B8  5004               	movf	___awdiv@divisor+1,w,c
  3075  0078BA  5A02               	subwfb	___awdiv@dividend+1,f,c
  3076  0078BC  8007               	bsf	___awdiv@quotient,0,c
  3077  0078BE                     l1547:
  3078  0078BE  90D8               	bcf	status,0,c
  3079  0078C0  3204               	rrcf	___awdiv@divisor+1,f,c
  3080  0078C2  3203               	rrcf	___awdiv@divisor,f,c
  3081  0078C4  2E05               	decfsz	___awdiv@counter,f,c
  3082  0078C6  D7ED               	goto	l1539
  3083  0078C8                     l1551:
  3084  0078C8  5006               	movf	___awdiv@sign,w,c
  3085  0078CA  B4D8               	btfsc	status,2,c
  3086  0078CC  D004               	goto	l1555
  3087  0078CE  6C07               	negf	___awdiv@quotient,c
  3088  0078D0  1E08               	comf	___awdiv@quotient+1,f,c
  3089  0078D2  B0D8               	btfsc	status,0,c
  3090  0078D4  2A08               	incf	___awdiv@quotient+1,f,c
  3091  0078D6                     l1555:
  3092  0078D6  C007  F001         	movff	___awdiv@quotient,?___awdiv
  3093  0078DA  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  3094  0078DE  0012               	return	
  3095  0078E0                     __end_of___awdiv:
  3096                           	opt stack 0
  3097  0000                     postinc0	equ	0xFEE
  3098                           wreg	equ	0xFE8
  3099                           postinc2	equ	0xFDE
  3100                           postdec2	equ	0xFDD
  3101                           fsr2h	equ	0xFDA
  3102                           fsr2l	equ	0xFD9
  3103                           status	equ	0xFD8
  3104                           postinc0	equ	0xFEE
  3105                           wreg	equ	0xFE8
  3106                           postinc2	equ	0xFDE
  3107                           postdec2	equ	0xFDD
  3108                           fsr2h	equ	0xFDA
  3109                           fsr2l	equ	0xFD9
  3110                           status	equ	0xFD8
  3111                           
  3112                           	psect	rparam
  3113  0000                     postinc0	equ	0xFEE
  3114                           wreg	equ	0xFE8
  3115                           postinc2	equ	0xFDE
  3116                           postdec2	equ	0xFDD
  3117                           fsr2h	equ	0xFDA
  3118                           fsr2l	equ	0xFD9
  3119                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         24
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     87      87
    BANK0           160      0      24
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    CDC_RESULT	PTR unsigned int [12] size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    write_AD7147@DataBuffer	PTR unsigned int  size(2) Largest target is 16
		 -> setup_AD7147@AD7147Registers(COMRAM[16]), setup_AD7147@StageBuffer(COMRAM[16]), 


Critical Paths under _main in COMRAM

    _main->_setup_AD7147
    _setup_AD7147->_write_AD7147
    _write_AD7147->_w32_spi
    _read_AD7147_interrupt->_w16_r16_spi
    _read_sensor->_w16_r16_spi
    _sensor_CDC->_get_CDC
    _get_ID->_w16_r16_spi
    _blink_LED->_w32_spi
    _delay_ms->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0   22287
                                             78 COMRAM     9     9      0
                          _blink_LED
                           _delay_ms
                             _get_ID
                        _read_sensor
                       _setup_AD7147
                          _setup_mcu
                          _setup_spi
                    _uart_write_char
            _uart_write_unsigned_int
 ---------------------------------------------------------------------------------
 (1) _uart_write_unsigned_int                              4     2      2     394
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _uart_write_char                                      1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setup_spi                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_mcu                                            0     0      0       0
                          _init_uart
                         _setup_port
 ---------------------------------------------------------------------------------
 (2) _setup_port                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_uart                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_AD7147                                        40    38      2   11111
                                             38 COMRAM    40    38      2
                            _get_CDC
              _read_AD7147_interrupt
                       _write_AD7147
 ---------------------------------------------------------------------------------
 (2) _write_AD7147                                        16     8      8    5708
                                             22 COMRAM    16     8      8
                            _w32_spi
 ---------------------------------------------------------------------------------
 (2) _read_AD7147_interrupt                                6     4      2     807
                                             22 COMRAM     6     4      2
                        _w16_r16_spi
 ---------------------------------------------------------------------------------
 (1) _read_sensor                                          8     6      2    3082
                                             22 COMRAM     8     6      2
                         _sensor_CDC
                        _w16_r16_spi
 ---------------------------------------------------------------------------------
 (2) _sensor_CDC                                           4     0      4    2238
                                              4 COMRAM     4     0      4
                            _get_CDC
 ---------------------------------------------------------------------------------
 (1) _get_ID                                               5     3      2    2522
                                             22 COMRAM     5     3      2
                            _get_CDC
                        _w16_r16_spi
 ---------------------------------------------------------------------------------
 (3) _w16_r16_spi                                         22    20      2     511
                                              0 COMRAM    22    20      2
 ---------------------------------------------------------------------------------
 (1) _blink_LED                                            4     2      2    4051
                                             22 COMRAM     4     2      2
                           _delay_ms
                            _get_CDC
                            _w32_spi
 ---------------------------------------------------------------------------------
 (3) _w32_spi                                             22    18      4     944
                                              0 COMRAM    22    18      4
 ---------------------------------------------------------------------------------
 (2) _get_CDC                                              4     0      4    1868
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             5     3      2     953
                                              8 COMRAM     5     3      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _blink_LED
     _delay_ms
       ___awdiv
     _get_CDC
     _w32_spi
   _delay_ms
     ___awdiv
   _get_ID
     _get_CDC
     _w16_r16_spi
   _read_sensor
     _sensor_CDC
       _get_CDC
     _w16_r16_spi
   _setup_AD7147
     _get_CDC
     _read_AD7147_interrupt
       _w16_r16_spi
     _write_AD7147
       _w32_spi
   _setup_mcu
     _init_uart
     _setup_port
   _setup_spi
   _uart_write_char
   _uart_write_unsigned_int

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      18       5       15.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     57      57       1       91.6%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      6F       6        0.0%
DATA                 0      0      6F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Mon Jul 31 16:43:17 2017

                         _SSPSTATbits 000FC7                                    l41 7706  
                                  l83 7576                          ___awdiv@sign 0006  
                        __CFG_CP0$OFF 000000                                   l200 778E  
                                 l203 779C                                   l206 77AA  
                                 l209 77B8                                   l170 76BC  
                                 l234 74EA                                   l173 76CA  
                                 l246 7548                                   l167 76AE  
                                 l176 76D8                                   l249 7550  
                                 u700 76F8                                   u715 7642  
                                 u680 75B2                                   u797 7602  
            setup_AD7147@int_complete 002D                                   wreg 000FE8  
                          _TXSTA1bits 000FAC                     write_AD7147@index 001D  
         write_AD7147@RegisterAddress 0017                                  l1523 7870  
                                l1535 7896                                  l1551 78C8  
                                l1537 789E                                  l1529 7880  
                                l1561 77F8                                  l1555 78D6  
                                l1547 78BE                                  l1539 78A2  
                                l1583 75C8                                  l1497 7568  
                                l1569 784E                                  l1587 75FC  
                                l1589 760C                                  l1845 770E  
                                l1937 7A0C                                  l1929 79DE  
                                l1955 7A74                                  l1949 7A5A  
                                _main 798E                                  fsr2l 000FD9  
    __size_of_uart_write_unsigned_int 001A                                  start 0000  
                       ??_w16_r16_spi 0003                         __CFG_IESO$OFF 000000  
                       __CFG_FOSC$HS1 000000                          ___param_bank 000000  
                     __end_of_w32_spi 76E4              __size_of_uart_write_char 000C  
                               ?_main 0001                       __end_of___awdiv 78E0  
                     ___awdiv@divisor 0003                                 _RC1IF 007CF5  
               w16_r16_spi@blank_high 0011                       ___awdiv@counter 0005  
                               _TRISB 000F93                                 _TRISC 000F94  
                     __end_of_get_CDC 757C                        __CFG_FCMEN$OFF 000000  
               __size_of_write_AD7147 007E                          ?_read_sensor 0017  
                        main@sensor_1 0053                          main@sensor_2 0055  
                               status 000FD8                w16_r16_spi@address_low 0009  
         setup_AD7147@AD7147Registers 002F                       __initialization 7504  
                        __end_of_main 7A82                   __end_of_w16_r16_spi 77DE  
                        _write_AD7147 77DE                                ??_main 004F  
                       main@device_ID 0051                         __activetblptr 000000  
                    ___awdiv@dividend 0001                           w32_spi@data 0003  
                       main@indicator 0057  read_AD7147_interrupt@interrupt_clear 001B  
                      __CFG_WDTEN$OFF 000000                                _RCREG1 000FAE  
                              _SPBRG1 000FAF                                _SSPBUF 000FC9  
                              _TXREG1 000FAD                                _TXSTA1 000FAC  
                    __end_of_delay_ms 761E                             ??_w32_spi 0005  
                      __CFG_XINST$OFF 000000                             ??___awdiv 0005  
                      __CFG_STVREN$ON 000000                                _get_ID 761E  
                              clear_0 750A                      ___awdiv@quotient 0007  
                           ??_get_CDC 0005                                main@bb 004F  
          write_AD7147@Register_Value 0021                     ??_uart_write_char 0001  
      __size_of_read_AD7147_interrupt 002A         __end_of_read_AD7147_interrupt 75A6  
             w16_r16_spi@address_high 000B               _uart_write_unsigned_int 7540  
                          __accesstop 0060               __end_of__initialization 7510  
                       ___rparam_used 000001                           _w16_r16_spi 7760  
                      __pcstackCOMRAM 0001                    __size_of_blink_LED 00AE  
                          __pbssBANK0 0060                  __size_of_read_sensor 007C  
                  __size_of_init_uart 0014                               ?_get_ID 0017  
                    __CFG_CANMX$PORTB 000000                    __size_of_setup_mcu 000A  
                  __size_of_setup_spi 0016                             ?_delay_ms 0009  
                       w16_r16_spi@p1 0005                         w16_r16_spi@p2 0007  
                       w16_r16_spi@p3 0013                         w16_r16_spi@p4 0015  
           ??_uart_write_unsigned_int 0003                     __end_of_blink_LED 798E  
                             _w32_spi 7676                               __Hparam 0000  
                             __Lparam 0000                               ___awdiv 785C  
                     __size_of_get_ID 0058                       sensor_CDC@state 0007  
                             __pcinit 7504                               _get_CDC 755A  
                             __ramtop 0F00                               __ptext0 798E  
                             __ptext1 7540                               __ptext2 74E8  
                             __ptext3 752A                               __ptext4 74DE  
                             __ptext5 74F4                               __ptext6 7516  
                             __ptext7 7A82                               __ptext8 77DE  
                             __ptext9 757C                        w32_spi@address 0001  
                   __end_of_init_uart 752A                            ??_delay_ms 000B  
                          get_CDC@cdc 0001                  end_of_initialization 7510  
                       ?_setup_AD7147 0027                     __end_of_setup_mcu 74E8  
                   __end_of_setup_spi 7540                               postdec2 000FDD  
     __end_of_uart_write_unsigned_int 755A                               postinc0 000FEE  
                             postinc2 000FDE                            _sensor_CDC 75A6  
                     _uart_write_char 74E8                            _setup_port 74F4  
                      ??_setup_AD7147 0029                 read_sensor@cdc_sensor 001D  
                        ?_w16_r16_spi 0001                             w32_spi@p1 0007  
                           w32_spi@p2 0009                             w32_spi@p3 000B  
                           w32_spi@p4 000D                  w16_r16_spi@blank_low 000F  
                      __end_of_get_ID 7676                   w32_spi@address_high 0011  
                 start_initialization 7504                   uart_write_char@data 0001  
               _read_AD7147_interrupt 757C               __end_of_uart_write_char 74F4  
             setup_AD7147@StageBuffer 003F                           ?_sensor_CDC 0005  
                            ??_get_ID 0019                           ?_setup_port 0001  
              write_AD7147@DataBuffer 001B                         ??_read_sensor 0019  
                   __size_of_delay_ms 0040                write_AD7147@Data_Value 0023  
                            ?_w32_spi 0001                             _blink_LED 78E0  
                            ?___awdiv 0001                  __end_of_setup_AD7147 8000  
                            ?_get_CDC 0001                         ?_write_AD7147 0017  
                            _BAUDCON1 000FA7          uart_write_unsigned_int@char1 0003  
        uart_write_unsigned_int@char2 0004                      w32_spi@data_high 0015  
                           _init_uart 7516                   __size_of_sensor_CDC 0038  
              ?_read_AD7147_interrupt 0017                              _LATCbits 000F8B  
                           delay_ms@j 000C                             delay_ms@n 0009  
                 __end_of_read_sensor 7760         write_AD7147@NumberOfRegisters 0019  
                           get_ID@cdc 0017                              _PIE1bits 000F9D  
                 __size_of_setup_port 0010                      ?_uart_write_char 0001  
                            _PIR1bits 000F9E                            ?_blink_LED 0017  
                __size_of_w16_r16_spi 007E                             _setup_mcu 74DE  
                           _setup_spi 752A                        ??_write_AD7147 001F  
                     setup_AD7147@cdc 0027                          get_CDC@state 0003  
                    __CFG_SOSCSEL$DIG 000000              ?_uart_write_unsigned_int 0001  
                          ?_init_uart 0001                    w32_spi@address_low 000F  
                          _CDC_RESULT 0060                              __Hrparam 0000  
                        get_ID@result 001A                      __size_of_w32_spi 006E  
                            __Lrparam 0000                          blink_LED@cdc 0017  
             read_sensor@sensor_value 001B                      __size_of___awdiv 0084  
                          ?_setup_mcu 0001                            ?_setup_spi 0001  
                    __size_of_get_CDC 0022                      sensor_CDC@sensor 0005  
                            _delay_ms 75DE                  read_sensor@register1 0019  
                            __ptext10 76E4                              __ptext11 75A6  
                            __ptext12 761E                              __ptext13 7760  
                            __ptext14 78E0                              __ptext15 7676  
                            __ptext16 755A                              __ptext17 75DE  
                            __ptext18 785C                           _read_sensor 76E4  
                       __size_of_main 00F4                       w32_spi@data_low 0013  
                   read_sensor@sensor 0017                           ??_blink_LED 0019  
               __size_of_setup_AD7147 057E                          ??_sensor_CDC 0009  
                       write_AD7147@i 0025                    w16_r16_spi@address 0001  
                        ??_setup_port 0001                           ??_init_uart 0001  
read_AD7147_interrupt@RegisterAddress 0017                    __end_of_sensor_CDC 75DE  
                __end_of_write_AD7147 785C                          _setup_AD7147 7A82  
                          _RCSTA1bits 000FAB  read_AD7147_interrupt@Register_Values 0019  
                  __end_of_setup_port 7504                           ??_setup_mcu 0001  
                         ??_setup_spi 0001                     w16_r16_spi@result 000D  
                         _SSPCON1bits 000FC6               ??_read_AD7147_interrupt 0019  
                    blink_LED@message 0019         uart_write_unsigned_int@number 0001  
                 setup_AD7147@int_low 0029                  setup_AD7147@int_high 002B  
