

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Thu Jul 27 02:39:28 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F25K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    27                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    28  0000                     
    29                           ; Version 1.42
    30                           ; Generated 13/04/2017 GMT
    31                           ; 
    32                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC18F25K80 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     _RCREG1	set	4014
    64  0000                     _PIR1bits	set	3998
    65  0000                     _TXREG1	set	4013
    66  0000                     _TXSTA1bits	set	4012
    67  0000                     _PIE1bits	set	3997
    68  0000                     _SSPCON1bits	set	4038
    69  0000                     _RCSTA1bits	set	4011
    70  0000                     _BAUDCON1	set	4007
    71  0000                     _SPBRG1	set	4015
    72  0000                     _TXSTA1	set	4012
    73  0000                     _TRISC	set	3988
    74  0000                     _TRISB	set	3987
    75  0000                     _PORTBbits	set	3969
    76  0000                     _SSPSTATbits	set	4039
    77  0000                     _SSPBUF	set	4041
    78  0000                     _LATCbits	set	3979
    79  0000                     _RC1IF	set	31989
    80                           
    81                           ; #config settings
    82  0000                     
    83                           	psect	cinit
    84  0074A4                     __pcinit:
    85                           	opt stack 0
    86  0074A4                     start_initialization:
    87                           	opt stack 0
    88  0074A4                     __initialization:
    89                           	opt stack 0
    90                           
    91                           ; Clear objects allocated to BANK0 (24 bytes)
    92  0074A4  EE00  F089         	lfsr	0,__pbssBANK0
    93  0074A8  0E18               	movlw	24
    94  0074AA                     clear_0:
    95  0074AA  6AEE               	clrf	postinc0,c
    96  0074AC  06E8               	decf	wreg,f,c
    97  0074AE  E1FD               	bnz	clear_0
    98  0074B0                     end_of_initialization:
    99                           	opt stack 0
   100  0074B0                     __end_of__initialization:
   101                           	opt stack 0
   102  0074B0  0100               	movlb	0
   103  0074B2  EF27  F03C         	goto	_main	;jump to C main() function
   104                           postinc0	equ	0xFEE
   105                           wreg	equ	0xFE8
   106                           
   107                           	psect	bssBANK0
   108  000089                     __pbssBANK0:
   109                           	opt stack 0
   110  000089                     _CDC_RESULT:
   111                           	opt stack 0
   112  000089                     	ds	24
   113                           postinc0	equ	0xFEE
   114                           wreg	equ	0xFE8
   115                           
   116                           	psect	cstackBANK0
   117  000060                     __pcstackBANK0:
   118                           	opt stack 0
   119  000060                     main@int_ready:
   120                           	opt stack 0
   121                           
   122                           ; 2 bytes @ 0x0
   123  000060                     	ds	2
   124  000062                     main@stage_0:
   125                           	opt stack 0
   126                           
   127                           ; 2 bytes @ 0x2
   128  000062                     	ds	2
   129  000064                     main@stage_1:
   130                           	opt stack 0
   131                           
   132                           ; 2 bytes @ 0x4
   133  000064                     	ds	2
   134  000066                     main@stage_2:
   135                           	opt stack 0
   136                           
   137                           ; 2 bytes @ 0x6
   138  000066                     	ds	2
   139  000068                     main@stage_3:
   140                           	opt stack 0
   141                           
   142                           ; 2 bytes @ 0x8
   143  000068                     	ds	2
   144  00006A                     main@sensor_1:
   145                           	opt stack 0
   146                           
   147                           ; 2 bytes @ 0xA
   148  00006A                     	ds	2
   149  00006C                     main@sensor_2:
   150                           	opt stack 0
   151                           
   152                           ; 2 bytes @ 0xC
   153  00006C                     	ds	2
   154  00006E                     main@sensor_3:
   155                           	opt stack 0
   156                           
   157                           ; 2 bytes @ 0xE
   158  00006E                     	ds	2
   159  000070                     main@sensor_4:
   160                           	opt stack 0
   161                           
   162                           ; 2 bytes @ 0x10
   163  000070                     	ds	2
   164  000072                     main@power_mode:
   165                           	opt stack 0
   166                           
   167                           ; 2 bytes @ 0x12
   168  000072                     	ds	2
   169  000074                     main@register1:
   170                           	opt stack 0
   171                           
   172                           ; 2 bytes @ 0x14
   173  000074                     	ds	2
   174  000076                     main@register2:
   175                           	opt stack 0
   176                           
   177                           ; 2 bytes @ 0x16
   178  000076                     	ds	2
   179  000078                     main@register3:
   180                           	opt stack 0
   181                           
   182                           ; 2 bytes @ 0x18
   183  000078                     	ds	2
   184  00007A                     main@register4:
   185                           	opt stack 0
   186                           
   187                           ; 2 bytes @ 0x1A
   188  00007A                     	ds	2
   189  00007C                     main@device_ID:
   190                           	opt stack 0
   191                           
   192                           ; 2 bytes @ 0x1C
   193  00007C                     	ds	2
   194  00007E                     main@int_complete:
   195                           	opt stack 0
   196                           
   197                           ; 2 bytes @ 0x1E
   198  00007E                     	ds	2
   199  000080                     main@bb:
   200                           	opt stack 0
   201                           
   202                           ; 2 bytes @ 0x20
   203  000080                     	ds	2
   204  000082                     main@int_read:
   205                           	opt stack 0
   206                           
   207                           ; 2 bytes @ 0x22
   208  000082                     	ds	2
   209  000084                     main@int_low:
   210                           	opt stack 0
   211                           
   212                           ; 2 bytes @ 0x24
   213  000084                     	ds	2
   214  000086                     main@int_high:
   215                           	opt stack 0
   216                           
   217                           ; 2 bytes @ 0x26
   218  000086                     	ds	2
   219  000088                     main@indicator:
   220                           	opt stack 0
   221                           
   222                           ; 1 bytes @ 0x28
   223  000088                     	ds	1
   224                           postinc0	equ	0xFEE
   225                           wreg	equ	0xFE8
   226                           
   227                           	psect	cstackCOMRAM
   228  000001                     __pcstackCOMRAM:
   229                           	opt stack 0
   230  000001                     ?_w16_r16_spi:
   231                           	opt stack 0
   232  000001                     ?___awdiv:
   233                           	opt stack 0
   234  000001                     uart_write_char@data:
   235                           	opt stack 0
   236  000001                     get_CDC@cdc:
   237                           	opt stack 0
   238  000001                     w32_spi@address:
   239                           	opt stack 0
   240  000001                     w16_r16_spi@address:
   241                           	opt stack 0
   242  000001                     uart_write_unsigned_int@number:
   243                           	opt stack 0
   244  000001                     ___awdiv@dividend:
   245                           	opt stack 0
   246                           
   247                           ; 2 bytes @ 0x0
   248  000001                     	ds	2
   249  000003                     ??_w16_r16_spi:
   250  000003                     uart_write_unsigned_int@char1:
   251                           	opt stack 0
   252  000003                     get_CDC@state:
   253                           	opt stack 0
   254  000003                     w32_spi@data:
   255                           	opt stack 0
   256  000003                     ___awdiv@divisor:
   257                           	opt stack 0
   258                           
   259                           ; 2 bytes @ 0x2
   260  000003                     	ds	1
   261  000004                     uart_write_unsigned_int@char2:
   262                           	opt stack 0
   263                           
   264                           ; 1 bytes @ 0x3
   265  000004                     	ds	1
   266  000005                     ??_w32_spi:
   267  000005                     ___awdiv@counter:
   268                           	opt stack 0
   269  000005                     w16_r16_spi@p1:
   270                           	opt stack 0
   271                           
   272                           ; 2 bytes @ 0x4
   273  000005                     	ds	1
   274  000006                     ___awdiv@sign:
   275                           	opt stack 0
   276                           
   277                           ; 1 bytes @ 0x5
   278  000006                     	ds	1
   279  000007                     w32_spi@p1:
   280                           	opt stack 0
   281  000007                     w16_r16_spi@p2:
   282                           	opt stack 0
   283  000007                     ___awdiv@quotient:
   284                           	opt stack 0
   285                           
   286                           ; 2 bytes @ 0x6
   287  000007                     	ds	2
   288  000009                     delay_ms@n:
   289                           	opt stack 0
   290  000009                     w32_spi@p2:
   291                           	opt stack 0
   292  000009                     w16_r16_spi@address_low:
   293                           	opt stack 0
   294                           
   295                           ; 2 bytes @ 0x8
   296  000009                     	ds	2
   297  00000B                     ??_delay_ms:
   298  00000B                     w32_spi@p3:
   299                           	opt stack 0
   300  00000B                     w16_r16_spi@address_high:
   301                           	opt stack 0
   302                           
   303                           ; 2 bytes @ 0xA
   304  00000B                     	ds	1
   305  00000C                     delay_ms@j:
   306                           	opt stack 0
   307                           
   308                           ; 2 bytes @ 0xB
   309  00000C                     	ds	1
   310  00000D                     w32_spi@p4:
   311                           	opt stack 0
   312  00000D                     w16_r16_spi@result:
   313                           	opt stack 0
   314                           
   315                           ; 2 bytes @ 0xC
   316  00000D                     	ds	2
   317  00000F                     w32_spi@address_low:
   318                           	opt stack 0
   319  00000F                     w16_r16_spi@blank_low:
   320                           	opt stack 0
   321                           
   322                           ; 2 bytes @ 0xE
   323  00000F                     	ds	2
   324  000011                     w32_spi@address_high:
   325                           	opt stack 0
   326  000011                     w16_r16_spi@blank_high:
   327                           	opt stack 0
   328                           
   329                           ; 2 bytes @ 0x10
   330  000011                     	ds	2
   331  000013                     w32_spi@data_low:
   332                           	opt stack 0
   333  000013                     w16_r16_spi@p3:
   334                           	opt stack 0
   335                           
   336                           ; 2 bytes @ 0x12
   337  000013                     	ds	2
   338  000015                     w32_spi@data_high:
   339                           	opt stack 0
   340  000015                     w16_r16_spi@p4:
   341                           	opt stack 0
   342                           
   343                           ; 2 bytes @ 0x14
   344  000015                     	ds	2
   345  000017                     ?_read_AD7147_interrupt:
   346                           	opt stack 0
   347  000017                     ?_get_ID:
   348                           	opt stack 0
   349  000017                     write_AD7147@RegisterAddress:
   350                           	opt stack 0
   351  000017                     read_AD7147_interrupt@RegisterAddress:
   352                           	opt stack 0
   353  000017                     get_ID@cdc:
   354                           	opt stack 0
   355  000017                     blink_LED@cdc:
   356                           	opt stack 0
   357                           
   358                           ; 2 bytes @ 0x16
   359  000017                     	ds	2
   360  000019                     ??_get_ID:
   361  000019                     write_AD7147@NumberOfRegisters:
   362                           	opt stack 0
   363  000019                     read_AD7147_interrupt@Register_Values:
   364                           	opt stack 0
   365  000019                     blink_LED@message:
   366                           	opt stack 0
   367                           
   368                           ; 2 bytes @ 0x18
   369  000019                     	ds	1
   370  00001A                     get_ID@result:
   371                           	opt stack 0
   372                           
   373                           ; 2 bytes @ 0x19
   374  00001A                     	ds	1
   375  00001B                     write_AD7147@DataBuffer:
   376                           	opt stack 0
   377  00001B                     read_AD7147_interrupt@interrupt_clear:
   378                           	opt stack 0
   379                           
   380                           ; 2 bytes @ 0x1A
   381  00001B                     	ds	2
   382  00001D                     write_AD7147@Register_Values:
   383                           	opt stack 0
   384                           
   385                           ; 2 bytes @ 0x1C
   386  00001D                     	ds	2
   387  00001F                     write_AD7147@i:
   388                           	opt stack 0
   389                           
   390                           ; 2 bytes @ 0x1E
   391  00001F                     	ds	2
   392  000021                     setup_AD7147@cdc:
   393                           	opt stack 0
   394                           
   395                           ; 2 bytes @ 0x20
   396  000021                     	ds	2
   397  000023                     setup_AD7147@int_low:
   398                           	opt stack 0
   399                           
   400                           ; 2 bytes @ 0x22
   401  000023                     	ds	2
   402  000025                     setup_AD7147@int_high:
   403                           	opt stack 0
   404                           
   405                           ; 2 bytes @ 0x24
   406  000025                     	ds	2
   407  000027                     setup_AD7147@int_complete:
   408                           	opt stack 0
   409                           
   410                           ; 2 bytes @ 0x26
   411  000027                     	ds	2
   412  000029                     setup_AD7147@AD7147Registers:
   413                           	opt stack 0
   414                           
   415                           ; 16 bytes @ 0x28
   416  000029                     	ds	16
   417  000039                     setup_AD7147@StageBuffer:
   418                           	opt stack 0
   419                           
   420                           ; 16 bytes @ 0x38
   421  000039                     	ds	16
   422  000049                     postinc0	equ	0xFEE
   423                           wreg	equ	0xFE8
   424                           
   425                           ; 1 bytes @ 0x48
   426 ;;
   427 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   428 ;;
   429 ;; *************** function _main *****************
   430 ;; Defined at:
   431 ;;		line 6 in file "main.c"
   432 ;; Parameters:    Size  Location     Type
   433 ;;		None
   434 ;; Auto vars:     Size  Location     Type
   435 ;;  device_ID       2   28[BANK0 ] unsigned int 
   436 ;;  int_high        2   38[BANK0 ] unsigned int 
   437 ;;  int_low         2   36[BANK0 ] unsigned int 
   438 ;;  int_read        2   34[BANK0 ] unsigned int 
   439 ;;  bb              2   32[BANK0 ] unsigned int 
   440 ;;  int_complete    2   30[BANK0 ] unsigned int 
   441 ;;  register4       2   26[BANK0 ] unsigned int 
   442 ;;  register3       2   24[BANK0 ] unsigned int 
   443 ;;  register2       2   22[BANK0 ] unsigned int 
   444 ;;  register1       2   20[BANK0 ] unsigned int 
   445 ;;  power_mode      2   18[BANK0 ] unsigned int 
   446 ;;  sensor_4        2   16[BANK0 ] unsigned int 
   447 ;;  sensor_3        2   14[BANK0 ] unsigned int 
   448 ;;  sensor_2        2   12[BANK0 ] unsigned int 
   449 ;;  sensor_1        2   10[BANK0 ] unsigned int 
   450 ;;  stage_3         2    8[BANK0 ] unsigned int 
   451 ;;  stage_2         2    6[BANK0 ] unsigned int 
   452 ;;  stage_1         2    4[BANK0 ] unsigned int 
   453 ;;  stage_0         2    2[BANK0 ] unsigned int 
   454 ;;  int_ready       2    0[BANK0 ] unsigned int 
   455 ;;  indicator       1   40[BANK0 ] unsigned char 
   456 ;; Return value:  Size  Location     Type
   457 ;;                  1    wreg      void 
   458 ;; Registers used:
   459 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   460 ;; Tracked objects:
   461 ;;		On entry : 0/0
   462 ;;		On exit  : 0/0
   463 ;;		Unchanged: 0/0
   464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   466 ;;      Locals:         0      41       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   468 ;;      Totals:         0      41       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   469 ;;Total ram usage:       41 bytes
   470 ;; Hardware stack levels required when called:    3
   471 ;; This function calls:
   472 ;;		_blink_LED
   473 ;;		_delay_ms
   474 ;;		_get_CDC
   475 ;;		_get_ID
   476 ;;		_setup_AD7147
   477 ;;		_setup_mcu
   478 ;;		_setup_spi
   479 ;;		_uart_write_char
   480 ;;		_uart_write_unsigned_int
   481 ;;		_w16_r16_spi
   482 ;; This function is called by:
   483 ;;		Startup code after reset
   484 ;; This function uses a non-reentrant model
   485 ;;
   486                           
   487                           	psect	text0
   488  00784E                     __ptext0:
   489                           	opt stack 0
   490  00784E                     _main:
   491                           	opt stack 28
   492                           
   493                           ;main.c: 8: delay_ms(500);
   494                           
   495                           ;incstack = 0
   496  00784E  0E01               	movlw	1
   497  007850  6E0A               	movwf	delay_ms@n+1,c
   498  007852  0EF4               	movlw	244
   499  007854  6E09               	movwf	delay_ms@n,c
   500  007856  ECA3  F03A         	call	_delay_ms	;wreg free
   501                           
   502                           ;main.c: 9: setup_mcu();
   503  00785A  EC3F  F03A         	call	_setup_mcu	;wreg free
   504                           
   505                           ;main.c: 10: setup_spi();
   506  00785E  EC65  F03A         	call	_setup_spi	;wreg free
   507                           
   508                           ;main.c: 11: setup_AD7147(1);
   509  007862  0E00               	movlw	0
   510  007864  6E22               	movwf	setup_AD7147@cdc+1,c
   511  007866  0E01               	movlw	1
   512  007868  6E21               	movwf	setup_AD7147@cdc,c
   513  00786A  EC81  F03D         	call	_setup_AD7147	;wreg free
   514                           
   515                           ;main.c: 12: setup_AD7147(2);
   516  00786E  0E00               	movlw	0
   517  007870  6E22               	movwf	setup_AD7147@cdc+1,c
   518  007872  0E02               	movlw	2
   519  007874  6E21               	movwf	setup_AD7147@cdc,c
   520  007876  EC81  F03D         	call	_setup_AD7147	;wreg free
   521                           
   522                           ;main.c: 14: blink_LED(2);
   523  00787A  0E00               	movlw	0
   524  00787C  6E18               	movwf	blink_LED@cdc+1,c
   525  00787E  0E02               	movlw	2
   526  007880  6E17               	movwf	blink_LED@cdc,c
   527  007882  ECD0  F03B         	call	_blink_LED	;wreg free
   528                           
   529                           ;main.c: 15: blink_LED(1);
   530  007886  0E00               	movlw	0
   531  007888  6E18               	movwf	blink_LED@cdc+1,c
   532  00788A  0E01               	movlw	1
   533  00788C  6E17               	movwf	blink_LED@cdc,c
   534  00788E  ECD0  F03B         	call	_blink_LED	;wreg free
   535                           
   536                           ;main.c: 16: char indicator = 's';
   537  007892  0E73               	movlw	115
   538  007894  0100               	movlb	0	; () banked
   539  007896  6F88               	movwf	main@indicator& (0+255),b
   540                           
   541                           ; BSR set to: 0
   542                           ;main.c: 17: unsigned int bb = 1020;
   543  007898  0E03               	movlw	3
   544  00789A  0100               	movlb	0	; () banked
   545  00789C  6F81               	movwf	(main@bb+1)& (0+255),b
   546  00789E  0EFC               	movlw	252
   547  0078A0  6F80               	movwf	main@bb& (0+255),b
   548                           
   549                           ; BSR set to: 0
   550                           ;main.c: 18: unsigned int power_mode = 0;
   551  0078A2  0E00               	movlw	0
   552  0078A4  0100               	movlb	0	; () banked
   553  0078A6  6F73               	movwf	(main@power_mode+1)& (0+255),b
   554  0078A8  0E00               	movlw	0
   555  0078AA  6F72               	movwf	main@power_mode& (0+255),b
   556                           
   557                           ; BSR set to: 0
   558                           ;main.c: 19: unsigned int int_ready = 1;
   559  0078AC  0E00               	movlw	0
   560  0078AE  0100               	movlb	0	; () banked
   561  0078B0  6F61               	movwf	(main@int_ready+1)& (0+255),b
   562  0078B2  0E01               	movlw	1
   563  0078B4  6F60               	movwf	main@int_ready& (0+255),b
   564                           
   565                           ; BSR set to: 0
   566                           ;main.c: 20: unsigned int int_read = 0xE400 + 0x00A;
   567  0078B6  0EE4               	movlw	228
   568  0078B8  0100               	movlb	0	; () banked
   569  0078BA  6F83               	movwf	(main@int_read+1)& (0+255),b
   570  0078BC  0E0A               	movlw	10
   571  0078BE  6F82               	movwf	main@int_read& (0+255),b
   572                           
   573                           ; BSR set to: 0
   574                           ;main.c: 21: unsigned int int_low = 0xE400 + 0x008;
   575  0078C0  0EE4               	movlw	228
   576  0078C2  0100               	movlb	0	; () banked
   577  0078C4  6F85               	movwf	(main@int_low+1)& (0+255),b
   578  0078C6  0E08               	movlw	8
   579  0078C8  6F84               	movwf	main@int_low& (0+255),b
   580                           
   581                           ; BSR set to: 0
   582                           ;main.c: 22: unsigned int int_high = 0xE400 + 0x009;
   583  0078CA  0EE4               	movlw	228
   584  0078CC  0100               	movlb	0	; () banked
   585  0078CE  6F87               	movwf	(main@int_high+1)& (0+255),b
   586  0078D0  0E09               	movlw	9
   587  0078D2  6F86               	movwf	main@int_high& (0+255),b
   588                           
   589                           ; BSR set to: 0
   590                           ;main.c: 23: unsigned int register1 = 0xE400 + 0x00B;
   591  0078D4  0EE4               	movlw	228
   592  0078D6  0100               	movlb	0	; () banked
   593  0078D8  6F75               	movwf	(main@register1+1)& (0+255),b
   594  0078DA  0E0B               	movlw	11
   595  0078DC  6F74               	movwf	main@register1& (0+255),b
   596                           
   597                           ; BSR set to: 0
   598                           ;main.c: 24: unsigned int register2 = 0xE400 + 0x00C;
   599  0078DE  0EE4               	movlw	228
   600  0078E0  0100               	movlb	0	; () banked
   601  0078E2  6F77               	movwf	(main@register2+1)& (0+255),b
   602  0078E4  0E0C               	movlw	12
   603  0078E6  6F76               	movwf	main@register2& (0+255),b
   604                           
   605                           ; BSR set to: 0
   606                           ;main.c: 25: unsigned int register3 = 0xE400 + 0x00D;
   607  0078E8  0EE4               	movlw	228
   608  0078EA  0100               	movlb	0	; () banked
   609  0078EC  6F79               	movwf	(main@register3+1)& (0+255),b
   610  0078EE  0E0D               	movlw	13
   611  0078F0  6F78               	movwf	main@register3& (0+255),b
   612                           
   613                           ; BSR set to: 0
   614                           ;main.c: 26: unsigned int register4 = 0xE400 + 0x00E;
   615  0078F2  0EE4               	movlw	228
   616  0078F4  0100               	movlb	0	; () banked
   617  0078F6  6F7B               	movwf	(main@register4+1)& (0+255),b
   618  0078F8  0E0E               	movlw	14
   619  0078FA  6F7A               	movwf	main@register4& (0+255),b
   620                           
   621                           ; BSR set to: 0
   622                           ;main.c: 27: unsigned int stage_0 = 0;
   623  0078FC  0E00               	movlw	0
   624  0078FE  0100               	movlb	0	; () banked
   625  007900  6F63               	movwf	(main@stage_0+1)& (0+255),b
   626  007902  0E00               	movlw	0
   627  007904  6F62               	movwf	main@stage_0& (0+255),b
   628                           
   629                           ; BSR set to: 0
   630                           ;main.c: 28: unsigned int stage_1 = 0;
   631  007906  0E00               	movlw	0
   632  007908  0100               	movlb	0	; () banked
   633  00790A  6F65               	movwf	(main@stage_1+1)& (0+255),b
   634  00790C  0E00               	movlw	0
   635  00790E  6F64               	movwf	main@stage_1& (0+255),b
   636                           
   637                           ; BSR set to: 0
   638                           ;main.c: 29: unsigned int stage_2 = 0;
   639  007910  0E00               	movlw	0
   640  007912  0100               	movlb	0	; () banked
   641  007914  6F67               	movwf	(main@stage_2+1)& (0+255),b
   642  007916  0E00               	movlw	0
   643  007918  6F66               	movwf	main@stage_2& (0+255),b
   644                           
   645                           ; BSR set to: 0
   646                           ;main.c: 30: unsigned int stage_3 = 0;
   647  00791A  0E00               	movlw	0
   648  00791C  0100               	movlb	0	; () banked
   649  00791E  6F69               	movwf	(main@stage_3+1)& (0+255),b
   650  007920  0E00               	movlw	0
   651  007922  6F68               	movwf	main@stage_3& (0+255),b
   652                           
   653                           ; BSR set to: 0
   654                           ;main.c: 31: unsigned int sensor_1 = 0;
   655  007924  0E00               	movlw	0
   656  007926  0100               	movlb	0	; () banked
   657  007928  6F6B               	movwf	(main@sensor_1+1)& (0+255),b
   658  00792A  0E00               	movlw	0
   659  00792C  6F6A               	movwf	main@sensor_1& (0+255),b
   660                           
   661                           ; BSR set to: 0
   662                           ;main.c: 32: unsigned int sensor_2 = 0;
   663  00792E  0E00               	movlw	0
   664  007930  0100               	movlb	0	; () banked
   665  007932  6F6D               	movwf	(main@sensor_2+1)& (0+255),b
   666  007934  0E00               	movlw	0
   667  007936  6F6C               	movwf	main@sensor_2& (0+255),b
   668                           
   669                           ; BSR set to: 0
   670                           ;main.c: 33: unsigned int sensor_3 = 0;
   671  007938  0E00               	movlw	0
   672  00793A  0100               	movlb	0	; () banked
   673  00793C  6F6F               	movwf	(main@sensor_3+1)& (0+255),b
   674  00793E  0E00               	movlw	0
   675  007940  6F6E               	movwf	main@sensor_3& (0+255),b
   676                           
   677                           ; BSR set to: 0
   678                           ;main.c: 34: unsigned int sensor_4 = 0;
   679  007942  0E00               	movlw	0
   680  007944  0100               	movlb	0	; () banked
   681  007946  6F71               	movwf	(main@sensor_4+1)& (0+255),b
   682  007948  0E00               	movlw	0
   683  00794A  6F70               	movwf	main@sensor_4& (0+255),b
   684                           
   685                           ; BSR set to: 0
   686                           ;main.c: 35: unsigned int int_complete = 0;
   687  00794C  0E00               	movlw	0
   688  00794E  0100               	movlb	0	; () banked
   689  007950  6F7F               	movwf	(main@int_complete+1)& (0+255),b
   690  007952  0E00               	movlw	0
   691  007954  6F7E               	movwf	main@int_complete& (0+255),b
   692  007956                     l2055:
   693                           
   694                           ;main.c: 38: {
   695                           ;main.c: 40: if (indicator == 'i')
   696  007956  0E69               	movlw	105
   697  007958  0100               	movlb	0	; () banked
   698  00795A  1988               	xorwf	main@indicator& (0+255),w,b
   699  00795C  A4D8               	btfss	status,2,c
   700  00795E  D013               	goto	l2063
   701                           
   702                           ; BSR set to: 0
   703                           ;main.c: 41: {
   704                           ;main.c: 42: uart_write_char('i');
   705  007960  0E69               	movlw	105
   706  007962  EC44  F03A         	call	_uart_write_char
   707                           
   708                           ;main.c: 43: unsigned int device_ID = get_ID(1);
   709  007966  0E00               	movlw	0
   710  007968  6E18               	movwf	get_ID@cdc+1,c
   711  00796A  0E01               	movlw	1
   712  00796C  6E17               	movwf	get_ID@cdc,c
   713  00796E  ECEC  F03A         	call	_get_ID	;wreg free
   714  007972  C017  F07C         	movff	?_get_ID,main@device_ID
   715  007976  C018  F07D         	movff	?_get_ID+1,main@device_ID+1
   716                           
   717                           ;main.c: 44: uart_write_unsigned_int(device_ID);
   718  00797A  C07C  F001         	movff	main@device_ID,uart_write_unsigned_int@number
   719  00797E  C07D  F002         	movff	main@device_ID+1,uart_write_unsigned_int@number+1
   720  007982  EC70  F03A         	call	_uart_write_unsigned_int	;wreg free
   721  007986                     l2063:
   722                           
   723                           ;main.c: 45: }
   724                           ;main.c: 46: if (indicator == 's')
   725  007986  0E73               	movlw	115
   726  007988  0100               	movlb	0	; () banked
   727  00798A  1988               	xorwf	main@indicator& (0+255),w,b
   728  00798C  A4D8               	btfss	status,2,c
   729  00798E  D0A4               	goto	l2103
   730                           
   731                           ; BSR set to: 0
   732                           ;main.c: 47: {
   733                           ;main.c: 48: uart_write_char('s');
   734  007990  0E73               	movlw	115
   735  007992  EC44  F03A         	call	_uart_write_char
   736                           
   737                           ;main.c: 51: if(PORTBbits.RB1==0)
   738  007996  B281               	btfsc	3969,1,c	;volatile
   739  007998  D007               	goto	l2071
   740                           
   741                           ;main.c: 52: {
   742                           ;main.c: 53: uart_write_unsigned_int(bb);
   743  00799A  C080  F001         	movff	main@bb,uart_write_unsigned_int@number
   744  00799E  C081  F002         	movff	main@bb+1,uart_write_unsigned_int@number+1
   745  0079A2  EC70  F03A         	call	_uart_write_unsigned_int	;wreg free
   746                           
   747                           ;main.c: 54: }
   748  0079A6  D006               	goto	l2073
   749  0079A8                     l2071:
   750                           
   751                           ;main.c: 55: else
   752                           ;main.c: 56: {
   753                           ;main.c: 57: uart_write_unsigned_int(power_mode);
   754  0079A8  C072  F001         	movff	main@power_mode,uart_write_unsigned_int@number
   755  0079AC  C073  F002         	movff	main@power_mode+1,uart_write_unsigned_int@number+1
   756  0079B0  EC70  F03A         	call	_uart_write_unsigned_int	;wreg free
   757  0079B4                     l2073:
   758                           
   759                           ;main.c: 58: }
   760                           ;main.c: 59: get_CDC(2,0);
   761  0079B4  0E00               	movlw	0
   762  0079B6  6E02               	movwf	get_CDC@cdc+1,c
   763  0079B8  0E02               	movlw	2
   764  0079BA  6E01               	movwf	get_CDC@cdc,c
   765  0079BC  0E00               	movlw	0
   766  0079BE  6E04               	movwf	get_CDC@state+1,c
   767  0079C0  0E00               	movlw	0
   768  0079C2  6E03               	movwf	get_CDC@state,c
   769  0079C4  EC7D  F03A         	call	_get_CDC	;wreg free
   770                           
   771                           ;main.c: 60: sensor_1 = w16_r16_spi(register1);
   772  0079C8  C074  F001         	movff	main@register1,w16_r16_spi@address
   773  0079CC  C075  F002         	movff	main@register1+1,w16_r16_spi@address+1
   774  0079D0  EC4F  F03B         	call	_w16_r16_spi	;wreg free
   775  0079D4  C001  F06A         	movff	?_w16_r16_spi,main@sensor_1
   776  0079D8  C002  F06B         	movff	?_w16_r16_spi+1,main@sensor_1+1
   777                           
   778                           ;main.c: 61: sensor_2 = w16_r16_spi(register2);
   779  0079DC  C076  F001         	movff	main@register2,w16_r16_spi@address
   780  0079E0  C077  F002         	movff	main@register2+1,w16_r16_spi@address+1
   781  0079E4  EC4F  F03B         	call	_w16_r16_spi	;wreg free
   782  0079E8  C001  F06C         	movff	?_w16_r16_spi,main@sensor_2
   783  0079EC  C002  F06D         	movff	?_w16_r16_spi+1,main@sensor_2+1
   784                           
   785                           ;main.c: 62: sensor_3 = w16_r16_spi(register3);
   786  0079F0  C078  F001         	movff	main@register3,w16_r16_spi@address
   787  0079F4  C079  F002         	movff	main@register3+1,w16_r16_spi@address+1
   788  0079F8  EC4F  F03B         	call	_w16_r16_spi	;wreg free
   789  0079FC  C001  F06E         	movff	?_w16_r16_spi,main@sensor_3
   790  007A00  C002  F06F         	movff	?_w16_r16_spi+1,main@sensor_3+1
   791                           
   792                           ;main.c: 63: sensor_4 = w16_r16_spi(register4);
   793  007A04  C07A  F001         	movff	main@register4,w16_r16_spi@address
   794  007A08  C07B  F002         	movff	main@register4+1,w16_r16_spi@address+1
   795  007A0C  EC4F  F03B         	call	_w16_r16_spi	;wreg free
   796  007A10  C001  F070         	movff	?_w16_r16_spi,main@sensor_4
   797  007A14  C002  F071         	movff	?_w16_r16_spi+1,main@sensor_4+1
   798                           
   799                           ;main.c: 64: int_complete = w16_r16_spi(int_low);
   800  007A18  C084  F001         	movff	main@int_low,w16_r16_spi@address
   801  007A1C  C085  F002         	movff	main@int_low+1,w16_r16_spi@address+1
   802  007A20  EC4F  F03B         	call	_w16_r16_spi	;wreg free
   803  007A24  C001  F07E         	movff	?_w16_r16_spi,main@int_complete
   804  007A28  C002  F07F         	movff	?_w16_r16_spi+1,main@int_complete+1
   805                           
   806                           ;main.c: 65: int_complete = w16_r16_spi(int_high);
   807  007A2C  C086  F001         	movff	main@int_high,w16_r16_spi@address
   808  007A30  C087  F002         	movff	main@int_high+1,w16_r16_spi@address+1
   809  007A34  EC4F  F03B         	call	_w16_r16_spi	;wreg free
   810  007A38  C001  F07E         	movff	?_w16_r16_spi,main@int_complete
   811  007A3C  C002  F07F         	movff	?_w16_r16_spi+1,main@int_complete+1
   812                           
   813                           ;main.c: 66: int_complete = w16_r16_spi(int_read);
   814  007A40  C082  F001         	movff	main@int_read,w16_r16_spi@address
   815  007A44  C083  F002         	movff	main@int_read+1,w16_r16_spi@address+1
   816  007A48  EC4F  F03B         	call	_w16_r16_spi	;wreg free
   817  007A4C  C001  F07E         	movff	?_w16_r16_spi,main@int_complete
   818  007A50  C002  F07F         	movff	?_w16_r16_spi+1,main@int_complete+1
   819                           
   820                           ;main.c: 67: get_CDC(2,1);
   821  007A54  0E00               	movlw	0
   822  007A56  6E02               	movwf	get_CDC@cdc+1,c
   823  007A58  0E02               	movlw	2
   824  007A5A  6E01               	movwf	get_CDC@cdc,c
   825  007A5C  0E00               	movlw	0
   826  007A5E  6E04               	movwf	get_CDC@state+1,c
   827  007A60  0E01               	movlw	1
   828  007A62  6E03               	movwf	get_CDC@state,c
   829  007A64  EC7D  F03A         	call	_get_CDC	;wreg free
   830                           
   831                           ;main.c: 69: get_CDC(2,0);
   832  007A68  0E00               	movlw	0
   833  007A6A  6E02               	movwf	get_CDC@cdc+1,c
   834  007A6C  0E02               	movlw	2
   835  007A6E  6E01               	movwf	get_CDC@cdc,c
   836  007A70  0E00               	movlw	0
   837  007A72  6E04               	movwf	get_CDC@state+1,c
   838  007A74  0E00               	movlw	0
   839  007A76  6E03               	movwf	get_CDC@state,c
   840  007A78  EC7D  F03A         	call	_get_CDC	;wreg free
   841                           
   842                           ;main.c: 70: int_complete = w16_r16_spi(int_low);
   843  007A7C  C084  F001         	movff	main@int_low,w16_r16_spi@address
   844  007A80  C085  F002         	movff	main@int_low+1,w16_r16_spi@address+1
   845  007A84  EC4F  F03B         	call	_w16_r16_spi	;wreg free
   846  007A88  C001  F07E         	movff	?_w16_r16_spi,main@int_complete
   847  007A8C  C002  F07F         	movff	?_w16_r16_spi+1,main@int_complete+1
   848                           
   849                           ;main.c: 71: int_complete = w16_r16_spi(int_high);
   850  007A90  C086  F001         	movff	main@int_high,w16_r16_spi@address
   851  007A94  C087  F002         	movff	main@int_high+1,w16_r16_spi@address+1
   852  007A98  EC4F  F03B         	call	_w16_r16_spi	;wreg free
   853  007A9C  C001  F07E         	movff	?_w16_r16_spi,main@int_complete
   854  007AA0  C002  F07F         	movff	?_w16_r16_spi+1,main@int_complete+1
   855                           
   856                           ;main.c: 72: int_complete = w16_r16_spi(int_read);
   857  007AA4  C082  F001         	movff	main@int_read,w16_r16_spi@address
   858  007AA8  C083  F002         	movff	main@int_read+1,w16_r16_spi@address+1
   859  007AAC  EC4F  F03B         	call	_w16_r16_spi	;wreg free
   860  007AB0  C001  F07E         	movff	?_w16_r16_spi,main@int_complete
   861  007AB4  C002  F07F         	movff	?_w16_r16_spi+1,main@int_complete+1
   862                           
   863                           ;main.c: 73: get_CDC(2,1);
   864  007AB8  0E00               	movlw	0
   865  007ABA  6E02               	movwf	get_CDC@cdc+1,c
   866  007ABC  0E02               	movlw	2
   867  007ABE  6E01               	movwf	get_CDC@cdc,c
   868  007AC0  0E00               	movlw	0
   869  007AC2  6E04               	movwf	get_CDC@state+1,c
   870  007AC4  0E01               	movlw	1
   871  007AC6  6E03               	movwf	get_CDC@state,c
   872  007AC8  EC7D  F03A         	call	_get_CDC	;wreg free
   873                           
   874                           ;main.c: 80: delay_ms(100);
   875  007ACC  0E00               	movlw	0
   876  007ACE  6E0A               	movwf	delay_ms@n+1,c
   877  007AD0  0E64               	movlw	100
   878  007AD2  6E09               	movwf	delay_ms@n,c
   879  007AD4  ECA3  F03A         	call	_delay_ms	;wreg free
   880  007AD8                     l2103:
   881                           
   882                           ;main.c: 82: }
   883                           ;main.c: 83: if (indicator == 'f')
   884  007AD8  0E66               	movlw	102
   885  007ADA  0100               	movlb	0	; () banked
   886  007ADC  1988               	xorwf	main@indicator& (0+255),w,b
   887  007ADE  A4D8               	btfss	status,2,c
   888  007AE0  D009               	goto	l2109
   889                           
   890                           ; BSR set to: 0
   891                           ;main.c: 84: {
   892                           ;main.c: 85: uart_write_char('f');
   893  007AE2  0E66               	movlw	102
   894  007AE4  EC44  F03A         	call	_uart_write_char
   895                           
   896                           ;main.c: 87: uart_write_unsigned_int(bb);
   897  007AE8  C080  F001         	movff	main@bb,uart_write_unsigned_int@number
   898  007AEC  C081  F002         	movff	main@bb+1,uart_write_unsigned_int@number+1
   899  007AF0  EC70  F03A         	call	_uart_write_unsigned_int	;wreg free
   900  007AF4                     l2109:
   901                           
   902                           ;main.c: 88: }
   903                           ;main.c: 89: delay_ms(500);
   904  007AF4  0E01               	movlw	1
   905  007AF6  6E0A               	movwf	delay_ms@n+1,c
   906  007AF8  0EF4               	movlw	244
   907  007AFA  6E09               	movwf	delay_ms@n,c
   908  007AFC  ECA3  F03A         	call	_delay_ms	;wreg free
   909  007B00  D72A               	goto	l2055
   910  007B02                     __end_of_main:
   911                           	opt stack 0
   912                           postinc0	equ	0xFEE
   913                           wreg	equ	0xFE8
   914                           status	equ	0xFD8
   915                           
   916 ;; *************** function _uart_write_unsigned_int *****************
   917 ;; Defined at:
   918 ;;		line 39 in file "uart.c"
   919 ;; Parameters:    Size  Location     Type
   920 ;;  number          2    0[COMRAM] unsigned int 
   921 ;; Auto vars:     Size  Location     Type
   922 ;;  char2           1    3[COMRAM] unsigned char 
   923 ;;  char1           1    2[COMRAM] unsigned char 
   924 ;; Return value:  Size  Location     Type
   925 ;;                  1    wreg      void 
   926 ;; Registers used:
   927 ;;		wreg, status,2
   928 ;; Tracked objects:
   929 ;;		On entry : 0/0
   930 ;;		On exit  : 0/0
   931 ;;		Unchanged: 0/0
   932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   933 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   934 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   936 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   937 ;;Total ram usage:        4 bytes
   938 ;; Hardware stack levels used:    1
   939 ;; This function calls:
   940 ;;		Nothing
   941 ;; This function is called by:
   942 ;;		_main
   943 ;; This function uses a non-reentrant model
   944 ;;
   945                           
   946                           	psect	text1
   947  0074E0                     __ptext1:
   948                           	opt stack 0
   949  0074E0                     _uart_write_unsigned_int:
   950                           	opt stack 30
   951                           
   952                           ;uart.c: 41: char char1 = number & 0xFF;
   953                           
   954                           ;incstack = 0
   955  0074E0  C001  F003         	movff	uart_write_unsigned_int@number,uart_write_unsigned_int@char1
   956                           
   957                           ;uart.c: 42: char char2 = number >> 8;
   958  0074E4  5002               	movf	uart_write_unsigned_int@number+1,w,c
   959  0074E6  6E04               	movwf	uart_write_unsigned_int@char2,c
   960  0074E8                     l252:
   961  0074E8  A2AC               	btfss	4012,1,c	;volatile
   962  0074EA  D7FE               	goto	l252
   963                           
   964                           ;uart.c: 45: TXREG1 = char1;
   965  0074EC  C003  FFAD         	movff	uart_write_unsigned_int@char1,4013	;volatile
   966  0074F0                     l255:
   967  0074F0  A2AC               	btfss	4012,1,c	;volatile
   968  0074F2  D7FE               	goto	l255
   969                           
   970                           ;uart.c: 47: TXREG1 = char2;
   971  0074F4  C004  FFAD         	movff	uart_write_unsigned_int@char2,4013	;volatile
   972  0074F8  0012               	return		;funcret
   973  0074FA                     __end_of_uart_write_unsigned_int:
   974                           	opt stack 0
   975                           postinc0	equ	0xFEE
   976                           wreg	equ	0xFE8
   977                           status	equ	0xFD8
   978                           
   979 ;; *************** function _uart_write_char *****************
   980 ;; Defined at:
   981 ;;		line 24 in file "uart.c"
   982 ;; Parameters:    Size  Location     Type
   983 ;;  data            1    wreg     unsigned char 
   984 ;; Auto vars:     Size  Location     Type
   985 ;;  data            1    0[COMRAM] unsigned char 
   986 ;; Return value:  Size  Location     Type
   987 ;;                  1    wreg      void 
   988 ;; Registers used:
   989 ;;		wreg
   990 ;; Tracked objects:
   991 ;;		On entry : 0/0
   992 ;;		On exit  : 0/0
   993 ;;		Unchanged: 0/0
   994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   996 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   998 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   999 ;;Total ram usage:        1 bytes
  1000 ;; Hardware stack levels used:    1
  1001 ;; This function calls:
  1002 ;;		Nothing
  1003 ;; This function is called by:
  1004 ;;		_main
  1005 ;;		_uart_write_string
  1006 ;; This function uses a non-reentrant model
  1007 ;;
  1008                           
  1009                           	psect	text2
  1010  007488                     __ptext2:
  1011                           	opt stack 0
  1012  007488                     _uart_write_char:
  1013                           	opt stack 30
  1014                           
  1015                           ;incstack = 0
  1016                           ;uart_write_char@data stored from wreg
  1017  007488  6E01               	movwf	uart_write_char@data,c
  1018  00748A                     l240:
  1019  00748A  A2AC               	btfss	4012,1,c	;volatile
  1020  00748C  D7FE               	goto	l240
  1021                           
  1022                           ;uart.c: 28: TXREG1 = data;
  1023  00748E  C001  FFAD         	movff	uart_write_char@data,4013	;volatile
  1024  007492  0012               	return		;funcret
  1025  007494                     __end_of_uart_write_char:
  1026                           	opt stack 0
  1027                           postinc0	equ	0xFEE
  1028                           wreg	equ	0xFE8
  1029                           status	equ	0xFD8
  1030                           
  1031 ;; *************** function _setup_spi *****************
  1032 ;; Defined at:
  1033 ;;		line 4 in file "spi.c"
  1034 ;; Parameters:    Size  Location     Type
  1035 ;;		None
  1036 ;; Auto vars:     Size  Location     Type
  1037 ;;		None
  1038 ;; Return value:  Size  Location     Type
  1039 ;;                  1    wreg      void 
  1040 ;; Registers used:
  1041 ;;		None
  1042 ;; Tracked objects:
  1043 ;;		On entry : 0/0
  1044 ;;		On exit  : 0/0
  1045 ;;		Unchanged: 0/0
  1046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1050 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1051 ;;Total ram usage:        0 bytes
  1052 ;; Hardware stack levels used:    1
  1053 ;; This function calls:
  1054 ;;		Nothing
  1055 ;; This function is called by:
  1056 ;;		_main
  1057 ;; This function uses a non-reentrant model
  1058 ;;
  1059                           
  1060                           	psect	text3
  1061  0074CA                     __ptext3:
  1062                           	opt stack 0
  1063  0074CA                     _setup_spi:
  1064                           	opt stack 30
  1065                           
  1066                           ;spi.c: 6: SSPSTATbits.SMP = 0;
  1067                           
  1068                           ;incstack = 0
  1069  0074CA  9EC7               	bcf	4039,7,c	;volatile
  1070                           
  1071                           ;spi.c: 7: SSPSTATbits.CKE = 0;
  1072  0074CC  9CC7               	bcf	4039,6,c	;volatile
  1073                           
  1074                           ;spi.c: 9: SSPCON1bits.WCOL = 0;
  1075  0074CE  9EC6               	bcf	4038,7,c	;volatile
  1076                           
  1077                           ;spi.c: 10: SSPCON1bits.CKP = 1;
  1078  0074D0  88C6               	bsf	4038,4,c	;volatile
  1079                           
  1080                           ;spi.c: 12: SSPCON1bits.SSPM3 = 0;
  1081  0074D2  96C6               	bcf	4038,3,c	;volatile
  1082                           
  1083                           ;spi.c: 13: SSPCON1bits.SSPM2 = 0;
  1084  0074D4  94C6               	bcf	4038,2,c	;volatile
  1085                           
  1086                           ;spi.c: 14: SSPCON1bits.SSPM1 = 1;
  1087  0074D6  82C6               	bsf	4038,1,c	;volatile
  1088                           
  1089                           ;spi.c: 15: SSPCON1bits.SSPM0 = 0;
  1090  0074D8  90C6               	bcf	4038,0,c	;volatile
  1091                           
  1092                           ;spi.c: 17: PIE1bits.SSPIE = 0;
  1093  0074DA  969D               	bcf	3997,3,c	;volatile
  1094                           
  1095                           ;spi.c: 19: SSPCON1bits.SSPEN = 1;
  1096  0074DC  8AC6               	bsf	4038,5,c	;volatile
  1097  0074DE  0012               	return		;funcret
  1098  0074E0                     __end_of_setup_spi:
  1099                           	opt stack 0
  1100                           postinc0	equ	0xFEE
  1101                           wreg	equ	0xFE8
  1102                           status	equ	0xFD8
  1103                           
  1104 ;; *************** function _setup_mcu *****************
  1105 ;; Defined at:
  1106 ;;		line 6 in file "micro_setup.c"
  1107 ;; Parameters:    Size  Location     Type
  1108 ;;		None
  1109 ;; Auto vars:     Size  Location     Type
  1110 ;;		None
  1111 ;; Return value:  Size  Location     Type
  1112 ;;                  1    wreg      void 
  1113 ;; Registers used:
  1114 ;;		wreg, status,2, cstack
  1115 ;; Tracked objects:
  1116 ;;		On entry : 0/0
  1117 ;;		On exit  : 0/0
  1118 ;;		Unchanged: 0/0
  1119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1123 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1124 ;;Total ram usage:        0 bytes
  1125 ;; Hardware stack levels used:    1
  1126 ;; Hardware stack levels required when called:    1
  1127 ;; This function calls:
  1128 ;;		_init_uart
  1129 ;;		_setup_port
  1130 ;; This function is called by:
  1131 ;;		_main
  1132 ;; This function uses a non-reentrant model
  1133 ;;
  1134                           
  1135                           	psect	text4
  1136  00747E                     __ptext4:
  1137                           	opt stack 0
  1138  00747E                     _setup_mcu:
  1139                           	opt stack 29
  1140                           
  1141                           ;micro_setup.c: 8: setup_port();
  1142                           
  1143                           ;incstack = 0
  1144  00747E  EC4A  F03A         	call	_setup_port	;wreg free
  1145                           
  1146                           ;micro_setup.c: 9: init_uart();
  1147  007482  EC5B  F03A         	call	_init_uart	;wreg free
  1148  007486  0012               	return		;funcret
  1149  007488                     __end_of_setup_mcu:
  1150                           	opt stack 0
  1151                           postinc0	equ	0xFEE
  1152                           wreg	equ	0xFE8
  1153                           status	equ	0xFD8
  1154                           
  1155 ;; *************** function _setup_port *****************
  1156 ;; Defined at:
  1157 ;;		line 12 in file "micro_setup.c"
  1158 ;; Parameters:    Size  Location     Type
  1159 ;;		None
  1160 ;; Auto vars:     Size  Location     Type
  1161 ;;		None
  1162 ;; Return value:  Size  Location     Type
  1163 ;;                  1    wreg      void 
  1164 ;; Registers used:
  1165 ;;		wreg, status,2
  1166 ;; Tracked objects:
  1167 ;;		On entry : 0/0
  1168 ;;		On exit  : 0/0
  1169 ;;		Unchanged: 0/0
  1170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1174 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1175 ;;Total ram usage:        0 bytes
  1176 ;; Hardware stack levels used:    1
  1177 ;; This function calls:
  1178 ;;		Nothing
  1179 ;; This function is called by:
  1180 ;;		_setup_mcu
  1181 ;; This function uses a non-reentrant model
  1182 ;;
  1183                           
  1184                           	psect	text5
  1185  007494                     __ptext5:
  1186                           	opt stack 0
  1187  007494                     _setup_port:
  1188                           	opt stack 29
  1189                           
  1190                           ;micro_setup.c: 15: TRISB = 0b00000011;
  1191                           
  1192                           ;incstack = 0
  1193  007494  0E03               	movlw	3
  1194  007496  6E93               	movwf	3987,c	;volatile
  1195                           
  1196                           ;micro_setup.c: 16: TRISC = 0b10010000;
  1197  007498  0E90               	movlw	144
  1198  00749A  6E94               	movwf	3988,c	;volatile
  1199                           
  1200                           ;micro_setup.c: 17: LATCbits.LATC1=1;
  1201  00749C  828B               	bsf	3979,1,c	;volatile
  1202                           
  1203                           ;micro_setup.c: 18: LATCbits.LATC0=1;
  1204  00749E  808B               	bsf	3979,0,c	;volatile
  1205                           
  1206                           ;micro_setup.c: 19: LATCbits.LATC2=1;
  1207  0074A0  848B               	bsf	3979,2,c	;volatile
  1208  0074A2  0012               	return		;funcret
  1209  0074A4                     __end_of_setup_port:
  1210                           	opt stack 0
  1211                           postinc0	equ	0xFEE
  1212                           wreg	equ	0xFE8
  1213                           status	equ	0xFD8
  1214                           
  1215 ;; *************** function _init_uart *****************
  1216 ;; Defined at:
  1217 ;;		line 22 in file "micro_setup.c"
  1218 ;; Parameters:    Size  Location     Type
  1219 ;;		None
  1220 ;; Auto vars:     Size  Location     Type
  1221 ;;		None
  1222 ;; Return value:  Size  Location     Type
  1223 ;;                  1    wreg      void 
  1224 ;; Registers used:
  1225 ;;		wreg, status,2
  1226 ;; Tracked objects:
  1227 ;;		On entry : 0/0
  1228 ;;		On exit  : 0/0
  1229 ;;		Unchanged: 0/0
  1230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1232 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1234 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1235 ;;Total ram usage:        0 bytes
  1236 ;; Hardware stack levels used:    1
  1237 ;; This function calls:
  1238 ;;		Nothing
  1239 ;; This function is called by:
  1240 ;;		_setup_mcu
  1241 ;; This function uses a non-reentrant model
  1242 ;;
  1243                           
  1244                           	psect	text6
  1245  0074B6                     __ptext6:
  1246                           	opt stack 0
  1247  0074B6                     _init_uart:
  1248                           	opt stack 29
  1249                           
  1250                           ;micro_setup.c: 24: TXSTA1 = 0b00100000;
  1251                           
  1252                           ;incstack = 0
  1253  0074B6  0E20               	movlw	32
  1254  0074B8  6EAC               	movwf	4012,c	;volatile
  1255                           
  1256                           ;micro_setup.c: 36: SPBRG1 = 12;
  1257  0074BA  0E0C               	movlw	12
  1258  0074BC  6EAF               	movwf	4015,c	;volatile
  1259                           
  1260                           ;micro_setup.c: 38: BAUDCON1 = 0b00000000;
  1261  0074BE  0E00               	movlw	0
  1262  0074C0  6EA7               	movwf	4007,c	;volatile
  1263                           
  1264                           ;micro_setup.c: 58: RCSTA1bits.SPEN=1;
  1265  0074C2  8EAB               	bsf	4011,7,c	;volatile
  1266                           
  1267                           ;micro_setup.c: 59: RCSTA1bits.RX9=0;
  1268  0074C4  9CAB               	bcf	4011,6,c	;volatile
  1269                           
  1270                           ;micro_setup.c: 60: RCSTA1bits.CREN=1;
  1271  0074C6  88AB               	bsf	4011,4,c	;volatile
  1272  0074C8  0012               	return		;funcret
  1273  0074CA                     __end_of_init_uart:
  1274                           	opt stack 0
  1275                           postinc0	equ	0xFEE
  1276                           wreg	equ	0xFE8
  1277                           status	equ	0xFD8
  1278                           
  1279 ;; *************** function _setup_AD7147 *****************
  1280 ;; Defined at:
  1281 ;;		line 6 in file "AD7147.c"
  1282 ;; Parameters:    Size  Location     Type
  1283 ;;  cdc             2   32[COMRAM] unsigned int 
  1284 ;; Auto vars:     Size  Location     Type
  1285 ;;  StageBuffer    16   56[COMRAM] unsigned int [8]
  1286 ;;  AD7147Regist   16   40[COMRAM] unsigned int [8]
  1287 ;;  int_complete    2   38[COMRAM] unsigned int 
  1288 ;;  int_high        2   36[COMRAM] unsigned int 
  1289 ;;  int_low         2   34[COMRAM] unsigned int 
  1290 ;; Return value:  Size  Location     Type
  1291 ;;                  1    wreg      void 
  1292 ;; Registers used:
  1293 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1294 ;; Tracked objects:
  1295 ;;		On entry : 0/0
  1296 ;;		On exit  : 0/0
  1297 ;;		Unchanged: 0/0
  1298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1299 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1300 ;;      Locals:        38       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1302 ;;      Totals:        40       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1303 ;;Total ram usage:       40 bytes
  1304 ;; Hardware stack levels used:    1
  1305 ;; Hardware stack levels required when called:    2
  1306 ;; This function calls:
  1307 ;;		_get_CDC
  1308 ;;		_read_AD7147_interrupt
  1309 ;;		_write_AD7147
  1310 ;; This function is called by:
  1311 ;;		_main
  1312 ;; This function uses a non-reentrant model
  1313 ;;
  1314                           
  1315                           	psect	text7
  1316  007B02                     __ptext7:
  1317                           	opt stack 0
  1318  007B02                     _setup_AD7147:
  1319                           	opt stack 28
  1320                           
  1321                           ;AD7147.c: 8: unsigned int StageBuffer[8];
  1322                           ;AD7147.c: 9: unsigned int AD7147Registers[8];
  1323                           ;AD7147.c: 10: get_CDC(cdc,0);
  1324                           
  1325                           ;incstack = 0
  1326  007B02  C021  F001         	movff	setup_AD7147@cdc,get_CDC@cdc
  1327  007B06  C022  F002         	movff	setup_AD7147@cdc+1,get_CDC@cdc+1
  1328  007B0A  0E00               	movlw	0
  1329  007B0C  6E04               	movwf	get_CDC@state+1,c
  1330  007B0E  0E00               	movlw	0
  1331  007B10  6E03               	movwf	get_CDC@state,c
  1332  007B12  EC7D  F03A         	call	_get_CDC	;wreg free
  1333                           
  1334                           ;AD7147.c: 25: StageBuffer[0] = 0xFFFE;
  1335  007B16  0EFF               	movlw	255
  1336  007B18  6E3A               	movwf	setup_AD7147@StageBuffer+1,c
  1337  007B1A  0EFE               	movlw	254
  1338  007B1C  6E39               	movwf	setup_AD7147@StageBuffer,c
  1339                           
  1340                           ;AD7147.c: 26: StageBuffer[1] = 0x1FFF;
  1341  007B1E  0E1F               	movlw	31
  1342  007B20  6E3C               	movwf	setup_AD7147@StageBuffer+3,c
  1343  007B22  683B               	setf	setup_AD7147@StageBuffer+2,c
  1344                           
  1345                           ;AD7147.c: 27: StageBuffer[2] = 0x0100;
  1346  007B24  0E01               	movlw	1
  1347  007B26  6E3E               	movwf	setup_AD7147@StageBuffer+5,c
  1348  007B28  0E00               	movlw	0
  1349  007B2A  6E3D               	movwf	setup_AD7147@StageBuffer+4,c
  1350                           
  1351                           ;AD7147.c: 28: StageBuffer[3] = 0x2121;
  1352  007B2C  0E21               	movlw	33
  1353  007B2E  6E40               	movwf	setup_AD7147@StageBuffer+7,c
  1354  007B30  0E21               	movlw	33
  1355  007B32  6E3F               	movwf	setup_AD7147@StageBuffer+6,c
  1356                           
  1357                           ;AD7147.c: 29: StageBuffer[4] = 4000;
  1358  007B34  0E0F               	movlw	15
  1359  007B36  6E42               	movwf	setup_AD7147@StageBuffer+9,c
  1360  007B38  0EA0               	movlw	160
  1361  007B3A  6E41               	movwf	setup_AD7147@StageBuffer+8,c
  1362                           
  1363                           ;AD7147.c: 30: StageBuffer[5] = 4000;
  1364  007B3C  0E0F               	movlw	15
  1365  007B3E  6E44               	movwf	setup_AD7147@StageBuffer+11,c
  1366  007B40  0EA0               	movlw	160
  1367  007B42  6E43               	movwf	setup_AD7147@StageBuffer+10,c
  1368                           
  1369                           ;AD7147.c: 31: StageBuffer[6] = 4250;
  1370  007B44  0E10               	movlw	16
  1371  007B46  6E46               	movwf	setup_AD7147@StageBuffer+13,c
  1372  007B48  0E9A               	movlw	154
  1373  007B4A  6E45               	movwf	setup_AD7147@StageBuffer+12,c
  1374                           
  1375                           ;AD7147.c: 32: StageBuffer[7] = 4250;
  1376  007B4C  0E10               	movlw	16
  1377  007B4E  6E48               	movwf	setup_AD7147@StageBuffer+15,c
  1378  007B50  0E9A               	movlw	154
  1379  007B52  6E47               	movwf	setup_AD7147@StageBuffer+14,c
  1380                           
  1381                           ;AD7147.c: 33: write_AD7147(0x080, 8, StageBuffer);
  1382  007B54  0E00               	movlw	0
  1383  007B56  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1384  007B58  0E80               	movlw	128
  1385  007B5A  6E17               	movwf	write_AD7147@RegisterAddress,c
  1386  007B5C  0E00               	movlw	0
  1387  007B5E  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1388  007B60  0E08               	movlw	8
  1389  007B62  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1390  007B64  0E39               	movlw	low setup_AD7147@StageBuffer
  1391  007B66  6E1B               	movwf	write_AD7147@DataBuffer,c
  1392  007B68  0E00               	movlw	high setup_AD7147@StageBuffer
  1393  007B6A  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1394  007B6C  ECC3  F03A         	call	_write_AD7147	;wreg free
  1395                           
  1396                           ;AD7147.c: 38: StageBuffer[0]=0x3FFB;
  1397  007B70  0E3F               	movlw	63
  1398  007B72  6E3A               	movwf	setup_AD7147@StageBuffer+1,c
  1399  007B74  0EFB               	movlw	251
  1400  007B76  6E39               	movwf	setup_AD7147@StageBuffer,c
  1401                           
  1402                           ;AD7147.c: 39: StageBuffer[1]=0x1FFF;
  1403  007B78  0E1F               	movlw	31
  1404  007B7A  6E3C               	movwf	setup_AD7147@StageBuffer+3,c
  1405  007B7C  683B               	setf	setup_AD7147@StageBuffer+2,c
  1406                           
  1407                           ;AD7147.c: 40: StageBuffer[2]=0x0100;
  1408  007B7E  0E01               	movlw	1
  1409  007B80  6E3E               	movwf	setup_AD7147@StageBuffer+5,c
  1410  007B82  0E00               	movlw	0
  1411  007B84  6E3D               	movwf	setup_AD7147@StageBuffer+4,c
  1412                           
  1413                           ;AD7147.c: 41: StageBuffer[3]=0x2121;
  1414  007B86  0E21               	movlw	33
  1415  007B88  6E40               	movwf	setup_AD7147@StageBuffer+7,c
  1416  007B8A  0E21               	movlw	33
  1417  007B8C  6E3F               	movwf	setup_AD7147@StageBuffer+6,c
  1418                           
  1419                           ;AD7147.c: 42: StageBuffer[4]=4000;
  1420  007B8E  0E0F               	movlw	15
  1421  007B90  6E42               	movwf	setup_AD7147@StageBuffer+9,c
  1422  007B92  0EA0               	movlw	160
  1423  007B94  6E41               	movwf	setup_AD7147@StageBuffer+8,c
  1424                           
  1425                           ;AD7147.c: 43: StageBuffer[5]=4000;
  1426  007B96  0E0F               	movlw	15
  1427  007B98  6E44               	movwf	setup_AD7147@StageBuffer+11,c
  1428  007B9A  0EA0               	movlw	160
  1429  007B9C  6E43               	movwf	setup_AD7147@StageBuffer+10,c
  1430                           
  1431                           ;AD7147.c: 44: StageBuffer[6]=4250;
  1432  007B9E  0E10               	movlw	16
  1433  007BA0  6E46               	movwf	setup_AD7147@StageBuffer+13,c
  1434  007BA2  0E9A               	movlw	154
  1435  007BA4  6E45               	movwf	setup_AD7147@StageBuffer+12,c
  1436                           
  1437                           ;AD7147.c: 45: StageBuffer[7]=4250;
  1438  007BA6  0E10               	movlw	16
  1439  007BA8  6E48               	movwf	setup_AD7147@StageBuffer+15,c
  1440  007BAA  0E9A               	movlw	154
  1441  007BAC  6E47               	movwf	setup_AD7147@StageBuffer+14,c
  1442                           
  1443                           ;AD7147.c: 46: write_AD7147(0x088, 8, StageBuffer);
  1444  007BAE  0E00               	movlw	0
  1445  007BB0  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1446  007BB2  0E88               	movlw	136
  1447  007BB4  6E17               	movwf	write_AD7147@RegisterAddress,c
  1448  007BB6  0E00               	movlw	0
  1449  007BB8  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1450  007BBA  0E08               	movlw	8
  1451  007BBC  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1452  007BBE  0E39               	movlw	low setup_AD7147@StageBuffer
  1453  007BC0  6E1B               	movwf	write_AD7147@DataBuffer,c
  1454  007BC2  0E00               	movlw	high setup_AD7147@StageBuffer
  1455  007BC4  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1456  007BC6  ECC3  F03A         	call	_write_AD7147	;wreg free
  1457                           
  1458                           ;AD7147.c: 51: StageBuffer[0]=0x3FEF;
  1459  007BCA  0E3F               	movlw	63
  1460  007BCC  6E3A               	movwf	setup_AD7147@StageBuffer+1,c
  1461  007BCE  0EEF               	movlw	239
  1462  007BD0  6E39               	movwf	setup_AD7147@StageBuffer,c
  1463                           
  1464                           ;AD7147.c: 52: StageBuffer[1]=0x1FFF;
  1465  007BD2  0E1F               	movlw	31
  1466  007BD4  6E3C               	movwf	setup_AD7147@StageBuffer+3,c
  1467  007BD6  683B               	setf	setup_AD7147@StageBuffer+2,c
  1468                           
  1469                           ;AD7147.c: 53: StageBuffer[2]=0x0100;
  1470  007BD8  0E01               	movlw	1
  1471  007BDA  6E3E               	movwf	setup_AD7147@StageBuffer+5,c
  1472  007BDC  0E00               	movlw	0
  1473  007BDE  6E3D               	movwf	setup_AD7147@StageBuffer+4,c
  1474                           
  1475                           ;AD7147.c: 54: StageBuffer[3]=0x2121;
  1476  007BE0  0E21               	movlw	33
  1477  007BE2  6E40               	movwf	setup_AD7147@StageBuffer+7,c
  1478  007BE4  0E21               	movlw	33
  1479  007BE6  6E3F               	movwf	setup_AD7147@StageBuffer+6,c
  1480                           
  1481                           ;AD7147.c: 55: StageBuffer[4]=4000;
  1482  007BE8  0E0F               	movlw	15
  1483  007BEA  6E42               	movwf	setup_AD7147@StageBuffer+9,c
  1484  007BEC  0EA0               	movlw	160
  1485  007BEE  6E41               	movwf	setup_AD7147@StageBuffer+8,c
  1486                           
  1487                           ;AD7147.c: 56: StageBuffer[5]=4000;
  1488  007BF0  0E0F               	movlw	15
  1489  007BF2  6E44               	movwf	setup_AD7147@StageBuffer+11,c
  1490  007BF4  0EA0               	movlw	160
  1491  007BF6  6E43               	movwf	setup_AD7147@StageBuffer+10,c
  1492                           
  1493                           ;AD7147.c: 57: StageBuffer[6]=4250;
  1494  007BF8  0E10               	movlw	16
  1495  007BFA  6E46               	movwf	setup_AD7147@StageBuffer+13,c
  1496  007BFC  0E9A               	movlw	154
  1497  007BFE  6E45               	movwf	setup_AD7147@StageBuffer+12,c
  1498                           
  1499                           ;AD7147.c: 58: StageBuffer[7]=4250;
  1500  007C00  0E10               	movlw	16
  1501  007C02  6E48               	movwf	setup_AD7147@StageBuffer+15,c
  1502  007C04  0E9A               	movlw	154
  1503  007C06  6E47               	movwf	setup_AD7147@StageBuffer+14,c
  1504                           
  1505                           ;AD7147.c: 59: write_AD7147(0x090, 8, StageBuffer);
  1506  007C08  0E00               	movlw	0
  1507  007C0A  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1508  007C0C  0E90               	movlw	144
  1509  007C0E  6E17               	movwf	write_AD7147@RegisterAddress,c
  1510  007C10  0E00               	movlw	0
  1511  007C12  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1512  007C14  0E08               	movlw	8
  1513  007C16  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1514  007C18  0E39               	movlw	low setup_AD7147@StageBuffer
  1515  007C1A  6E1B               	movwf	write_AD7147@DataBuffer,c
  1516  007C1C  0E00               	movlw	high setup_AD7147@StageBuffer
  1517  007C1E  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1518  007C20  ECC3  F03A         	call	_write_AD7147	;wreg free
  1519                           
  1520                           ;AD7147.c: 64: StageBuffer[0]=0x3FBF;
  1521  007C24  0E3F               	movlw	63
  1522  007C26  6E3A               	movwf	setup_AD7147@StageBuffer+1,c
  1523  007C28  0EBF               	movlw	191
  1524  007C2A  6E39               	movwf	setup_AD7147@StageBuffer,c
  1525                           
  1526                           ;AD7147.c: 65: StageBuffer[1]=0x1FFF;
  1527  007C2C  0E1F               	movlw	31
  1528  007C2E  6E3C               	movwf	setup_AD7147@StageBuffer+3,c
  1529  007C30  683B               	setf	setup_AD7147@StageBuffer+2,c
  1530                           
  1531                           ;AD7147.c: 66: StageBuffer[2]=0x0100;
  1532  007C32  0E01               	movlw	1
  1533  007C34  6E3E               	movwf	setup_AD7147@StageBuffer+5,c
  1534  007C36  0E00               	movlw	0
  1535  007C38  6E3D               	movwf	setup_AD7147@StageBuffer+4,c
  1536                           
  1537                           ;AD7147.c: 67: StageBuffer[3]=0x2121;
  1538  007C3A  0E21               	movlw	33
  1539  007C3C  6E40               	movwf	setup_AD7147@StageBuffer+7,c
  1540  007C3E  0E21               	movlw	33
  1541  007C40  6E3F               	movwf	setup_AD7147@StageBuffer+6,c
  1542                           
  1543                           ;AD7147.c: 68: StageBuffer[4]=4000;
  1544  007C42  0E0F               	movlw	15
  1545  007C44  6E42               	movwf	setup_AD7147@StageBuffer+9,c
  1546  007C46  0EA0               	movlw	160
  1547  007C48  6E41               	movwf	setup_AD7147@StageBuffer+8,c
  1548                           
  1549                           ;AD7147.c: 69: StageBuffer[5]=4000;
  1550  007C4A  0E0F               	movlw	15
  1551  007C4C  6E44               	movwf	setup_AD7147@StageBuffer+11,c
  1552  007C4E  0EA0               	movlw	160
  1553  007C50  6E43               	movwf	setup_AD7147@StageBuffer+10,c
  1554                           
  1555                           ;AD7147.c: 70: StageBuffer[6]=4250;
  1556  007C52  0E10               	movlw	16
  1557  007C54  6E46               	movwf	setup_AD7147@StageBuffer+13,c
  1558  007C56  0E9A               	movlw	154
  1559  007C58  6E45               	movwf	setup_AD7147@StageBuffer+12,c
  1560                           
  1561                           ;AD7147.c: 71: StageBuffer[7]=4250;
  1562  007C5A  0E10               	movlw	16
  1563  007C5C  6E48               	movwf	setup_AD7147@StageBuffer+15,c
  1564  007C5E  0E9A               	movlw	154
  1565  007C60  6E47               	movwf	setup_AD7147@StageBuffer+14,c
  1566                           
  1567                           ;AD7147.c: 72: write_AD7147(0x098, 8, StageBuffer);
  1568  007C62  0E00               	movlw	0
  1569  007C64  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1570  007C66  0E98               	movlw	152
  1571  007C68  6E17               	movwf	write_AD7147@RegisterAddress,c
  1572  007C6A  0E00               	movlw	0
  1573  007C6C  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1574  007C6E  0E08               	movlw	8
  1575  007C70  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1576  007C72  0E39               	movlw	low setup_AD7147@StageBuffer
  1577  007C74  6E1B               	movwf	write_AD7147@DataBuffer,c
  1578  007C76  0E00               	movlw	high setup_AD7147@StageBuffer
  1579  007C78  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1580  007C7A  ECC3  F03A         	call	_write_AD7147	;wreg free
  1581                           
  1582                           ;AD7147.c: 77: StageBuffer[0]=0xFFFF;
  1583  007C7E  6839               	setf	setup_AD7147@StageBuffer,c
  1584  007C80  683A               	setf	setup_AD7147@StageBuffer+1,c
  1585                           
  1586                           ;AD7147.c: 78: StageBuffer[1]=0x3FFF;
  1587  007C82  0E3F               	movlw	63
  1588  007C84  6E3C               	movwf	setup_AD7147@StageBuffer+3,c
  1589  007C86  683B               	setf	setup_AD7147@StageBuffer+2,c
  1590                           
  1591                           ;AD7147.c: 79: StageBuffer[2]=0x0000;
  1592  007C88  0E00               	movlw	0
  1593  007C8A  6E3E               	movwf	setup_AD7147@StageBuffer+5,c
  1594  007C8C  0E00               	movlw	0
  1595  007C8E  6E3D               	movwf	setup_AD7147@StageBuffer+4,c
  1596                           
  1597                           ;AD7147.c: 80: StageBuffer[3]=0x2626;
  1598  007C90  0E26               	movlw	38
  1599  007C92  6E40               	movwf	setup_AD7147@StageBuffer+7,c
  1600  007C94  0E26               	movlw	38
  1601  007C96  6E3F               	movwf	setup_AD7147@StageBuffer+6,c
  1602                           
  1603                           ;AD7147.c: 81: StageBuffer[4]=3000;
  1604  007C98  0E0B               	movlw	11
  1605  007C9A  6E42               	movwf	setup_AD7147@StageBuffer+9,c
  1606  007C9C  0EB8               	movlw	184
  1607  007C9E  6E41               	movwf	setup_AD7147@StageBuffer+8,c
  1608                           
  1609                           ;AD7147.c: 82: StageBuffer[5]=3000;
  1610  007CA0  0E0B               	movlw	11
  1611  007CA2  6E44               	movwf	setup_AD7147@StageBuffer+11,c
  1612  007CA4  0EB8               	movlw	184
  1613  007CA6  6E43               	movwf	setup_AD7147@StageBuffer+10,c
  1614                           
  1615                           ;AD7147.c: 83: StageBuffer[6]=4000;
  1616  007CA8  0E0F               	movlw	15
  1617  007CAA  6E46               	movwf	setup_AD7147@StageBuffer+13,c
  1618  007CAC  0EA0               	movlw	160
  1619  007CAE  6E45               	movwf	setup_AD7147@StageBuffer+12,c
  1620                           
  1621                           ;AD7147.c: 84: StageBuffer[7]=4000;
  1622  007CB0  0E0F               	movlw	15
  1623  007CB2  6E48               	movwf	setup_AD7147@StageBuffer+15,c
  1624  007CB4  0EA0               	movlw	160
  1625  007CB6  6E47               	movwf	setup_AD7147@StageBuffer+14,c
  1626                           
  1627                           ;AD7147.c: 85: write_AD7147(0x0A0, 8, StageBuffer);
  1628  007CB8  0E00               	movlw	0
  1629  007CBA  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1630  007CBC  0EA0               	movlw	160
  1631  007CBE  6E17               	movwf	write_AD7147@RegisterAddress,c
  1632  007CC0  0E00               	movlw	0
  1633  007CC2  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1634  007CC4  0E08               	movlw	8
  1635  007CC6  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1636  007CC8  0E39               	movlw	low setup_AD7147@StageBuffer
  1637  007CCA  6E1B               	movwf	write_AD7147@DataBuffer,c
  1638  007CCC  0E00               	movlw	high setup_AD7147@StageBuffer
  1639  007CCE  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1640  007CD0  ECC3  F03A         	call	_write_AD7147	;wreg free
  1641                           
  1642                           ;AD7147.c: 90: StageBuffer[0]=0xFFFF;
  1643  007CD4  6839               	setf	setup_AD7147@StageBuffer,c
  1644  007CD6  683A               	setf	setup_AD7147@StageBuffer+1,c
  1645                           
  1646                           ;AD7147.c: 91: StageBuffer[1]=0x3FFF;
  1647  007CD8  0E3F               	movlw	63
  1648  007CDA  6E3C               	movwf	setup_AD7147@StageBuffer+3,c
  1649  007CDC  683B               	setf	setup_AD7147@StageBuffer+2,c
  1650                           
  1651                           ;AD7147.c: 92: StageBuffer[2]=0x0000;
  1652  007CDE  0E00               	movlw	0
  1653  007CE0  6E3E               	movwf	setup_AD7147@StageBuffer+5,c
  1654  007CE2  0E00               	movlw	0
  1655  007CE4  6E3D               	movwf	setup_AD7147@StageBuffer+4,c
  1656                           
  1657                           ;AD7147.c: 93: StageBuffer[3]=0x2626;
  1658  007CE6  0E26               	movlw	38
  1659  007CE8  6E40               	movwf	setup_AD7147@StageBuffer+7,c
  1660  007CEA  0E26               	movlw	38
  1661  007CEC  6E3F               	movwf	setup_AD7147@StageBuffer+6,c
  1662                           
  1663                           ;AD7147.c: 94: StageBuffer[4]=3000;
  1664  007CEE  0E0B               	movlw	11
  1665  007CF0  6E42               	movwf	setup_AD7147@StageBuffer+9,c
  1666  007CF2  0EB8               	movlw	184
  1667  007CF4  6E41               	movwf	setup_AD7147@StageBuffer+8,c
  1668                           
  1669                           ;AD7147.c: 95: StageBuffer[5]=3000;
  1670  007CF6  0E0B               	movlw	11
  1671  007CF8  6E44               	movwf	setup_AD7147@StageBuffer+11,c
  1672  007CFA  0EB8               	movlw	184
  1673  007CFC  6E43               	movwf	setup_AD7147@StageBuffer+10,c
  1674                           
  1675                           ;AD7147.c: 96: StageBuffer[6]=4000;
  1676  007CFE  0E0F               	movlw	15
  1677  007D00  6E46               	movwf	setup_AD7147@StageBuffer+13,c
  1678  007D02  0EA0               	movlw	160
  1679  007D04  6E45               	movwf	setup_AD7147@StageBuffer+12,c
  1680                           
  1681                           ;AD7147.c: 97: StageBuffer[7]=4000;
  1682  007D06  0E0F               	movlw	15
  1683  007D08  6E48               	movwf	setup_AD7147@StageBuffer+15,c
  1684  007D0A  0EA0               	movlw	160
  1685  007D0C  6E47               	movwf	setup_AD7147@StageBuffer+14,c
  1686                           
  1687                           ;AD7147.c: 98: write_AD7147(0x0A8, 8, StageBuffer);
  1688  007D0E  0E00               	movlw	0
  1689  007D10  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1690  007D12  0EA8               	movlw	168
  1691  007D14  6E17               	movwf	write_AD7147@RegisterAddress,c
  1692  007D16  0E00               	movlw	0
  1693  007D18  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1694  007D1A  0E08               	movlw	8
  1695  007D1C  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1696  007D1E  0E39               	movlw	low setup_AD7147@StageBuffer
  1697  007D20  6E1B               	movwf	write_AD7147@DataBuffer,c
  1698  007D22  0E00               	movlw	high setup_AD7147@StageBuffer
  1699  007D24  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1700  007D26  ECC3  F03A         	call	_write_AD7147	;wreg free
  1701                           
  1702                           ;AD7147.c: 103: StageBuffer[0]=0xFFFF;
  1703  007D2A  6839               	setf	setup_AD7147@StageBuffer,c
  1704  007D2C  683A               	setf	setup_AD7147@StageBuffer+1,c
  1705                           
  1706                           ;AD7147.c: 104: StageBuffer[1]=0x3FFF;
  1707  007D2E  0E3F               	movlw	63
  1708  007D30  6E3C               	movwf	setup_AD7147@StageBuffer+3,c
  1709  007D32  683B               	setf	setup_AD7147@StageBuffer+2,c
  1710                           
  1711                           ;AD7147.c: 105: StageBuffer[2]=0x0000;
  1712  007D34  0E00               	movlw	0
  1713  007D36  6E3E               	movwf	setup_AD7147@StageBuffer+5,c
  1714  007D38  0E00               	movlw	0
  1715  007D3A  6E3D               	movwf	setup_AD7147@StageBuffer+4,c
  1716                           
  1717                           ;AD7147.c: 106: StageBuffer[3]=0x2626;
  1718  007D3C  0E26               	movlw	38
  1719  007D3E  6E40               	movwf	setup_AD7147@StageBuffer+7,c
  1720  007D40  0E26               	movlw	38
  1721  007D42  6E3F               	movwf	setup_AD7147@StageBuffer+6,c
  1722                           
  1723                           ;AD7147.c: 107: StageBuffer[4]=3000;
  1724  007D44  0E0B               	movlw	11
  1725  007D46  6E42               	movwf	setup_AD7147@StageBuffer+9,c
  1726  007D48  0EB8               	movlw	184
  1727  007D4A  6E41               	movwf	setup_AD7147@StageBuffer+8,c
  1728                           
  1729                           ;AD7147.c: 108: StageBuffer[5]=3000;
  1730  007D4C  0E0B               	movlw	11
  1731  007D4E  6E44               	movwf	setup_AD7147@StageBuffer+11,c
  1732  007D50  0EB8               	movlw	184
  1733  007D52  6E43               	movwf	setup_AD7147@StageBuffer+10,c
  1734                           
  1735                           ;AD7147.c: 109: StageBuffer[6]=4000;
  1736  007D54  0E0F               	movlw	15
  1737  007D56  6E46               	movwf	setup_AD7147@StageBuffer+13,c
  1738  007D58  0EA0               	movlw	160
  1739  007D5A  6E45               	movwf	setup_AD7147@StageBuffer+12,c
  1740                           
  1741                           ;AD7147.c: 110: StageBuffer[7]=4000;
  1742  007D5C  0E0F               	movlw	15
  1743  007D5E  6E48               	movwf	setup_AD7147@StageBuffer+15,c
  1744  007D60  0EA0               	movlw	160
  1745  007D62  6E47               	movwf	setup_AD7147@StageBuffer+14,c
  1746                           
  1747                           ;AD7147.c: 111: write_AD7147(0x0B0, 8, StageBuffer);
  1748  007D64  0E00               	movlw	0
  1749  007D66  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1750  007D68  0EB0               	movlw	176
  1751  007D6A  6E17               	movwf	write_AD7147@RegisterAddress,c
  1752  007D6C  0E00               	movlw	0
  1753  007D6E  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1754  007D70  0E08               	movlw	8
  1755  007D72  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1756  007D74  0E39               	movlw	low setup_AD7147@StageBuffer
  1757  007D76  6E1B               	movwf	write_AD7147@DataBuffer,c
  1758  007D78  0E00               	movlw	high setup_AD7147@StageBuffer
  1759  007D7A  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1760  007D7C  ECC3  F03A         	call	_write_AD7147	;wreg free
  1761                           
  1762                           ;AD7147.c: 116: StageBuffer[0]=0xFFFF;
  1763  007D80  6839               	setf	setup_AD7147@StageBuffer,c
  1764  007D82  683A               	setf	setup_AD7147@StageBuffer+1,c
  1765                           
  1766                           ;AD7147.c: 117: StageBuffer[1]=0x3FFE;
  1767  007D84  0E3F               	movlw	63
  1768  007D86  6E3C               	movwf	setup_AD7147@StageBuffer+3,c
  1769  007D88  0EFE               	movlw	254
  1770  007D8A  6E3B               	movwf	setup_AD7147@StageBuffer+2,c
  1771                           
  1772                           ;AD7147.c: 118: StageBuffer[2]=0x0000;
  1773  007D8C  0E00               	movlw	0
  1774  007D8E  6E3E               	movwf	setup_AD7147@StageBuffer+5,c
  1775  007D90  0E00               	movlw	0
  1776  007D92  6E3D               	movwf	setup_AD7147@StageBuffer+4,c
  1777                           
  1778                           ;AD7147.c: 119: StageBuffer[3]=0x2626;
  1779  007D94  0E26               	movlw	38
  1780  007D96  6E40               	movwf	setup_AD7147@StageBuffer+7,c
  1781  007D98  0E26               	movlw	38
  1782  007D9A  6E3F               	movwf	setup_AD7147@StageBuffer+6,c
  1783                           
  1784                           ;AD7147.c: 120: StageBuffer[4]=3000;
  1785  007D9C  0E0B               	movlw	11
  1786  007D9E  6E42               	movwf	setup_AD7147@StageBuffer+9,c
  1787  007DA0  0EB8               	movlw	184
  1788  007DA2  6E41               	movwf	setup_AD7147@StageBuffer+8,c
  1789                           
  1790                           ;AD7147.c: 121: StageBuffer[5]=3000;
  1791  007DA4  0E0B               	movlw	11
  1792  007DA6  6E44               	movwf	setup_AD7147@StageBuffer+11,c
  1793  007DA8  0EB8               	movlw	184
  1794  007DAA  6E43               	movwf	setup_AD7147@StageBuffer+10,c
  1795                           
  1796                           ;AD7147.c: 122: StageBuffer[6]=4000;
  1797  007DAC  0E0F               	movlw	15
  1798  007DAE  6E46               	movwf	setup_AD7147@StageBuffer+13,c
  1799  007DB0  0EA0               	movlw	160
  1800  007DB2  6E45               	movwf	setup_AD7147@StageBuffer+12,c
  1801                           
  1802                           ;AD7147.c: 123: StageBuffer[7]=4000;
  1803  007DB4  0E0F               	movlw	15
  1804  007DB6  6E48               	movwf	setup_AD7147@StageBuffer+15,c
  1805  007DB8  0EA0               	movlw	160
  1806  007DBA  6E47               	movwf	setup_AD7147@StageBuffer+14,c
  1807                           
  1808                           ;AD7147.c: 124: write_AD7147(0x0B8, 8, StageBuffer);
  1809  007DBC  0E00               	movlw	0
  1810  007DBE  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1811  007DC0  0EB8               	movlw	184
  1812  007DC2  6E17               	movwf	write_AD7147@RegisterAddress,c
  1813  007DC4  0E00               	movlw	0
  1814  007DC6  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1815  007DC8  0E08               	movlw	8
  1816  007DCA  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1817  007DCC  0E39               	movlw	low setup_AD7147@StageBuffer
  1818  007DCE  6E1B               	movwf	write_AD7147@DataBuffer,c
  1819  007DD0  0E00               	movlw	high setup_AD7147@StageBuffer
  1820  007DD2  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1821  007DD4  ECC3  F03A         	call	_write_AD7147	;wreg free
  1822                           
  1823                           ;AD7147.c: 129: StageBuffer[0]=0xFFFF;
  1824  007DD8  6839               	setf	setup_AD7147@StageBuffer,c
  1825  007DDA  683A               	setf	setup_AD7147@StageBuffer+1,c
  1826                           
  1827                           ;AD7147.c: 130: StageBuffer[1]=0x3FFF;
  1828  007DDC  0E3F               	movlw	63
  1829  007DDE  6E3C               	movwf	setup_AD7147@StageBuffer+3,c
  1830  007DE0  683B               	setf	setup_AD7147@StageBuffer+2,c
  1831                           
  1832                           ;AD7147.c: 131: StageBuffer[2]=0x0000;
  1833  007DE2  0E00               	movlw	0
  1834  007DE4  6E3E               	movwf	setup_AD7147@StageBuffer+5,c
  1835  007DE6  0E00               	movlw	0
  1836  007DE8  6E3D               	movwf	setup_AD7147@StageBuffer+4,c
  1837                           
  1838                           ;AD7147.c: 132: StageBuffer[3]=0x2626;
  1839  007DEA  0E26               	movlw	38
  1840  007DEC  6E40               	movwf	setup_AD7147@StageBuffer+7,c
  1841  007DEE  0E26               	movlw	38
  1842  007DF0  6E3F               	movwf	setup_AD7147@StageBuffer+6,c
  1843                           
  1844                           ;AD7147.c: 133: StageBuffer[4]=3000;
  1845  007DF2  0E0B               	movlw	11
  1846  007DF4  6E42               	movwf	setup_AD7147@StageBuffer+9,c
  1847  007DF6  0EB8               	movlw	184
  1848  007DF8  6E41               	movwf	setup_AD7147@StageBuffer+8,c
  1849                           
  1850                           ;AD7147.c: 134: StageBuffer[5]=3000;
  1851  007DFA  0E0B               	movlw	11
  1852  007DFC  6E44               	movwf	setup_AD7147@StageBuffer+11,c
  1853  007DFE  0EB8               	movlw	184
  1854  007E00  6E43               	movwf	setup_AD7147@StageBuffer+10,c
  1855                           
  1856                           ;AD7147.c: 135: StageBuffer[6]=4000;
  1857  007E02  0E0F               	movlw	15
  1858  007E04  6E46               	movwf	setup_AD7147@StageBuffer+13,c
  1859  007E06  0EA0               	movlw	160
  1860  007E08  6E45               	movwf	setup_AD7147@StageBuffer+12,c
  1861                           
  1862                           ;AD7147.c: 136: StageBuffer[7]=4000;
  1863  007E0A  0E0F               	movlw	15
  1864  007E0C  6E48               	movwf	setup_AD7147@StageBuffer+15,c
  1865  007E0E  0EA0               	movlw	160
  1866  007E10  6E47               	movwf	setup_AD7147@StageBuffer+14,c
  1867                           
  1868                           ;AD7147.c: 137: write_AD7147(0x0C0, 8, StageBuffer);
  1869  007E12  0E00               	movlw	0
  1870  007E14  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1871  007E16  0EC0               	movlw	192
  1872  007E18  6E17               	movwf	write_AD7147@RegisterAddress,c
  1873  007E1A  0E00               	movlw	0
  1874  007E1C  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1875  007E1E  0E08               	movlw	8
  1876  007E20  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1877  007E22  0E39               	movlw	low setup_AD7147@StageBuffer
  1878  007E24  6E1B               	movwf	write_AD7147@DataBuffer,c
  1879  007E26  0E00               	movlw	high setup_AD7147@StageBuffer
  1880  007E28  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1881  007E2A  ECC3  F03A         	call	_write_AD7147	;wreg free
  1882                           
  1883                           ;AD7147.c: 142: StageBuffer[0]=0xFFFF;
  1884  007E2E  6839               	setf	setup_AD7147@StageBuffer,c
  1885  007E30  683A               	setf	setup_AD7147@StageBuffer+1,c
  1886                           
  1887                           ;AD7147.c: 143: StageBuffer[1]=0x3FFF;
  1888  007E32  0E3F               	movlw	63
  1889  007E34  6E3C               	movwf	setup_AD7147@StageBuffer+3,c
  1890  007E36  683B               	setf	setup_AD7147@StageBuffer+2,c
  1891                           
  1892                           ;AD7147.c: 144: StageBuffer[2]=0x0000;
  1893  007E38  0E00               	movlw	0
  1894  007E3A  6E3E               	movwf	setup_AD7147@StageBuffer+5,c
  1895  007E3C  0E00               	movlw	0
  1896  007E3E  6E3D               	movwf	setup_AD7147@StageBuffer+4,c
  1897                           
  1898                           ;AD7147.c: 145: StageBuffer[3]=0x2626;
  1899  007E40  0E26               	movlw	38
  1900  007E42  6E40               	movwf	setup_AD7147@StageBuffer+7,c
  1901  007E44  0E26               	movlw	38
  1902  007E46  6E3F               	movwf	setup_AD7147@StageBuffer+6,c
  1903                           
  1904                           ;AD7147.c: 146: StageBuffer[4]=3000;
  1905  007E48  0E0B               	movlw	11
  1906  007E4A  6E42               	movwf	setup_AD7147@StageBuffer+9,c
  1907  007E4C  0EB8               	movlw	184
  1908  007E4E  6E41               	movwf	setup_AD7147@StageBuffer+8,c
  1909                           
  1910                           ;AD7147.c: 147: StageBuffer[5]=3000;
  1911  007E50  0E0B               	movlw	11
  1912  007E52  6E44               	movwf	setup_AD7147@StageBuffer+11,c
  1913  007E54  0EB8               	movlw	184
  1914  007E56  6E43               	movwf	setup_AD7147@StageBuffer+10,c
  1915                           
  1916                           ;AD7147.c: 148: StageBuffer[6]=4000;
  1917  007E58  0E0F               	movlw	15
  1918  007E5A  6E46               	movwf	setup_AD7147@StageBuffer+13,c
  1919  007E5C  0EA0               	movlw	160
  1920  007E5E  6E45               	movwf	setup_AD7147@StageBuffer+12,c
  1921                           
  1922                           ;AD7147.c: 149: StageBuffer[7]=4000;
  1923  007E60  0E0F               	movlw	15
  1924  007E62  6E48               	movwf	setup_AD7147@StageBuffer+15,c
  1925  007E64  0EA0               	movlw	160
  1926  007E66  6E47               	movwf	setup_AD7147@StageBuffer+14,c
  1927                           
  1928                           ;AD7147.c: 150: write_AD7147(0x0C8, 8, StageBuffer);
  1929  007E68  0E00               	movlw	0
  1930  007E6A  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1931  007E6C  0EC8               	movlw	200
  1932  007E6E  6E17               	movwf	write_AD7147@RegisterAddress,c
  1933  007E70  0E00               	movlw	0
  1934  007E72  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1935  007E74  0E08               	movlw	8
  1936  007E76  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1937  007E78  0E39               	movlw	low setup_AD7147@StageBuffer
  1938  007E7A  6E1B               	movwf	write_AD7147@DataBuffer,c
  1939  007E7C  0E00               	movlw	high setup_AD7147@StageBuffer
  1940  007E7E  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1941  007E80  ECC3  F03A         	call	_write_AD7147	;wreg free
  1942                           
  1943                           ;AD7147.c: 155: StageBuffer[0]=0xFFFF;
  1944  007E84  6839               	setf	setup_AD7147@StageBuffer,c
  1945  007E86  683A               	setf	setup_AD7147@StageBuffer+1,c
  1946                           
  1947                           ;AD7147.c: 156: StageBuffer[1]=0x3FFF;
  1948  007E88  0E3F               	movlw	63
  1949  007E8A  6E3C               	movwf	setup_AD7147@StageBuffer+3,c
  1950  007E8C  683B               	setf	setup_AD7147@StageBuffer+2,c
  1951                           
  1952                           ;AD7147.c: 157: StageBuffer[2]=0x0000;
  1953  007E8E  0E00               	movlw	0
  1954  007E90  6E3E               	movwf	setup_AD7147@StageBuffer+5,c
  1955  007E92  0E00               	movlw	0
  1956  007E94  6E3D               	movwf	setup_AD7147@StageBuffer+4,c
  1957                           
  1958                           ;AD7147.c: 158: StageBuffer[3]=0x2626;
  1959  007E96  0E26               	movlw	38
  1960  007E98  6E40               	movwf	setup_AD7147@StageBuffer+7,c
  1961  007E9A  0E26               	movlw	38
  1962  007E9C  6E3F               	movwf	setup_AD7147@StageBuffer+6,c
  1963                           
  1964                           ;AD7147.c: 159: StageBuffer[4]=3000;
  1965  007E9E  0E0B               	movlw	11
  1966  007EA0  6E42               	movwf	setup_AD7147@StageBuffer+9,c
  1967  007EA2  0EB8               	movlw	184
  1968  007EA4  6E41               	movwf	setup_AD7147@StageBuffer+8,c
  1969                           
  1970                           ;AD7147.c: 160: StageBuffer[5]=3000;
  1971  007EA6  0E0B               	movlw	11
  1972  007EA8  6E44               	movwf	setup_AD7147@StageBuffer+11,c
  1973  007EAA  0EB8               	movlw	184
  1974  007EAC  6E43               	movwf	setup_AD7147@StageBuffer+10,c
  1975                           
  1976                           ;AD7147.c: 161: StageBuffer[6]=4000;
  1977  007EAE  0E0F               	movlw	15
  1978  007EB0  6E46               	movwf	setup_AD7147@StageBuffer+13,c
  1979  007EB2  0EA0               	movlw	160
  1980  007EB4  6E45               	movwf	setup_AD7147@StageBuffer+12,c
  1981                           
  1982                           ;AD7147.c: 162: StageBuffer[7]=4000;
  1983  007EB6  0E0F               	movlw	15
  1984  007EB8  6E48               	movwf	setup_AD7147@StageBuffer+15,c
  1985  007EBA  0EA0               	movlw	160
  1986  007EBC  6E47               	movwf	setup_AD7147@StageBuffer+14,c
  1987                           
  1988                           ;AD7147.c: 163: write_AD7147(0x0D0, 8, StageBuffer);
  1989  007EBE  0E00               	movlw	0
  1990  007EC0  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1991  007EC2  0ED0               	movlw	208
  1992  007EC4  6E17               	movwf	write_AD7147@RegisterAddress,c
  1993  007EC6  0E00               	movlw	0
  1994  007EC8  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1995  007ECA  0E08               	movlw	8
  1996  007ECC  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1997  007ECE  0E39               	movlw	low setup_AD7147@StageBuffer
  1998  007ED0  6E1B               	movwf	write_AD7147@DataBuffer,c
  1999  007ED2  0E00               	movlw	high setup_AD7147@StageBuffer
  2000  007ED4  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  2001  007ED6  ECC3  F03A         	call	_write_AD7147	;wreg free
  2002                           
  2003                           ;AD7147.c: 168: StageBuffer[0]=0xFFFF;
  2004  007EDA  6839               	setf	setup_AD7147@StageBuffer,c
  2005  007EDC  683A               	setf	setup_AD7147@StageBuffer+1,c
  2006                           
  2007                           ;AD7147.c: 169: StageBuffer[1]=0x3FFF;
  2008  007EDE  0E3F               	movlw	63
  2009  007EE0  6E3C               	movwf	setup_AD7147@StageBuffer+3,c
  2010  007EE2  683B               	setf	setup_AD7147@StageBuffer+2,c
  2011                           
  2012                           ;AD7147.c: 170: StageBuffer[2]=0x0000;
  2013  007EE4  0E00               	movlw	0
  2014  007EE6  6E3E               	movwf	setup_AD7147@StageBuffer+5,c
  2015  007EE8  0E00               	movlw	0
  2016  007EEA  6E3D               	movwf	setup_AD7147@StageBuffer+4,c
  2017                           
  2018                           ;AD7147.c: 171: StageBuffer[3]=0x2626;
  2019  007EEC  0E26               	movlw	38
  2020  007EEE  6E40               	movwf	setup_AD7147@StageBuffer+7,c
  2021  007EF0  0E26               	movlw	38
  2022  007EF2  6E3F               	movwf	setup_AD7147@StageBuffer+6,c
  2023                           
  2024                           ;AD7147.c: 172: StageBuffer[4]=3000;
  2025  007EF4  0E0B               	movlw	11
  2026  007EF6  6E42               	movwf	setup_AD7147@StageBuffer+9,c
  2027  007EF8  0EB8               	movlw	184
  2028  007EFA  6E41               	movwf	setup_AD7147@StageBuffer+8,c
  2029                           
  2030                           ;AD7147.c: 173: StageBuffer[5]=3000;
  2031  007EFC  0E0B               	movlw	11
  2032  007EFE  6E44               	movwf	setup_AD7147@StageBuffer+11,c
  2033  007F00  0EB8               	movlw	184
  2034  007F02  6E43               	movwf	setup_AD7147@StageBuffer+10,c
  2035                           
  2036                           ;AD7147.c: 174: StageBuffer[6]=4000;
  2037  007F04  0E0F               	movlw	15
  2038  007F06  6E46               	movwf	setup_AD7147@StageBuffer+13,c
  2039  007F08  0EA0               	movlw	160
  2040  007F0A  6E45               	movwf	setup_AD7147@StageBuffer+12,c
  2041                           
  2042                           ;AD7147.c: 175: StageBuffer[7]=4000;
  2043  007F0C  0E0F               	movlw	15
  2044  007F0E  6E48               	movwf	setup_AD7147@StageBuffer+15,c
  2045  007F10  0EA0               	movlw	160
  2046  007F12  6E47               	movwf	setup_AD7147@StageBuffer+14,c
  2047                           
  2048                           ;AD7147.c: 176: write_AD7147(0x0D8, 8, StageBuffer);
  2049  007F14  0E00               	movlw	0
  2050  007F16  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  2051  007F18  0ED8               	movlw	216
  2052  007F1A  6E17               	movwf	write_AD7147@RegisterAddress,c
  2053  007F1C  0E00               	movlw	0
  2054  007F1E  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  2055  007F20  0E08               	movlw	8
  2056  007F22  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  2057  007F24  0E39               	movlw	low setup_AD7147@StageBuffer
  2058  007F26  6E1B               	movwf	write_AD7147@DataBuffer,c
  2059  007F28  0E00               	movlw	high setup_AD7147@StageBuffer
  2060  007F2A  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  2061  007F2C  ECC3  F03A         	call	_write_AD7147	;wreg free
  2062                           
  2063                           ;AD7147.c: 183: AD7147Registers[0] = 0x82B2;
  2064  007F30  0E82               	movlw	130
  2065  007F32  6E2A               	movwf	setup_AD7147@AD7147Registers+1,c
  2066  007F34  0EB2               	movlw	178
  2067  007F36  6E29               	movwf	setup_AD7147@AD7147Registers,c
  2068                           
  2069                           ;AD7147.c: 184: AD7147Registers[1] = 0x0000;
  2070  007F38  0E00               	movlw	0
  2071  007F3A  6E2C               	movwf	setup_AD7147@AD7147Registers+3,c
  2072  007F3C  0E00               	movlw	0
  2073  007F3E  6E2B               	movwf	setup_AD7147@AD7147Registers+2,c
  2074                           
  2075                           ;AD7147.c: 185: AD7147Registers[2] = 0x3230;
  2076  007F40  0E32               	movlw	50
  2077  007F42  6E2E               	movwf	setup_AD7147@AD7147Registers+5,c
  2078  007F44  0E30               	movlw	48
  2079  007F46  6E2D               	movwf	setup_AD7147@AD7147Registers+4,c
  2080                           
  2081                           ;AD7147.c: 186: AD7147Registers[3] = 0x0419;
  2082  007F48  0E04               	movlw	4
  2083  007F4A  6E30               	movwf	setup_AD7147@AD7147Registers+7,c
  2084  007F4C  0E19               	movlw	25
  2085  007F4E  6E2F               	movwf	setup_AD7147@AD7147Registers+6,c
  2086                           
  2087                           ;AD7147.c: 187: AD7147Registers[4] = 0x0832;
  2088  007F50  0E08               	movlw	8
  2089  007F52  6E32               	movwf	setup_AD7147@AD7147Registers+9,c
  2090  007F54  0E32               	movlw	50
  2091  007F56  6E31               	movwf	setup_AD7147@AD7147Registers+8,c
  2092                           
  2093                           ;AD7147.c: 188: AD7147Registers[5] = 0x0000;
  2094  007F58  0E00               	movlw	0
  2095  007F5A  6E34               	movwf	setup_AD7147@AD7147Registers+11,c
  2096  007F5C  0E00               	movlw	0
  2097  007F5E  6E33               	movwf	setup_AD7147@AD7147Registers+10,c
  2098                           
  2099                           ;AD7147.c: 189: AD7147Registers[6] = 0x0000;
  2100  007F60  0E00               	movlw	0
  2101  007F62  6E36               	movwf	setup_AD7147@AD7147Registers+13,c
  2102  007F64  0E00               	movlw	0
  2103  007F66  6E35               	movwf	setup_AD7147@AD7147Registers+12,c
  2104                           
  2105                           ;AD7147.c: 190: AD7147Registers[7] = 0x0000;
  2106  007F68  0E00               	movlw	0
  2107  007F6A  6E38               	movwf	setup_AD7147@AD7147Registers+15,c
  2108  007F6C  0E00               	movlw	0
  2109  007F6E  6E37               	movwf	setup_AD7147@AD7147Registers+14,c
  2110                           
  2111                           ;AD7147.c: 191: write_AD7147(0x000, 8, AD7147Registers);
  2112  007F70  0E00               	movlw	0
  2113  007F72  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  2114  007F74  0E00               	movlw	0
  2115  007F76  6E17               	movwf	write_AD7147@RegisterAddress,c
  2116  007F78  0E00               	movlw	0
  2117  007F7A  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  2118  007F7C  0E08               	movlw	8
  2119  007F7E  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  2120  007F80  0E29               	movlw	low setup_AD7147@AD7147Registers
  2121  007F82  6E1B               	movwf	write_AD7147@DataBuffer,c
  2122  007F84  0E00               	movlw	high setup_AD7147@AD7147Registers
  2123  007F86  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  2124  007F88  ECC3  F03A         	call	_write_AD7147	;wreg free
  2125                           
  2126                           ;AD7147.c: 194: AD7147Registers[0] = 0x0FFF;
  2127  007F8C  0E0F               	movlw	15
  2128  007F8E  6E2A               	movwf	setup_AD7147@AD7147Registers+1,c
  2129  007F90  6829               	setf	setup_AD7147@AD7147Registers,c
  2130                           
  2131                           ;AD7147.c: 195: write_AD7147(0x001, 1, AD7147Registers);
  2132  007F92  0E00               	movlw	0
  2133  007F94  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  2134  007F96  0E01               	movlw	1
  2135  007F98  6E17               	movwf	write_AD7147@RegisterAddress,c
  2136  007F9A  0E00               	movlw	0
  2137  007F9C  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  2138  007F9E  0E01               	movlw	1
  2139  007FA0  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  2140  007FA2  0E29               	movlw	low setup_AD7147@AD7147Registers
  2141  007FA4  6E1B               	movwf	write_AD7147@DataBuffer,c
  2142  007FA6  0E00               	movlw	high setup_AD7147@AD7147Registers
  2143  007FA8  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  2144  007FAA  ECC3  F03A         	call	_write_AD7147	;wreg free
  2145                           
  2146                           ;AD7147.c: 197: unsigned int int_low = read_AD7147_interrupt(0x008);
  2147  007FAE  0E00               	movlw	0
  2148  007FB0  6E18               	movwf	read_AD7147_interrupt@RegisterAddress+1,c
  2149  007FB2  0E08               	movlw	8
  2150  007FB4  6E17               	movwf	read_AD7147_interrupt@RegisterAddress,c
  2151  007FB6  EC8E  F03A         	call	_read_AD7147_interrupt	;wreg free
  2152  007FBA  C017  F023         	movff	?_read_AD7147_interrupt,setup_AD7147@int_low
  2153  007FBE  C018  F024         	movff	?_read_AD7147_interrupt+1,setup_AD7147@int_low+1
  2154                           
  2155                           ;AD7147.c: 198: unsigned int int_high = read_AD7147_interrupt(0x009);
  2156  007FC2  0E00               	movlw	0
  2157  007FC4  6E18               	movwf	read_AD7147_interrupt@RegisterAddress+1,c
  2158  007FC6  0E09               	movlw	9
  2159  007FC8  6E17               	movwf	read_AD7147_interrupt@RegisterAddress,c
  2160  007FCA  EC8E  F03A         	call	_read_AD7147_interrupt	;wreg free
  2161  007FCE  C017  F025         	movff	?_read_AD7147_interrupt,setup_AD7147@int_high
  2162  007FD2  C018  F026         	movff	?_read_AD7147_interrupt+1,setup_AD7147@int_high+1
  2163                           
  2164                           ;AD7147.c: 199: unsigned int int_complete = read_AD7147_interrupt(0x00A);
  2165  007FD6  0E00               	movlw	0
  2166  007FD8  6E18               	movwf	read_AD7147_interrupt@RegisterAddress+1,c
  2167  007FDA  0E0A               	movlw	10
  2168  007FDC  6E17               	movwf	read_AD7147_interrupt@RegisterAddress,c
  2169  007FDE  EC8E  F03A         	call	_read_AD7147_interrupt	;wreg free
  2170  007FE2  C017  F027         	movff	?_read_AD7147_interrupt,setup_AD7147@int_complete
  2171  007FE6  C018  F028         	movff	?_read_AD7147_interrupt+1,setup_AD7147@int_complete+1
  2172                           
  2173                           ;AD7147.c: 200: get_CDC(cdc,1);
  2174  007FEA  C021  F001         	movff	setup_AD7147@cdc,get_CDC@cdc
  2175  007FEE  C022  F002         	movff	setup_AD7147@cdc+1,get_CDC@cdc+1
  2176  007FF2  0E00               	movlw	0
  2177  007FF4  6E04               	movwf	get_CDC@state+1,c
  2178  007FF6  0E01               	movlw	1
  2179  007FF8  6E03               	movwf	get_CDC@state,c
  2180  007FFA  EC7D  F03A         	call	_get_CDC	;wreg free
  2181  007FFE  0012               	return		;funcret
  2182  008000                     __end_of_setup_AD7147:
  2183                           	opt stack 0
  2184                           postinc0	equ	0xFEE
  2185                           wreg	equ	0xFE8
  2186                           status	equ	0xFD8
  2187                           
  2188 ;; *************** function _write_AD7147 *****************
  2189 ;; Defined at:
  2190 ;;		line 203 in file "AD7147.c"
  2191 ;; Parameters:    Size  Location     Type
  2192 ;;  RegisterAddr    2   22[COMRAM] unsigned int 
  2193 ;;  NumberOfRegi    2   24[COMRAM] unsigned int 
  2194 ;;  DataBuffer      2   26[COMRAM] PTR unsigned int 
  2195 ;;		 -> setup_AD7147@AD7147Registers(16), setup_AD7147@StageBuffer(16), 
  2196 ;; Auto vars:     Size  Location     Type
  2197 ;;  i               2   30[COMRAM] unsigned int 
  2198 ;;  Register_Val    2   28[COMRAM] unsigned int 
  2199 ;; Return value:  Size  Location     Type
  2200 ;;                  1    wreg      void 
  2201 ;; Registers used:
  2202 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2203 ;; Tracked objects:
  2204 ;;		On entry : 0/0
  2205 ;;		On exit  : 0/0
  2206 ;;		Unchanged: 0/0
  2207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2208 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2209 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2211 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2212 ;;Total ram usage:       10 bytes
  2213 ;; Hardware stack levels used:    1
  2214 ;; Hardware stack levels required when called:    1
  2215 ;; This function calls:
  2216 ;;		_w32_spi
  2217 ;; This function is called by:
  2218 ;;		_setup_AD7147
  2219 ;; This function uses a non-reentrant model
  2220 ;;
  2221                           
  2222                           	psect	text8
  2223  007586                     __ptext8:
  2224                           	opt stack 0
  2225  007586                     _write_AD7147:
  2226                           	opt stack 28
  2227                           
  2228                           ;AD7147.c: 205: unsigned int Register_Values = 0xE000 + RegisterAddress;
  2229                           
  2230                           ;incstack = 0
  2231  007586  0E00               	movlw	0
  2232  007588  2417               	addwf	write_AD7147@RegisterAddress,w,c
  2233  00758A  6E1D               	movwf	write_AD7147@Register_Values,c
  2234  00758C  0EE0               	movlw	224
  2235  00758E  2018               	addwfc	write_AD7147@RegisterAddress+1,w,c
  2236  007590  6E1E               	movwf	write_AD7147@Register_Values+1,c
  2237                           
  2238                           ;AD7147.c: 207: for (unsigned int i=0; i<NumberOfRegisters; i++)
  2239  007592  0E00               	movlw	0
  2240  007594  6E20               	movwf	write_AD7147@i+1,c
  2241  007596  0E00               	movlw	0
  2242  007598  6E1F               	movwf	write_AD7147@i,c
  2243  00759A  D017               	goto	l1635
  2244  00759C                     l1631:
  2245                           
  2246                           ;AD7147.c: 208: {
  2247                           ;AD7147.c: 211: w32_spi((Register_Values+i),DataBuffer[i]);
  2248  00759C  501F               	movf	write_AD7147@i,w,c
  2249  00759E  241D               	addwf	write_AD7147@Register_Values,w,c
  2250  0075A0  6E01               	movwf	w32_spi@address,c
  2251  0075A2  5020               	movf	write_AD7147@i+1,w,c
  2252  0075A4  201E               	addwfc	write_AD7147@Register_Values+1,w,c
  2253  0075A6  6E02               	movwf	w32_spi@address+1,c
  2254  0075A8  90D8               	bcf	status,0,c
  2255  0075AA  341F               	rlcf	write_AD7147@i,w,c
  2256  0075AC  6ED9               	movwf	fsr2l,c
  2257  0075AE  3420               	rlcf	write_AD7147@i+1,w,c
  2258  0075B0  6EDA               	movwf	fsr2h,c
  2259  0075B2  501B               	movf	write_AD7147@DataBuffer,w,c
  2260  0075B4  26D9               	addwf	fsr2l,f,c
  2261  0075B6  501C               	movf	write_AD7147@DataBuffer+1,w,c
  2262  0075B8  22DA               	addwfc	fsr2h,f,c
  2263  0075BA  CFDE F003          	movff	postinc2,w32_spi@data
  2264  0075BE  CFDD F004          	movff	postdec2,w32_spi@data+1
  2265  0075C2  EC18  F03B         	call	_w32_spi	;wreg free
  2266  0075C6  4A1F               	infsnz	write_AD7147@i,f,c
  2267  0075C8  2A20               	incf	write_AD7147@i+1,f,c
  2268  0075CA                     l1635:
  2269  0075CA  5019               	movf	write_AD7147@NumberOfRegisters,w,c
  2270  0075CC  5C1F               	subwf	write_AD7147@i,w,c
  2271  0075CE  501A               	movf	write_AD7147@NumberOfRegisters+1,w,c
  2272  0075D0  5820               	subwfb	write_AD7147@i+1,w,c
  2273  0075D2  B0D8               	btfsc	status,0,c
  2274  0075D4  0012               	return	
  2275  0075D6  D7E2               	goto	l1631
  2276  0075D8                     __end_of_write_AD7147:
  2277                           	opt stack 0
  2278                           postinc0	equ	0xFEE
  2279                           wreg	equ	0xFE8
  2280                           postinc2	equ	0xFDE
  2281                           postdec2	equ	0xFDD
  2282                           fsr2h	equ	0xFDA
  2283                           fsr2l	equ	0xFD9
  2284                           status	equ	0xFD8
  2285                           
  2286 ;; *************** function _read_AD7147_interrupt *****************
  2287 ;; Defined at:
  2288 ;;		line 230 in file "AD7147.c"
  2289 ;; Parameters:    Size  Location     Type
  2290 ;;  RegisterAddr    2   22[COMRAM] unsigned int 
  2291 ;; Auto vars:     Size  Location     Type
  2292 ;;  interrupt_cl    2   26[COMRAM] unsigned int 
  2293 ;;  Register_Val    2   24[COMRAM] unsigned int 
  2294 ;; Return value:  Size  Location     Type
  2295 ;;                  2   22[COMRAM] unsigned int 
  2296 ;; Registers used:
  2297 ;;		wreg, status,2, status,0, cstack
  2298 ;; Tracked objects:
  2299 ;;		On entry : 0/0
  2300 ;;		On exit  : 0/0
  2301 ;;		Unchanged: 0/0
  2302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2303 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2304 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2306 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2307 ;;Total ram usage:        6 bytes
  2308 ;; Hardware stack levels used:    1
  2309 ;; Hardware stack levels required when called:    1
  2310 ;; This function calls:
  2311 ;;		_w16_r16_spi
  2312 ;; This function is called by:
  2313 ;;		_setup_AD7147
  2314 ;; This function uses a non-reentrant model
  2315 ;;
  2316                           
  2317                           	psect	text9
  2318  00751C                     __ptext9:
  2319                           	opt stack 0
  2320  00751C                     _read_AD7147_interrupt:
  2321                           	opt stack 28
  2322                           
  2323                           ;AD7147.c: 232: unsigned int Register_Values = 0xE400 + RegisterAddress;
  2324                           
  2325                           ;incstack = 0
  2326  00751C  0E00               	movlw	0
  2327  00751E  2417               	addwf	read_AD7147_interrupt@RegisterAddress,w,c
  2328  007520  6E19               	movwf	read_AD7147_interrupt@Register_Values,c
  2329  007522  0EE4               	movlw	228
  2330  007524  2018               	addwfc	read_AD7147_interrupt@RegisterAddress+1,w,c
  2331  007526  6E1A               	movwf	read_AD7147_interrupt@Register_Values+1,c
  2332                           
  2333                           ;AD7147.c: 233: unsigned int interrupt_clear = w16_r16_spi(Register_Values);
  2334  007528  C019  F001         	movff	read_AD7147_interrupt@Register_Values,w16_r16_spi@address
  2335  00752C  C01A  F002         	movff	read_AD7147_interrupt@Register_Values+1,w16_r16_spi@address+1
  2336  007530  EC4F  F03B         	call	_w16_r16_spi	;wreg free
  2337  007534  C001  F01B         	movff	?_w16_r16_spi,read_AD7147_interrupt@interrupt_clear
  2338  007538  C002  F01C         	movff	?_w16_r16_spi+1,read_AD7147_interrupt@interrupt_clear+1
  2339                           
  2340                           ;AD7147.c: 236: return interrupt_clear;
  2341  00753C  C01B  F017         	movff	read_AD7147_interrupt@interrupt_clear,?_read_AD7147_interrupt
  2342  007540  C01C  F018         	movff	read_AD7147_interrupt@interrupt_clear+1,?_read_AD7147_interrupt+1
  2343  007544  0012               	return	
  2344  007546                     __end_of_read_AD7147_interrupt:
  2345                           	opt stack 0
  2346                           postinc0	equ	0xFEE
  2347                           wreg	equ	0xFE8
  2348                           postinc2	equ	0xFDE
  2349                           postdec2	equ	0xFDD
  2350                           fsr2h	equ	0xFDA
  2351                           fsr2l	equ	0xFD9
  2352                           status	equ	0xFD8
  2353                           
  2354 ;; *************** function _get_ID *****************
  2355 ;; Defined at:
  2356 ;;		line 329 in file "AD7147.c"
  2357 ;; Parameters:    Size  Location     Type
  2358 ;;  cdc             2   22[COMRAM] unsigned int 
  2359 ;; Auto vars:     Size  Location     Type
  2360 ;;  result          2   25[COMRAM] unsigned int 
  2361 ;; Return value:  Size  Location     Type
  2362 ;;                  2   22[COMRAM] unsigned int 
  2363 ;; Registers used:
  2364 ;;		wreg, status,2, status,0, cstack
  2365 ;; Tracked objects:
  2366 ;;		On entry : 0/0
  2367 ;;		On exit  : 0/0
  2368 ;;		Unchanged: 0/0
  2369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2370 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2371 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2372 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2373 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2374 ;;Total ram usage:        5 bytes
  2375 ;; Hardware stack levels used:    1
  2376 ;; Hardware stack levels required when called:    1
  2377 ;; This function calls:
  2378 ;;		_get_CDC
  2379 ;;		_w16_r16_spi
  2380 ;; This function is called by:
  2381 ;;		_main
  2382 ;; This function uses a non-reentrant model
  2383 ;;
  2384                           
  2385                           	psect	text10
  2386  0075D8                     __ptext10:
  2387                           	opt stack 0
  2388  0075D8                     _get_ID:
  2389                           	opt stack 29
  2390                           
  2391                           ;AD7147.c: 331: get_CDC(cdc,0);
  2392                           
  2393                           ;incstack = 0
  2394  0075D8  C017  F001         	movff	get_ID@cdc,get_CDC@cdc
  2395  0075DC  C018  F002         	movff	get_ID@cdc+1,get_CDC@cdc+1
  2396  0075E0  0E00               	movlw	0
  2397  0075E2  6E04               	movwf	get_CDC@state+1,c
  2398  0075E4  0E00               	movlw	0
  2399  0075E6  6E03               	movwf	get_CDC@state,c
  2400  0075E8  EC7D  F03A         	call	_get_CDC	;wreg free
  2401                           
  2402                           ;AD7147.c: 332: unsigned int result = (w16_r16_spi(0xE400 + 0x017) & 0b1111111111110000)
      +                           >> 4;
  2403  0075EC  0EE4               	movlw	228
  2404  0075EE  6E02               	movwf	w16_r16_spi@address+1,c
  2405  0075F0  0E17               	movlw	23
  2406  0075F2  6E01               	movwf	w16_r16_spi@address,c
  2407  0075F4  EC4F  F03B         	call	_w16_r16_spi	;wreg free
  2408  0075F8  0E04               	movlw	4
  2409  0075FA  6E19               	movwf	??_get_ID& (0+255),c
  2410  0075FC                     u705:
  2411  0075FC  90D8               	bcf	status,0,c
  2412  0075FE  3202               	rrcf	?_w16_r16_spi+1,f,c
  2413  007600  3201               	rrcf	?_w16_r16_spi,f,c
  2414  007602  2E19               	decfsz	??_get_ID& (0+255),f,c
  2415  007604  D7FB               	goto	u705
  2416  007606  0EFF               	movlw	255
  2417  007608  1401               	andwf	?_w16_r16_spi,w,c
  2418  00760A  6E1A               	movwf	get_ID@result,c
  2419  00760C  0E0F               	movlw	15
  2420  00760E  1402               	andwf	?_w16_r16_spi+1,w,c
  2421  007610  6E1B               	movwf	get_ID@result+1,c
  2422                           
  2423                           ;AD7147.c: 333: get_CDC(cdc,1);
  2424  007612  C017  F001         	movff	get_ID@cdc,get_CDC@cdc
  2425  007616  C018  F002         	movff	get_ID@cdc+1,get_CDC@cdc+1
  2426  00761A  0E00               	movlw	0
  2427  00761C  6E04               	movwf	get_CDC@state+1,c
  2428  00761E  0E01               	movlw	1
  2429  007620  6E03               	movwf	get_CDC@state,c
  2430  007622  EC7D  F03A         	call	_get_CDC	;wreg free
  2431                           
  2432                           ;AD7147.c: 334: return result;
  2433  007626  C01A  F017         	movff	get_ID@result,?_get_ID
  2434  00762A  C01B  F018         	movff	get_ID@result+1,?_get_ID+1
  2435  00762E  0012               	return	
  2436  007630                     __end_of_get_ID:
  2437                           	opt stack 0
  2438                           postinc0	equ	0xFEE
  2439                           wreg	equ	0xFE8
  2440                           postinc2	equ	0xFDE
  2441                           postdec2	equ	0xFDD
  2442                           fsr2h	equ	0xFDA
  2443                           fsr2l	equ	0xFD9
  2444                           status	equ	0xFD8
  2445                           
  2446 ;; *************** function _w16_r16_spi *****************
  2447 ;; Defined at:
  2448 ;;		line 92 in file "spi.c"
  2449 ;; Parameters:    Size  Location     Type
  2450 ;;  address         2    0[COMRAM] unsigned int 
  2451 ;; Auto vars:     Size  Location     Type
  2452 ;;  p4              2   20[COMRAM] unsigned int 
  2453 ;;  p3              2   18[COMRAM] unsigned int 
  2454 ;;  blank_high      2   16[COMRAM] unsigned int 
  2455 ;;  blank_low       2   14[COMRAM] unsigned int 
  2456 ;;  result          2   12[COMRAM] unsigned int 
  2457 ;;  address_high    2   10[COMRAM] unsigned int 
  2458 ;;  address_low     2    8[COMRAM] unsigned int 
  2459 ;;  p2              2    6[COMRAM] unsigned int 
  2460 ;;  p1              2    4[COMRAM] unsigned int 
  2461 ;; Return value:  Size  Location     Type
  2462 ;;                  2    0[COMRAM] unsigned int 
  2463 ;; Registers used:
  2464 ;;		wreg, status,2, status,0
  2465 ;; Tracked objects:
  2466 ;;		On entry : 0/0
  2467 ;;		On exit  : 0/0
  2468 ;;		Unchanged: 0/0
  2469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2470 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2471 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2472 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2473 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2474 ;;Total ram usage:       22 bytes
  2475 ;; Hardware stack levels used:    1
  2476 ;; This function calls:
  2477 ;;		Nothing
  2478 ;; This function is called by:
  2479 ;;		_read_AD7147_interrupt
  2480 ;;		_get_ID
  2481 ;;		_main
  2482 ;;		_read_AD7147
  2483 ;;		_read_sensor
  2484 ;; This function uses a non-reentrant model
  2485 ;;
  2486                           
  2487                           	psect	text11
  2488  00769E                     __ptext11:
  2489                           	opt stack 0
  2490  00769E                     _w16_r16_spi:
  2491                           	opt stack 30
  2492                           
  2493                           ;spi.c: 94: unsigned int address_low, address_high, result;
  2494                           ;spi.c: 95: unsigned int blank_low = 0x000;
  2495                           
  2496                           ;incstack = 0
  2497  00769E  0E00               	movlw	0
  2498  0076A0  6E10               	movwf	w16_r16_spi@blank_low+1,c
  2499  0076A2  0E00               	movlw	0
  2500  0076A4  6E0F               	movwf	w16_r16_spi@blank_low,c
  2501                           
  2502                           ;spi.c: 96: unsigned int blank_high = 0x000;
  2503  0076A6  0E00               	movlw	0
  2504  0076A8  6E12               	movwf	w16_r16_spi@blank_high+1,c
  2505  0076AA  0E00               	movlw	0
  2506  0076AC  6E11               	movwf	w16_r16_spi@blank_high,c
  2507                           
  2508                           ;spi.c: 97: unsigned int p1, p2, p3, p4;
  2509                           ;spi.c: 99: address_low = address & 0xFF;
  2510  0076AE  5001               	movf	w16_r16_spi@address,w,c
  2511  0076B0  6E09               	movwf	w16_r16_spi@address_low,c
  2512  0076B2  6A0A               	clrf	w16_r16_spi@address_low+1,c
  2513                           
  2514                           ;spi.c: 100: address_high = (address >> 8) & 0xFF;
  2515  0076B4  C001  F003         	movff	w16_r16_spi@address,??_w16_r16_spi
  2516  0076B8  C002  F004         	movff	w16_r16_spi@address+1,??_w16_r16_spi+1
  2517  0076BC  C004  F003         	movff	??_w16_r16_spi+1,??_w16_r16_spi
  2518  0076C0  6A04               	clrf	??_w16_r16_spi+1,c
  2519  0076C2  5003               	movf	??_w16_r16_spi,w,c
  2520  0076C4  6E0B               	movwf	w16_r16_spi@address_high,c
  2521  0076C6  6A0C               	clrf	w16_r16_spi@address_high+1,c
  2522                           
  2523                           ;spi.c: 102: SSPBUF = address_high;
  2524  0076C8  C00B  FFC9         	movff	w16_r16_spi@address_high,4041	;volatile
  2525  0076CC                     l206:
  2526  0076CC  A0C7               	btfss	4039,0,c	;volatile
  2527  0076CE  D7FE               	goto	l206
  2528                           
  2529                           ;spi.c: 104: p1 = SSPBUF;
  2530  0076D0  CFC9 F005          	movff	4041,w16_r16_spi@p1	;volatile
  2531  0076D4  6A06               	clrf	w16_r16_spi@p1+1,c
  2532                           
  2533                           ;spi.c: 106: SSPBUF = address_low;
  2534  0076D6  C009  FFC9         	movff	w16_r16_spi@address_low,4041	;volatile
  2535  0076DA                     l209:
  2536  0076DA  A0C7               	btfss	4039,0,c	;volatile
  2537  0076DC  D7FE               	goto	l209
  2538                           
  2539                           ;spi.c: 108: p2 = SSPBUF;
  2540  0076DE  CFC9 F007          	movff	4041,w16_r16_spi@p2	;volatile
  2541  0076E2  6A08               	clrf	w16_r16_spi@p2+1,c
  2542                           
  2543                           ;spi.c: 110: SSPBUF = blank_high;
  2544  0076E4  C011  FFC9         	movff	w16_r16_spi@blank_high,4041	;volatile
  2545  0076E8                     l212:
  2546  0076E8  A0C7               	btfss	4039,0,c	;volatile
  2547  0076EA  D7FE               	goto	l212
  2548                           
  2549                           ;spi.c: 112: p3 = SSPBUF;
  2550  0076EC  CFC9 F013          	movff	4041,w16_r16_spi@p3	;volatile
  2551  0076F0  6A14               	clrf	w16_r16_spi@p3+1,c
  2552                           
  2553                           ;spi.c: 114: SSPBUF = blank_low;
  2554  0076F2  C00F  FFC9         	movff	w16_r16_spi@blank_low,4041	;volatile
  2555  0076F6                     l215:
  2556  0076F6  A0C7               	btfss	4039,0,c	;volatile
  2557  0076F8  D7FE               	goto	l215
  2558                           
  2559                           ;spi.c: 116: p4 = SSPBUF;
  2560  0076FA  CFC9 F015          	movff	4041,w16_r16_spi@p4	;volatile
  2561  0076FE  6A16               	clrf	w16_r16_spi@p4+1,c
  2562                           
  2563                           ;spi.c: 118: result = (p3 << 8) + p4;
  2564  007700  5013               	movf	w16_r16_spi@p3,w,c
  2565  007702  6E04               	movwf	(??_w16_r16_spi+1)& (0+255),c
  2566  007704  6A03               	clrf	??_w16_r16_spi& (0+255),c
  2567  007706  5015               	movf	w16_r16_spi@p4,w,c
  2568  007708  2403               	addwf	??_w16_r16_spi,w,c
  2569  00770A  6E0D               	movwf	w16_r16_spi@result,c
  2570  00770C  5016               	movf	w16_r16_spi@p4+1,w,c
  2571  00770E  2004               	addwfc	??_w16_r16_spi+1,w,c
  2572  007710  6E0E               	movwf	w16_r16_spi@result+1,c
  2573                           
  2574                           ;spi.c: 119: return result;
  2575  007712  C00D  F001         	movff	w16_r16_spi@result,?_w16_r16_spi
  2576  007716  C00E  F002         	movff	w16_r16_spi@result+1,?_w16_r16_spi+1
  2577  00771A  0012               	return	
  2578  00771C                     __end_of_w16_r16_spi:
  2579                           	opt stack 0
  2580                           postinc0	equ	0xFEE
  2581                           wreg	equ	0xFE8
  2582                           postinc2	equ	0xFDE
  2583                           postdec2	equ	0xFDD
  2584                           fsr2h	equ	0xFDA
  2585                           fsr2l	equ	0xFD9
  2586                           status	equ	0xFD8
  2587                           
  2588 ;; *************** function _blink_LED *****************
  2589 ;; Defined at:
  2590 ;;		line 353 in file "AD7147.c"
  2591 ;; Parameters:    Size  Location     Type
  2592 ;;  cdc             2   22[COMRAM] unsigned int 
  2593 ;; Auto vars:     Size  Location     Type
  2594 ;;  message         2   24[COMRAM] unsigned int 
  2595 ;; Return value:  Size  Location     Type
  2596 ;;                  1    wreg      void 
  2597 ;; Registers used:
  2598 ;;		wreg, status,2, status,0, cstack
  2599 ;; Tracked objects:
  2600 ;;		On entry : 0/0
  2601 ;;		On exit  : 0/0
  2602 ;;		Unchanged: 0/0
  2603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2604 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2605 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2607 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2608 ;;Total ram usage:        4 bytes
  2609 ;; Hardware stack levels used:    1
  2610 ;; Hardware stack levels required when called:    2
  2611 ;; This function calls:
  2612 ;;		_delay_ms
  2613 ;;		_get_CDC
  2614 ;;		_w32_spi
  2615 ;; This function is called by:
  2616 ;;		_main
  2617 ;; This function uses a non-reentrant model
  2618 ;;
  2619                           
  2620                           	psect	text12
  2621  0077A0                     __ptext12:
  2622                           	opt stack 0
  2623  0077A0                     _blink_LED:
  2624                           	opt stack 28
  2625                           
  2626                           ;AD7147.c: 355: get_CDC(cdc,0);
  2627                           
  2628                           ;incstack = 0
  2629  0077A0  C017  F001         	movff	blink_LED@cdc,get_CDC@cdc
  2630  0077A4  C018  F002         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  2631  0077A8  0E00               	movlw	0
  2632  0077AA  6E04               	movwf	get_CDC@state+1,c
  2633  0077AC  0E00               	movlw	0
  2634  0077AE  6E03               	movwf	get_CDC@state,c
  2635  0077B0  EC7D  F03A         	call	_get_CDC	;wreg free
  2636                           
  2637                           ;AD7147.c: 356: unsigned int message = 0b0010000000000000;
  2638  0077B4  0E20               	movlw	32
  2639  0077B6  6E1A               	movwf	blink_LED@message+1,c
  2640  0077B8  0E00               	movlw	0
  2641  0077BA  6E19               	movwf	blink_LED@message,c
  2642                           
  2643                           ;AD7147.c: 357: w32_spi((0xE000 + 0x005),message);
  2644  0077BC  0EE0               	movlw	224
  2645  0077BE  6E02               	movwf	w32_spi@address+1,c
  2646  0077C0  0E05               	movlw	5
  2647  0077C2  6E01               	movwf	w32_spi@address,c
  2648  0077C4  C019  F003         	movff	blink_LED@message,w32_spi@data
  2649  0077C8  C01A  F004         	movff	blink_LED@message+1,w32_spi@data+1
  2650  0077CC  EC18  F03B         	call	_w32_spi	;wreg free
  2651                           
  2652                           ;AD7147.c: 358: delay_ms(10);
  2653  0077D0  0E00               	movlw	0
  2654  0077D2  6E0A               	movwf	delay_ms@n+1,c
  2655  0077D4  0E0A               	movlw	10
  2656  0077D6  6E09               	movwf	delay_ms@n,c
  2657  0077D8  ECA3  F03A         	call	_delay_ms	;wreg free
  2658                           
  2659                           ;AD7147.c: 359: get_CDC(cdc,1);
  2660  0077DC  C017  F001         	movff	blink_LED@cdc,get_CDC@cdc
  2661  0077E0  C018  F002         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  2662  0077E4  0E00               	movlw	0
  2663  0077E6  6E04               	movwf	get_CDC@state+1,c
  2664  0077E8  0E01               	movlw	1
  2665  0077EA  6E03               	movwf	get_CDC@state,c
  2666  0077EC  EC7D  F03A         	call	_get_CDC	;wreg free
  2667                           
  2668                           ;AD7147.c: 360: delay_ms(1000);
  2669  0077F0  0E03               	movlw	3
  2670  0077F2  6E0A               	movwf	delay_ms@n+1,c
  2671  0077F4  0EE8               	movlw	232
  2672  0077F6  6E09               	movwf	delay_ms@n,c
  2673  0077F8  ECA3  F03A         	call	_delay_ms	;wreg free
  2674                           
  2675                           ;AD7147.c: 361: get_CDC(cdc,0);
  2676  0077FC  C017  F001         	movff	blink_LED@cdc,get_CDC@cdc
  2677  007800  C018  F002         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  2678  007804  0E00               	movlw	0
  2679  007806  6E04               	movwf	get_CDC@state+1,c
  2680  007808  0E00               	movlw	0
  2681  00780A  6E03               	movwf	get_CDC@state,c
  2682  00780C  EC7D  F03A         	call	_get_CDC	;wreg free
  2683                           
  2684                           ;AD7147.c: 362: unsigned int message = 0b0011000000000000;
  2685  007810  0E30               	movlw	48
  2686  007812  6E1A               	movwf	blink_LED@message+1,c
  2687  007814  0E00               	movlw	0
  2688  007816  6E19               	movwf	blink_LED@message,c
  2689                           
  2690                           ;AD7147.c: 363: w32_spi((0xE000 + 0x005),message);
  2691  007818  0EE0               	movlw	224
  2692  00781A  6E02               	movwf	w32_spi@address+1,c
  2693  00781C  0E05               	movlw	5
  2694  00781E  6E01               	movwf	w32_spi@address,c
  2695  007820  C019  F003         	movff	blink_LED@message,w32_spi@data
  2696  007824  C01A  F004         	movff	blink_LED@message+1,w32_spi@data+1
  2697  007828  EC18  F03B         	call	_w32_spi	;wreg free
  2698                           
  2699                           ;AD7147.c: 364: delay_ms(10);
  2700  00782C  0E00               	movlw	0
  2701  00782E  6E0A               	movwf	delay_ms@n+1,c
  2702  007830  0E0A               	movlw	10
  2703  007832  6E09               	movwf	delay_ms@n,c
  2704  007834  ECA3  F03A         	call	_delay_ms	;wreg free
  2705                           
  2706                           ;AD7147.c: 365: get_CDC(cdc,1);
  2707  007838  C017  F001         	movff	blink_LED@cdc,get_CDC@cdc
  2708  00783C  C018  F002         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  2709  007840  0E00               	movlw	0
  2710  007842  6E04               	movwf	get_CDC@state+1,c
  2711  007844  0E01               	movlw	1
  2712  007846  6E03               	movwf	get_CDC@state,c
  2713  007848  EC7D  F03A         	call	_get_CDC	;wreg free
  2714  00784C  0012               	return		;funcret
  2715  00784E                     __end_of_blink_LED:
  2716                           	opt stack 0
  2717                           postinc0	equ	0xFEE
  2718                           wreg	equ	0xFE8
  2719                           postinc2	equ	0xFDE
  2720                           postdec2	equ	0xFDD
  2721                           fsr2h	equ	0xFDA
  2722                           fsr2l	equ	0xFD9
  2723                           status	equ	0xFD8
  2724                           
  2725 ;; *************** function _w32_spi *****************
  2726 ;; Defined at:
  2727 ;;		line 26 in file "spi.c"
  2728 ;; Parameters:    Size  Location     Type
  2729 ;;  address         2    0[COMRAM] unsigned int 
  2730 ;;  data            2    2[COMRAM] unsigned int 
  2731 ;; Auto vars:     Size  Location     Type
  2732 ;;  data_high       2   20[COMRAM] unsigned int 
  2733 ;;  data_low        2   18[COMRAM] unsigned int 
  2734 ;;  address_high    2   16[COMRAM] unsigned int 
  2735 ;;  address_low     2   14[COMRAM] unsigned int 
  2736 ;;  p4              2   12[COMRAM] unsigned int 
  2737 ;;  p3              2   10[COMRAM] unsigned int 
  2738 ;;  p2              2    8[COMRAM] unsigned int 
  2739 ;;  p1              2    6[COMRAM] unsigned int 
  2740 ;; Return value:  Size  Location     Type
  2741 ;;                  1    wreg      void 
  2742 ;; Registers used:
  2743 ;;		wreg, status,2
  2744 ;; Tracked objects:
  2745 ;;		On entry : 0/0
  2746 ;;		On exit  : 0/0
  2747 ;;		Unchanged: 0/0
  2748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2749 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2750 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2751 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2752 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2753 ;;Total ram usage:       22 bytes
  2754 ;; Hardware stack levels used:    1
  2755 ;; This function calls:
  2756 ;;		Nothing
  2757 ;; This function is called by:
  2758 ;;		_write_AD7147
  2759 ;;		_blink_LED
  2760 ;;		_switch_LED
  2761 ;; This function uses a non-reentrant model
  2762 ;;
  2763                           
  2764                           	psect	text13
  2765  007630                     __ptext13:
  2766                           	opt stack 0
  2767  007630                     _w32_spi:
  2768                           	opt stack 28
  2769                           
  2770                           ;spi.c: 28: unsigned int address_low, address_high, data_low, data_high;
  2771                           ;spi.c: 30: address_low = address & 0xFF;
  2772                           
  2773                           ;incstack = 0
  2774  007630  5001               	movf	w32_spi@address,w,c
  2775  007632  6E0F               	movwf	w32_spi@address_low,c
  2776  007634  6A10               	clrf	w32_spi@address_low+1,c
  2777                           
  2778                           ;spi.c: 31: address_high = (address >> 8) & 0xFF;
  2779  007636  C001  F005         	movff	w32_spi@address,??_w32_spi
  2780  00763A  C002  F006         	movff	w32_spi@address+1,??_w32_spi+1
  2781  00763E  C006  F005         	movff	??_w32_spi+1,??_w32_spi
  2782  007642  6A06               	clrf	??_w32_spi+1,c
  2783  007644  5005               	movf	??_w32_spi,w,c
  2784  007646  6E11               	movwf	w32_spi@address_high,c
  2785  007648  6A12               	clrf	w32_spi@address_high+1,c
  2786                           
  2787                           ;spi.c: 33: data_low = data & 0xFF;
  2788  00764A  5003               	movf	w32_spi@data,w,c
  2789  00764C  6E13               	movwf	w32_spi@data_low,c
  2790  00764E  6A14               	clrf	w32_spi@data_low+1,c
  2791                           
  2792                           ;spi.c: 34: data_high = (data >> 8) & 0xFF;
  2793  007650  C003  F005         	movff	w32_spi@data,??_w32_spi
  2794  007654  C004  F006         	movff	w32_spi@data+1,??_w32_spi+1
  2795  007658  C006  F005         	movff	??_w32_spi+1,??_w32_spi
  2796  00765C  6A06               	clrf	??_w32_spi+1,c
  2797  00765E  5005               	movf	??_w32_spi,w,c
  2798  007660  6E15               	movwf	w32_spi@data_high,c
  2799  007662  6A16               	clrf	w32_spi@data_high+1,c
  2800                           
  2801                           ;spi.c: 36: SSPBUF = address_high;
  2802  007664  C011  FFC9         	movff	w32_spi@address_high,4041	;volatile
  2803  007668                     l173:
  2804  007668  A0C7               	btfss	4039,0,c	;volatile
  2805  00766A  D7FE               	goto	l173
  2806                           
  2807                           ;spi.c: 38: unsigned int p1 = SSPBUF;
  2808  00766C  CFC9 F007          	movff	4041,w32_spi@p1	;volatile
  2809  007670  6A08               	clrf	w32_spi@p1+1,c
  2810                           
  2811                           ;spi.c: 40: SSPBUF = address_low;
  2812  007672  C00F  FFC9         	movff	w32_spi@address_low,4041	;volatile
  2813  007676                     l176:
  2814  007676  A0C7               	btfss	4039,0,c	;volatile
  2815  007678  D7FE               	goto	l176
  2816                           
  2817                           ;spi.c: 42: unsigned int p2 = SSPBUF;
  2818  00767A  CFC9 F009          	movff	4041,w32_spi@p2	;volatile
  2819  00767E  6A0A               	clrf	w32_spi@p2+1,c
  2820                           
  2821                           ;spi.c: 44: SSPBUF = data_high;
  2822  007680  C015  FFC9         	movff	w32_spi@data_high,4041	;volatile
  2823  007684                     l179:
  2824  007684  A0C7               	btfss	4039,0,c	;volatile
  2825  007686  D7FE               	goto	l179
  2826                           
  2827                           ;spi.c: 46: unsigned int p3 = SSPBUF;
  2828  007688  CFC9 F00B          	movff	4041,w32_spi@p3	;volatile
  2829  00768C  6A0C               	clrf	w32_spi@p3+1,c
  2830                           
  2831                           ;spi.c: 48: SSPBUF = data_low;
  2832  00768E  C013  FFC9         	movff	w32_spi@data_low,4041	;volatile
  2833  007692                     l182:
  2834  007692  A0C7               	btfss	4039,0,c	;volatile
  2835  007694  D7FE               	goto	l182
  2836                           
  2837                           ;spi.c: 50: unsigned int p4 = SSPBUF;
  2838  007696  CFC9 F00D          	movff	4041,w32_spi@p4	;volatile
  2839  00769A  6A0E               	clrf	w32_spi@p4+1,c
  2840  00769C  0012               	return		;funcret
  2841  00769E                     __end_of_w32_spi:
  2842                           	opt stack 0
  2843                           postinc0	equ	0xFEE
  2844                           wreg	equ	0xFE8
  2845                           postinc2	equ	0xFDE
  2846                           postdec2	equ	0xFDD
  2847                           fsr2h	equ	0xFDA
  2848                           fsr2l	equ	0xFD9
  2849                           status	equ	0xFD8
  2850                           
  2851 ;; *************** function _get_CDC *****************
  2852 ;; Defined at:
  2853 ;;		line 367 in file "AD7147.c"
  2854 ;; Parameters:    Size  Location     Type
  2855 ;;  cdc             2    0[COMRAM] unsigned int 
  2856 ;;  state           2    2[COMRAM] unsigned int 
  2857 ;; Auto vars:     Size  Location     Type
  2858 ;;		None
  2859 ;; Return value:  Size  Location     Type
  2860 ;;                  1    wreg      void 
  2861 ;; Registers used:
  2862 ;;		wreg, status,2, status,0
  2863 ;; Tracked objects:
  2864 ;;		On entry : 0/0
  2865 ;;		On exit  : 0/0
  2866 ;;		Unchanged: 0/0
  2867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2868 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2871 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2872 ;;Total ram usage:        4 bytes
  2873 ;; Hardware stack levels used:    1
  2874 ;; This function calls:
  2875 ;;		Nothing
  2876 ;; This function is called by:
  2877 ;;		_setup_AD7147
  2878 ;;		_get_ID
  2879 ;;		_blink_LED
  2880 ;;		_main
  2881 ;;		_sensor_CDC
  2882 ;;		_switch_LED
  2883 ;; This function uses a non-reentrant model
  2884 ;;
  2885                           
  2886                           	psect	text14
  2887  0074FA                     __ptext14:
  2888                           	opt stack 0
  2889  0074FA                     _get_CDC:
  2890                           	opt stack 29
  2891                           
  2892                           ;AD7147.c: 369: if (state == 1)
  2893                           
  2894                           ;incstack = 0
  2895  0074FA  0403               	decf	get_CDC@state,w,c
  2896  0074FC  1004               	iorwf	get_CDC@state+1,w,c
  2897  0074FE  A4D8               	btfss	status,2,c
  2898  007500  D003               	goto	l1623
  2899                           
  2900                           ;AD7147.c: 370: {
  2901                           ;AD7147.c: 371: LATCbits.LATC1 = 1;
  2902  007502  828B               	bsf	3979,1,c	;volatile
  2903                           
  2904                           ;AD7147.c: 372: LATCbits.LATC0 = 1;
  2905  007504  808B               	bsf	3979,0,c	;volatile
  2906                           
  2907                           ;AD7147.c: 373: }
  2908  007506  0012               	return	
  2909  007508                     l1623:
  2910                           
  2911                           ;AD7147.c: 374: else
  2912                           ;AD7147.c: 375: {
  2913                           ;AD7147.c: 376: if (cdc == 1)
  2914  007508  0401               	decf	get_CDC@cdc,w,c
  2915  00750A  1002               	iorwf	get_CDC@cdc+1,w,c
  2916  00750C  A4D8               	btfss	status,2,c
  2917  00750E  D003               	goto	l83
  2918                           
  2919                           ;AD7147.c: 377: {
  2920                           ;AD7147.c: 378: LATCbits.LATC1 = 0;
  2921  007510  928B               	bcf	3979,1,c	;volatile
  2922                           
  2923                           ;AD7147.c: 379: LATCbits.LATC0 = 1;
  2924  007512  808B               	bsf	3979,0,c	;volatile
  2925                           
  2926                           ;AD7147.c: 380: }
  2927  007514  0012               	return	
  2928  007516                     l83:
  2929                           
  2930                           ;AD7147.c: 381: else
  2931                           ;AD7147.c: 382: {
  2932                           ;AD7147.c: 383: LATCbits.LATC0 = 0;
  2933  007516  908B               	bcf	3979,0,c	;volatile
  2934                           
  2935                           ;AD7147.c: 384: LATCbits.LATC1 = 1;
  2936  007518  828B               	bsf	3979,1,c	;volatile
  2937  00751A  0012               	return	
  2938  00751C                     __end_of_get_CDC:
  2939                           	opt stack 0
  2940                           postinc0	equ	0xFEE
  2941                           wreg	equ	0xFE8
  2942                           postinc2	equ	0xFDE
  2943                           postdec2	equ	0xFDD
  2944                           fsr2h	equ	0xFDA
  2945                           fsr2l	equ	0xFD9
  2946                           status	equ	0xFD8
  2947                           
  2948 ;; *************** function _delay_ms *****************
  2949 ;; Defined at:
  2950 ;;		line 67 in file "micro_setup.c"
  2951 ;; Parameters:    Size  Location     Type
  2952 ;;  n               2    8[COMRAM] int 
  2953 ;; Auto vars:     Size  Location     Type
  2954 ;;  j               2   11[COMRAM] int 
  2955 ;; Return value:  Size  Location     Type
  2956 ;;                  1    wreg      void 
  2957 ;; Registers used:
  2958 ;;		wreg, status,2, status,0, cstack
  2959 ;; Tracked objects:
  2960 ;;		On entry : 0/0
  2961 ;;		On exit  : 0/0
  2962 ;;		Unchanged: 0/0
  2963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2964 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2965 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2966 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2967 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2968 ;;Total ram usage:        5 bytes
  2969 ;; Hardware stack levels used:    1
  2970 ;; Hardware stack levels required when called:    1
  2971 ;; This function calls:
  2972 ;;		___awdiv
  2973 ;; This function is called by:
  2974 ;;		_blink_LED
  2975 ;;		_main
  2976 ;;		_switch_LED
  2977 ;; This function uses a non-reentrant model
  2978 ;;
  2979                           
  2980                           	psect	text15
  2981  007546                     __ptext15:
  2982                           	opt stack 0
  2983  007546                     _delay_ms:
  2984                           	opt stack 29
  2985                           
  2986                           ;micro_setup.c: 69: int j = n/10;
  2987                           
  2988                           ;incstack = 0
  2989  007546  C009  F001         	movff	delay_ms@n,___awdiv@dividend
  2990  00754A  C00A  F002         	movff	delay_ms@n+1,___awdiv@dividend+1
  2991  00754E  0E00               	movlw	0
  2992  007550  6E04               	movwf	___awdiv@divisor+1,c
  2993  007552  0E0A               	movlw	10
  2994  007554  6E03               	movwf	___awdiv@divisor,c
  2995  007556  EC8E  F03B         	call	___awdiv	;wreg free
  2996  00755A  C001  F00C         	movff	?___awdiv,delay_ms@j
  2997  00755E  C002  F00D         	movff	?___awdiv+1,delay_ms@j+1
  2998                           
  2999                           ;micro_setup.c: 70: while(j--)
  3000  007562  D008               	goto	l1649
  3001  007564                     l1647:
  3002                           
  3003                           ;micro_setup.c: 71: {
  3004                           ;micro_setup.c: 72: _delay((unsigned long)((10)*(8000000/4000.0)));
  3005  007564  0E1A               	movlw	26
  3006  007566  6E0B               	movwf	??_delay_ms& (0+255),c
  3007  007568  0EF8               	movlw	248
  3008  00756A                     u837:
  3009  00756A  2EE8               	decfsz	wreg,f,c
  3010  00756C  D7FE               	bra	u837
  3011  00756E  2E0B               	decfsz	??_delay_ms& (0+255),f,c
  3012  007570  D7FC               	bra	u837
  3013  007572  D000               	nop2	
  3014  007574                     l1649:
  3015  007574  060C               	decf	delay_ms@j,f,c
  3016  007576  A0D8               	btfss	status,0,c
  3017  007578  060D               	decf	delay_ms@j+1,f,c
  3018  00757A  280C               	incf	delay_ms@j,w,c
  3019  00757C  E1F3               	bnz	l1647
  3020  00757E  280D               	incf	delay_ms@j+1,w,c
  3021  007580  B4D8               	btfsc	status,2,c
  3022  007582  0012               	return	
  3023  007584  D7EF               	goto	l1647
  3024  007586                     __end_of_delay_ms:
  3025                           	opt stack 0
  3026                           postinc0	equ	0xFEE
  3027                           wreg	equ	0xFE8
  3028                           postinc2	equ	0xFDE
  3029                           postdec2	equ	0xFDD
  3030                           fsr2h	equ	0xFDA
  3031                           fsr2l	equ	0xFD9
  3032                           status	equ	0xFD8
  3033                           
  3034 ;; *************** function ___awdiv *****************
  3035 ;; Defined at:
  3036 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  3037 ;; Parameters:    Size  Location     Type
  3038 ;;  dividend        2    0[COMRAM] int 
  3039 ;;  divisor         2    2[COMRAM] int 
  3040 ;; Auto vars:     Size  Location     Type
  3041 ;;  quotient        2    6[COMRAM] int 
  3042 ;;  sign            1    5[COMRAM] unsigned char 
  3043 ;;  counter         1    4[COMRAM] unsigned char 
  3044 ;; Return value:  Size  Location     Type
  3045 ;;                  2    0[COMRAM] int 
  3046 ;; Registers used:
  3047 ;;		wreg, status,2, status,0
  3048 ;; Tracked objects:
  3049 ;;		On entry : 0/0
  3050 ;;		On exit  : 0/0
  3051 ;;		Unchanged: 0/0
  3052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3053 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3054 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3056 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3057 ;;Total ram usage:        8 bytes
  3058 ;; Hardware stack levels used:    1
  3059 ;; This function calls:
  3060 ;;		Nothing
  3061 ;; This function is called by:
  3062 ;;		_delay_ms
  3063 ;; This function uses a non-reentrant model
  3064 ;;
  3065                           
  3066                           	psect	text16
  3067  00771C                     __ptext16:
  3068                           	opt stack 0
  3069  00771C                     ___awdiv:
  3070                           	opt stack 29
  3071                           
  3072                           ;incstack = 0
  3073  00771C  0E00               	movlw	0
  3074  00771E  6E06               	movwf	___awdiv@sign,c
  3075  007720  AE04               	btfss	___awdiv@divisor+1,7,c
  3076  007722  D006               	goto	l1583
  3077  007724  6C03               	negf	___awdiv@divisor,c
  3078  007726  1E04               	comf	___awdiv@divisor+1,f,c
  3079  007728  B0D8               	btfsc	status,0,c
  3080  00772A  2A04               	incf	___awdiv@divisor+1,f,c
  3081  00772C  0E01               	movlw	1
  3082  00772E  6E06               	movwf	___awdiv@sign,c
  3083  007730                     l1583:
  3084  007730  AE02               	btfss	___awdiv@dividend+1,7,c
  3085  007732  D006               	goto	l1589
  3086  007734  6C01               	negf	___awdiv@dividend,c
  3087  007736  1E02               	comf	___awdiv@dividend+1,f,c
  3088  007738  B0D8               	btfsc	status,0,c
  3089  00773A  2A02               	incf	___awdiv@dividend+1,f,c
  3090  00773C  0E01               	movlw	1
  3091  00773E  1A06               	xorwf	___awdiv@sign,f,c
  3092  007740                     l1589:
  3093  007740  0E00               	movlw	0
  3094  007742  6E08               	movwf	___awdiv@quotient+1,c
  3095  007744  0E00               	movlw	0
  3096  007746  6E07               	movwf	___awdiv@quotient,c
  3097  007748  5003               	movf	___awdiv@divisor,w,c
  3098  00774A  1004               	iorwf	___awdiv@divisor+1,w,c
  3099  00774C  B4D8               	btfsc	status,2,c
  3100  00774E  D01C               	goto	l1611
  3101  007750  0E01               	movlw	1
  3102  007752  6E05               	movwf	___awdiv@counter,c
  3103  007754  D004               	goto	l1597
  3104  007756                     l1595:
  3105  007756  90D8               	bcf	status,0,c
  3106  007758  3603               	rlcf	___awdiv@divisor,f,c
  3107  00775A  3604               	rlcf	___awdiv@divisor+1,f,c
  3108  00775C  2A05               	incf	___awdiv@counter,f,c
  3109  00775E                     l1597:
  3110  00775E  AE04               	btfss	___awdiv@divisor+1,7,c
  3111  007760  D7FA               	goto	l1595
  3112  007762                     l1599:
  3113  007762  90D8               	bcf	status,0,c
  3114  007764  3607               	rlcf	___awdiv@quotient,f,c
  3115  007766  3608               	rlcf	___awdiv@quotient+1,f,c
  3116  007768  5003               	movf	___awdiv@divisor,w,c
  3117  00776A  5C01               	subwf	___awdiv@dividend,w,c
  3118  00776C  5004               	movf	___awdiv@divisor+1,w,c
  3119  00776E  5802               	subwfb	___awdiv@dividend+1,w,c
  3120  007770  A0D8               	btfss	status,0,c
  3121  007772  D005               	goto	l1607
  3122  007774  5003               	movf	___awdiv@divisor,w,c
  3123  007776  5E01               	subwf	___awdiv@dividend,f,c
  3124  007778  5004               	movf	___awdiv@divisor+1,w,c
  3125  00777A  5A02               	subwfb	___awdiv@dividend+1,f,c
  3126  00777C  8007               	bsf	___awdiv@quotient,0,c
  3127  00777E                     l1607:
  3128  00777E  90D8               	bcf	status,0,c
  3129  007780  3204               	rrcf	___awdiv@divisor+1,f,c
  3130  007782  3203               	rrcf	___awdiv@divisor,f,c
  3131  007784  2E05               	decfsz	___awdiv@counter,f,c
  3132  007786  D7ED               	goto	l1599
  3133  007788                     l1611:
  3134  007788  5006               	movf	___awdiv@sign,w,c
  3135  00778A  B4D8               	btfsc	status,2,c
  3136  00778C  D004               	goto	l1615
  3137  00778E  6C07               	negf	___awdiv@quotient,c
  3138  007790  1E08               	comf	___awdiv@quotient+1,f,c
  3139  007792  B0D8               	btfsc	status,0,c
  3140  007794  2A08               	incf	___awdiv@quotient+1,f,c
  3141  007796                     l1615:
  3142  007796  C007  F001         	movff	___awdiv@quotient,?___awdiv
  3143  00779A  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  3144  00779E  0012               	return	
  3145  0077A0                     __end_of___awdiv:
  3146                           	opt stack 0
  3147  0000                     postinc0	equ	0xFEE
  3148                           wreg	equ	0xFE8
  3149                           postinc2	equ	0xFDE
  3150                           postdec2	equ	0xFDD
  3151                           fsr2h	equ	0xFDA
  3152                           fsr2l	equ	0xFD9
  3153                           status	equ	0xFD8
  3154                           postinc0	equ	0xFEE
  3155                           wreg	equ	0xFE8
  3156                           postinc2	equ	0xFDE
  3157                           postdec2	equ	0xFDD
  3158                           fsr2h	equ	0xFDA
  3159                           fsr2l	equ	0xFD9
  3160                           status	equ	0xFD8
  3161                           
  3162                           	psect	rparam
  3163  0000                     postinc0	equ	0xFEE
  3164                           wreg	equ	0xFE8
  3165                           postinc2	equ	0xFDE
  3166                           postdec2	equ	0xFDD
  3167                           fsr2h	equ	0xFDA
  3168                           fsr2l	equ	0xFD9
  3169                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         24
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     72      72
    BANK0           160     41      65
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    CDC_RESULT	PTR unsigned int [12] size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    write_AD7147@DataBuffer	PTR unsigned int  size(2) Largest target is 16
		 -> setup_AD7147@AD7147Registers(COMRAM[16]), setup_AD7147@StageBuffer(COMRAM[16]), 


Critical Paths under _main in COMRAM

    _main->_setup_AD7147
    _setup_AD7147->_write_AD7147
    _write_AD7147->_w32_spi
    _read_AD7147_interrupt->_w16_r16_spi
    _get_ID->_w16_r16_spi
    _blink_LED->_w32_spi
    _delay_ms->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                41    41      0   25265
                                              0 BANK0     41    41      0
                          _blink_LED
                           _delay_ms
                            _get_CDC
                             _get_ID
                       _setup_AD7147
                          _setup_mcu
                          _setup_spi
                    _uart_write_char
            _uart_write_unsigned_int
                        _w16_r16_spi
 ---------------------------------------------------------------------------------
 (1) _uart_write_unsigned_int                              4     2      2     394
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _uart_write_char                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setup_spi                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_mcu                                            0     0      0       0
                          _init_uart
                         _setup_port
 ---------------------------------------------------------------------------------
 (2) _setup_port                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_uart                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_AD7147                                        40    38      2   11043
                                             32 COMRAM    40    38      2
                            _get_CDC
              _read_AD7147_interrupt
                       _write_AD7147
 ---------------------------------------------------------------------------------
 (2) _write_AD7147                                        10     4      6    4293
                                             22 COMRAM    10     4      6
                            _w32_spi
 ---------------------------------------------------------------------------------
 (2) _read_AD7147_interrupt                                6     4      2    1567
                                             22 COMRAM     6     4      2
                        _w16_r16_spi
 ---------------------------------------------------------------------------------
 (1) _get_ID                                               5     3      2    3890
                                             22 COMRAM     5     3      2
                            _get_CDC
                        _w16_r16_spi
 ---------------------------------------------------------------------------------
 (1) _w16_r16_spi                                         22    20      2    1271
                                              0 COMRAM    22    20      2
 ---------------------------------------------------------------------------------
 (1) _blink_LED                                            4     2      2    4735
                                             22 COMRAM     4     2      2
                           _delay_ms
                            _get_CDC
                            _w32_spi
 ---------------------------------------------------------------------------------
 (3) _w32_spi                                             22    18      4     944
                                              0 COMRAM    22    18      4
 ---------------------------------------------------------------------------------
 (2) _get_CDC                                              4     0      4    2476
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             5     3      2    1029
                                              8 COMRAM     5     3      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _blink_LED
     _delay_ms
       ___awdiv
     _get_CDC
     _w32_spi
   _delay_ms
     ___awdiv
   _get_CDC
   _get_ID
     _get_CDC
     _w16_r16_spi
   _setup_AD7147
     _get_CDC
     _read_AD7147_interrupt
       _w16_r16_spi
     _write_AD7147
       _w32_spi
   _setup_mcu
     _init_uart
     _setup_port
   _setup_spi
   _uart_write_char
   _uart_write_unsigned_int
   _w16_r16_spi

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     29      41       5       40.6%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     48      48       1       75.8%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      89       6        0.0%
DATA                 0      0      89       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Thu Jul 27 02:39:28 2017

                         _SSPSTATbits 000FC7                                    l83 7516  
                        ___awdiv@sign 0006                          __CFG_CP0$OFF 000000  
                                 l212 76E8                                   l206 76CC  
                                 l215 76F6                                   l240 748A  
                                 l209 76DA                                   l252 74E8  
                                 l173 7668                                   l182 7692  
                                 l255 74F0                                   l176 7676  
                                 l179 7684                                   u705 75FC  
                                 u837 756A              setup_AD7147@int_complete 0027  
                                 wreg 000FE8                            _TXSTA1bits 000FAC  
         write_AD7147@RegisterAddress 0017                                  l2103 7AD8  
                                l2109 7AF4                                  l2071 79A8  
                                l2063 7986                                  l2055 7956  
                                l2073 79B4                                  l1611 7788  
                                l1615 7796                                  l1607 777E  
                                l1623 7508                                  l1631 759C  
                                l1635 75CA                                  l1583 7730  
                                l1647 7564                                  l1649 7574  
                                l1595 7756                                  l1597 775E  
                                l1589 7740                                  l1599 7762  
                         main@int_low 0084                                  _main 784E  
                                fsr2h 000FDA           write_AD7147@Register_Values 001D  
                                fsr2l 000FD9      __size_of_uart_write_unsigned_int 001A  
                         main@stage_0 0062                           main@stage_1 0064  
                         main@stage_2 0066                           main@stage_3 0068  
                                start 0000                         ??_w16_r16_spi 0003  
                       __CFG_IESO$OFF 000000                         __CFG_FOSC$HS1 000000  
                        ___param_bank 000000                       __end_of_w32_spi 769E  
            __size_of_uart_write_char 000C                                 ?_main 0001  
                     __end_of___awdiv 77A0                       ___awdiv@divisor 0003  
                               _RC1IF 007CF5                 w16_r16_spi@blank_high 0011  
                     ___awdiv@counter 0005                                 _TRISB 000F93  
                               _TRISC 000F94                          main@int_high 0086  
                     __end_of_get_CDC 751C                          main@int_read 0082  
                      __CFG_FCMEN$OFF 000000                 __size_of_write_AD7147 0052  
                        main@sensor_1 006A                          main@sensor_2 006C  
                        main@sensor_3 006E                          main@sensor_4 0070  
                               status 000FD8                w16_r16_spi@address_low 0009  
         setup_AD7147@AD7147Registers 0029                       __initialization 74A4  
                        __end_of_main 7B02                   __end_of_w16_r16_spi 771C  
                        _write_AD7147 7586                                ??_main 0049  
                       main@device_ID 007C                         __activetblptr 000000  
                    ___awdiv@dividend 0001                           w32_spi@data 0003  
                       main@indicator 0088  read_AD7147_interrupt@interrupt_clear 001B  
                      __CFG_WDTEN$OFF 000000                                _RCREG1 000FAE  
                              _SPBRG1 000FAF                                _SSPBUF 000FC9  
                              _TXREG1 000FAD                                _TXSTA1 000FAC  
                    __end_of_delay_ms 7586                             ??_w32_spi 0005  
                       main@int_ready 0060                        __CFG_XINST$OFF 000000  
                       main@register1 0074                         main@register2 0076  
                       main@register3 0078                         main@register4 007A  
                           ??___awdiv 0005                        __CFG_STVREN$ON 000000  
                              _get_ID 75D8                                clear_0 74AA  
                    ___awdiv@quotient 0007                             ??_get_CDC 0005  
                              main@bb 0080                     ??_uart_write_char 0001  
      __size_of_read_AD7147_interrupt 002A         __end_of_read_AD7147_interrupt 7546  
             w16_r16_spi@address_high 000B               _uart_write_unsigned_int 74E0  
                          __accesstop 0060               __end_of__initialization 74B0  
                       ___rparam_used 000001                           _w16_r16_spi 769E  
                      __pcstackCOMRAM 0001                    __size_of_blink_LED 00AE  
                          __pbssBANK0 0089                    __size_of_init_uart 0014  
                             ?_get_ID 0017                      __CFG_CANMX$PORTB 000000  
                  __size_of_setup_mcu 000A                    __size_of_setup_spi 0016  
                           ?_delay_ms 0009                         w16_r16_spi@p1 0005  
                       w16_r16_spi@p2 0007                         w16_r16_spi@p3 0013  
                       w16_r16_spi@p4 0015             ??_uart_write_unsigned_int 0003  
                   __end_of_blink_LED 784E                               _w32_spi 7630  
                             __Hparam 0000                               __Lparam 0000  
                             ___awdiv 771C                       __size_of_get_ID 0058  
                             __pcinit 74A4                               _get_CDC 74FA  
                             __ramtop 0F00                               __ptext0 784E  
                             __ptext1 74E0                               __ptext2 7488  
                             __ptext3 74CA                               __ptext4 747E  
                             __ptext5 7494                               __ptext6 74B6  
                             __ptext7 7B02                               __ptext8 7586  
                             __ptext9 751C                        w32_spi@address 0001  
                   __end_of_init_uart 74CA                            ??_delay_ms 000B  
                          get_CDC@cdc 0001                  end_of_initialization 74B0  
                       ?_setup_AD7147 0021                        main@power_mode 0072  
                   __end_of_setup_mcu 7488                     __end_of_setup_spi 74E0  
                             postdec2 000FDD       __end_of_uart_write_unsigned_int 74FA  
                             postinc0 000FEE                               postinc2 000FDE  
                     _uart_write_char 7488                             _PORTBbits 000F81  
                          _setup_port 7494                        ??_setup_AD7147 0023  
                        ?_w16_r16_spi 0001                      main@int_complete 007E  
                           w32_spi@p1 0007                             w32_spi@p2 0009  
                           w32_spi@p3 000B                             w32_spi@p4 000D  
                w16_r16_spi@blank_low 000F                        __end_of_get_ID 7630  
                 w32_spi@address_high 0011                   start_initialization 74A4  
                 uart_write_char@data 0001                 _read_AD7147_interrupt 751C  
             __end_of_uart_write_char 7494               setup_AD7147@StageBuffer 0039  
                            ??_get_ID 0019                           ?_setup_port 0001  
                       __pcstackBANK0 0060                write_AD7147@DataBuffer 001B  
                   __size_of_delay_ms 0040                              ?_w32_spi 0001  
                           _blink_LED 77A0                              ?___awdiv 0001  
                __end_of_setup_AD7147 8000                              ?_get_CDC 0001  
                       ?_write_AD7147 0017                              _BAUDCON1 000FA7  
        uart_write_unsigned_int@char1 0003          uart_write_unsigned_int@char2 0004  
                    w32_spi@data_high 0015                             _init_uart 74B6  
              ?_read_AD7147_interrupt 0017                              _LATCbits 000F8B  
                           delay_ms@j 000C                             delay_ms@n 0009  
       write_AD7147@NumberOfRegisters 0019                             get_ID@cdc 0017  
                            _PIE1bits 000F9D                   __size_of_setup_port 0010  
                    ?_uart_write_char 0001                              _PIR1bits 000F9E  
                          ?_blink_LED 0017                  __size_of_w16_r16_spi 007E  
                           _setup_mcu 747E                             _setup_spi 74CA  
                      ??_write_AD7147 001D                       setup_AD7147@cdc 0021  
                        get_CDC@state 0003                      __CFG_SOSCSEL$DIG 000000  
            ?_uart_write_unsigned_int 0001                            ?_init_uart 0001  
                  w32_spi@address_low 000F                            _CDC_RESULT 0089  
                            __Hrparam 0000                          get_ID@result 001A  
                    __size_of_w32_spi 006E                              __Lrparam 0000  
                        blink_LED@cdc 0017                      __size_of___awdiv 0084  
                          ?_setup_mcu 0001                            ?_setup_spi 0001  
                    __size_of_get_CDC 0022                              _delay_ms 7546  
                            __ptext10 75D8                              __ptext11 769E  
                            __ptext12 77A0                              __ptext13 7630  
                            __ptext14 74FA                              __ptext15 7546  
                            __ptext16 771C                         __size_of_main 02B4  
                     w32_spi@data_low 0013                           ??_blink_LED 0019  
               __size_of_setup_AD7147 04FE                         write_AD7147@i 001F  
                  w16_r16_spi@address 0001                          ??_setup_port 0001  
                         ??_init_uart 0001  read_AD7147_interrupt@RegisterAddress 0017  
                __end_of_write_AD7147 75D8                          _setup_AD7147 7B02  
                          _RCSTA1bits 000FAB  read_AD7147_interrupt@Register_Values 0019  
                  __end_of_setup_port 74A4                           ??_setup_mcu 0001  
                         ??_setup_spi 0001                     w16_r16_spi@result 000D  
                         _SSPCON1bits 000FC6               ??_read_AD7147_interrupt 0019  
                    blink_LED@message 0019         uart_write_unsigned_int@number 0001  
                 setup_AD7147@int_low 0023                  setup_AD7147@int_high 0025  
