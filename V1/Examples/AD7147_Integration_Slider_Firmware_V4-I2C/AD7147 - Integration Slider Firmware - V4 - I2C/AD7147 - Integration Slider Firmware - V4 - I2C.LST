C51 COMPILER V8.01   AD7147___INTEGRATION_SLIDER_FIRMWARE___V4                             07/23/2009 12:18:57 PAGE 1   


C51 COMPILER V8.01, COMPILATION OF MODULE AD7147___INTEGRATION_SLIDER_FIRMWARE___V4
OBJECT MODULE PLACED IN AD7147 - Integration Slider Firmware - V4 - I2C.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE AD7147 - Integration Slider Firmware - V4 - I2C.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          //***************************************************************************
   2          //                                                                                                                                                      
   3          // AD7147 - Slider Demo Firmware                                                                                            
   4          // -----------------------------                                                                                                
   5          // Date: 23/07/2009
   6          // Author: ADI                                                                                                                          
   7          //                                                                                                                                                      
   8          //***************************************************************************
   9          // This firmware implements a slider that offers 128 positions. It requires
  10          // the AD7147 evaluation board to operate. The firmware can be downloaded
  11          // and ran using this board.
  12          //
  13          // This is the format of the status variable returned by the firmware:
  14          //      Global variable "g_SliderStatus":
  15          //  --------------------------------------------------
  16          //      bit: 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
  17          //        |  |  |  |  |  | |_________________|-------> Slider position ranging from 0 to 127
  18          //                |      |      |  |  |  |---------------------------> 2 fingers touching the slider
  19          //                |      |      |  |  |------------------------------> Large finger across the slider
  20          //                |      |      |  |---------------------------------> Menu DOWN command
  21          //        |      |      |------------------------------------> Menu UP command
  22          //                |  |---------------------------------------> Tap on the slider
  23          //                |------------------------------------------> Finger valid     (Activation bit)
  24          //
  25          //***************************************************************************
  26          
  27          
  28          #include <ADUC841.H>
  29          #include <stdio.h>
  30          #include <stdlib.h>
  31          #include <intrins.h>
  32          #include "Include\General Definitions.h"
  33          #include "Include\AD7147regMap.h"
  34          #include "Include\AD7147 - Slider Definitions.h"
  35           
  36          
  37          //---------------------------------
  38          //Function prototypes
  39          //---------------------------------
  40          
  41          //External functions
  42          //---------------------------------
  43          extern void ReadFromAD7147(const WORD RegisterStartAddress, const BYTE NumberOfRegisters, WORD *DataBuffer
             -, const WORD OffsetInBuffer);
  44          extern void WriteToAD7147(const WORD RegisterAddress, const BYTE NumberOfRegisters, WORD *DataBuffer, cons
             -t BYTE OffsetInBuffer);
  45          extern void ConfigAD7147(void);
  46          extern WORD GetNewSliderUpdate(void);
  47          extern void InitialiseSlider(void);
  48          
  49          
  50          //Local functions
  51          //---------------------------------
  52          static int ServiceAD7147Isr(void);
  53          static void ForceCalibration(void);
C51 COMPILER V8.01   AD7147___INTEGRATION_SLIDER_FIRMWARE___V4                             07/23/2009 12:18:57 PAGE 2   

  54          
  55          
  56          //---------------------------------
  57          //Global variables
  58          //---------------------------------
  59          WORD xdata g_SliderStatus;
  60          
  61          //External global variables 
  62          //---------------------------------
  63          extern WORD xdata AD7147Registers[NUMBER_OF_AD7147_REGISTERS];
  64          
  65          
  66          //Local global variables
  67          //---------------------------------
  68          //Initialisation variables
  69          BYTE xdata InterruptCounterForInitialisation;
  70          //Variables for switching from 1 int mode to another one
  71          BYTE xdata InterruptCounterForThresIntMode;
  72          
  73          //---------------------------------
  74          //void AD7147_Isr() interrupt 0
  75          //---------------------------------
  76          //Interrupt service routine that is executed when the INT0 pin goes low.
  77          /********************************************************************************************/
  78          /*//////////////////////////////////////////////////////////////////////////////////////////*/
  79          // This function declaration is specific to the ADuC841 and needs to be changed for another //
  80          // host processor. The interrupt vector number may be different                                                         //
  81          /*//////////////////////////////////////////////////////////////////////////////////////////*/
  82          /********************************************************************************************/
  83          static void AD7147_Isr() interrupt 0
  84          {
  85   1              EX0=0;
  86   1              ServiceAD7147Isr();
  87   1              EX0=1;
  88   1              return;
  89   1      }
  90          
  91          
  92          void main (void)
  93          {
  94   1              /********************************************************************************************/
  95   1              /*//////////////////////////////////////////////////////////////////////////////////////////*/
  96   1              // Specific to the ADuC841, this section configures the ADuC841 pins as input or as output. //
  97   1              // This needs to be changed for another host processor                                                                          //
  98   1              /*//////////////////////////////////////////////////////////////////////////////////////////*/
  99   1              /********************************************************************************************/
 100   1              //I2C interface to AD7147
 101   1              SDA=1;                          //Set SDA pin
 102   1              CLK=1;                          //Set the CLK pin
 103   1              ADUC841_INT0=1;         //Makes sure that the INT0 pin on the ADuC841 is be an input.
 104   1      
 105   1              //-----------------
 106   1              //Configure Device
 107   1              //-----------------
 108   1              ConfigAD7147(); 
 109   1              
 110   1              //Initialise Calibration variables
 111   1              //--------------------------------
 112   1              InterruptCounterForThresIntMode=0;
 113   1              InterruptCounterForInitialisation=0;
 114   1                      
 115   1              /*******************************************************************************************/
C51 COMPILER V8.01   AD7147___INTEGRATION_SLIDER_FIRMWARE___V4                             07/23/2009 12:18:57 PAGE 3   

 116   1              /*/////////////////////////////////////////////////////////////////////////////////////////*/
 117   1              // Enable interrupt after software initialisation. This section cannot be placed anywhere  //
 118   1              // else. These instructions must be changed for another host processor.                                    //
 119   1              /*/////////////////////////////////////////////////////////////////////////////////////////*/
 120   1              /*******************************************************************************************/
 121   1              IT0=0x1;                        //The INT0 interrupt is negative edged triggered
 122   1              EX0=1;                          //Enable external interrupt "0" //AD7147 interrupt
 123   1              EA=1;                           //Enable interrupts
 124   1              
 125   1              while(1)
 126   1              {       
 127   2                      //This is where the "g_SliderStatus" can be accessed and this is its format.
 128   2                      //
 129   2                      //      Global variable "g_SliderStatus":
 130   2                      //  ------------------------------------------
 131   2                      //      bit: 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
 132   2                      //        |  |  |  |  |  | |_________________|-------> Slider position ranging from 0 to 127
 133   2                      //                |      |      |  |  |  |---------------------------> 2 fingers touching the slider
 134   2                      //                |      |      |  |  |------------------------------> Large finger across the slider
 135   2                      //                |      |      |  |---------------------------------> Menu DOWN command
 136   2                      //        |      |      |------------------------------------> Menu UP command
 137   2                      //                |  |---------------------------------------> Tap on the slider
 138   2                      //                |------------------------------------------> Finger valid     (Activation bit)
 139   2                      //
 140   2              }
 141   1      }
 142          
 143          
 144                  
 145          //---------------------------------
 146          //Function  definitions 
 147          //---------------------------------
 148          
 149          //ServiceAD7147Isr();
 150          //-----------------------------------------------------------------
 151          // Function called by the AD7147 ISR. Anything that must be 
 152          // executed during the ISR needs to be done here
 153          //-----------------------------------------------------------------
 154          static int ServiceAD7147Isr(void)
 155          {                       
 156   1              //Read thresholds registers
 157   1              ReadFromAD7147(STAGE_LOW_LIMIT_INT, 2, AD7147Registers, STAGE_LOW_LIMIT_INT);   
 158   1              
 159   1              if(InterruptCounterForInitialisation < (NB_OF_INT+2))
 160   1              {               
 161   2                      if (InterruptCounterForInitialisation==(NB_OF_INT-1))
 162   2                      {
 163   3                              //================================
 164   3                              //= Put initialisation code here =
 165   3                              //================================
 166   3                              InitialiseSlider();
 167   3                      }
 168   2                      InterruptCounterForInitialisation++;
 169   2              }
 170   1              
 171   1              if(InterruptCounterForInitialisation>=NB_OF_INT)
 172   1              {
 173   2                      //============================
 174   2                      //= Recalibrate if required. =
 175   2                      //============================
 176   2                      if ((AD7147Registers[STAGE_LOW_LIMIT_INT] & POWER_UP_INTERRUPT) != 0x0000)
 177   2                      {
C51 COMPILER V8.01   AD7147___INTEGRATION_SLIDER_FIRMWARE___V4                             07/23/2009 12:18:57 PAGE 4   

 178   3                              ForceCalibration();
 179   3                              InterruptCounterForInitialisation = 0;
 180   3                      }
 181   2                      else
 182   2                      {
 183   3                              //Get a new slider position status
 184   3                              g_SliderStatus = GetNewSliderUpdate(); //"g_SliderStatus" is updated from this line on.
 185   3                      }       
 186   2              
 187   2                      //=======================
 188   2                      // Change interrupt mode
 189   2                      //=======================
 190   2                      //Configure AD7147 in EOC interrupt driven mode
 191   2                      if (((AD7147Registers[STAGE_HIGH_LIMIT_INT] & POWER_UP_INTERRUPT)!=0x0000) || 
 192   2                              ((AD7147Registers[STAGE_LOW_LIMIT_INT] & POWER_UP_INTERRUPT)!=0x0000))
 193   2                      {
 194   3                              if (AD7147Registers[STAGE_COMPLETE_INT_EN]==0x0000)
 195   3                              {
 196   4                                      AD7147Registers[STAGE_LOW_INT_EN] &= 0xF000;
 197   4                                      AD7147Registers[STAGE_HIGH_INT_EN] &= 0xF000;
 198   4                                      AD7147Registers[STAGE_COMPLETE_INT_EN]=0x0001;
 199   4                                      WriteToAD7147(STAGE_LOW_INT_EN, 3, AD7147Registers, STAGE_LOW_INT_EN);
 200   4                              }
 201   3                              InterruptCounterForThresIntMode = NUMBER_OF_INTS_BEFORE_THRES_INT_MODE;
 202   3                      }
 203   2                      else
 204   2                      {
 205   3                              //Configure AD7147 in threshold interrupt driven mode
 206   3                              if (InterruptCounterForThresIntMode>0)
 207   3                                      InterruptCounterForThresIntMode--;
 208   3                              if ( (AD7147Registers[STAGE_HIGH_LIMIT_INT]==0x0000) && InterruptCounterForThresIntMode==0)
 209   3                              {
 210   4                                      AD7147Registers[STAGE_LOW_INT_EN] |= POWER_UP_INTERRUPT;
 211   4                                      AD7147Registers[STAGE_HIGH_INT_EN] |= STAGE_HIGH_INT_EN_VALUE;
 212   4                                      AD7147Registers[STAGE_COMPLETE_INT_EN]=0x0000;
 213   4                                      WriteToAD7147(STAGE_LOW_INT_EN, 3, AD7147Registers, STAGE_LOW_INT_EN);
 214   4                              }
 215   3                      }
 216   2              }//End if(InterruptCounterForInitialisation>=NB_OF_INT) 
 217   1      }
 218          
 219          
 220          
 221          
 222          
 223          //ForceCalibration();
 224          //-----------------------------------------------------------------
 225          // Function called by ServiceAD7147Isr when there is a touch on 
 226          // power up or when there is a problem with the calibration.
 227          //-----------------------------------------------------------------
 228          static void ForceCalibration(void)
 229          {
 230   1              ReadFromAD7147(AMB_COMP_CTRL0, 1, AD7147Registers, AMB_COMP_CTRL0);
 231   1              AD7147Registers[AMB_COMP_CTRL0] |= 0x4000;//Set "forced cal" bit
 232   1              WriteToAD7147(AMB_COMP_CTRL0, 1, AD7147Registers, AMB_COMP_CTRL0);
 233   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    377    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4    ----
C51 COMPILER V8.01   AD7147___INTEGRATION_SLIDER_FIRMWARE___V4                             07/23/2009 12:18:57 PAGE 5   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
