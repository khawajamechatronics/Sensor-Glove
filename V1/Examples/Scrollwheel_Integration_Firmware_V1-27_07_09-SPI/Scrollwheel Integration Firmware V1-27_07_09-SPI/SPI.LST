C51 COMPILER V8.01   SPI                                                                   07/27/2009 14:27:52 PAGE 1   


C51 COMPILER V8.01, COMPILATION OF MODULE SPI
OBJECT MODULE PLACED IN SPI.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE SPI.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /********************************************************************************************************/
   2          /* SPI inteface for ADUC841                                                                                                                                                             */
   3          /* ------------------------                                                                                                                                                             */
   4          /*                                                                                                                                                                                                              */
   5          /* Description.                                                                                                                                                                                 */
   6          /* This file has the function to handle the SPI interface between the ADuC841 and the AD7142.                   */
   7          /*                                                                                                                                                                                                              */
   8          /* Date: 29/07/2005                                                                                                                                                                             */
   9          /* Author: ADI                                                                                                                                                                                  */
  10          /********************************************************************************************************/
  11          #include <ADUC841.h>
  12          #include <intrins.h>
  13          #include "Include\General Definitions.h"
  14          
  15          //---------------------------------
  16          //Function prototypes
  17          //---------------------------------
  18          void WriteToAD7147ViaSpi(const WORD RegisterAddress, const BYTE NumberOfRegisters, WORD *DataBuffer, const
             - BYTE OffsetInBuffer);
  19          void ReadFromAD7147ViaSpi(const WORD RegisterStartAddress, const BYTE NumberOfRegisters, WORD *DataBuffer,
             - const WORD OffsetInBuffer);
  20          
  21          
  22          //---------------------------------
  23          //Function definitions
  24          //---------------------------------
  25          
  26          //---------------------------------
  27          //WriteRegistersToAD7147();
  28          //---------------------------------
  29          //This function implements block writes to the AD7147. We first send the control 
  30          //word that includes the start address and then the data to write.
  31          //--------------------------------------------------------------------------------
  32          void WriteToAD7147ViaSpi(const WORD RegisterAddress, const BYTE NumberOfRegisters, WORD *DataBuffer, const
             - BYTE OffsetInBuffer)
  33          {
  34   1              WORD ControlValue;
  35   1              WORD ValueToWrite;
  36   1              WORD RegisterIndex;
  37   1              BYTE i;
  38   1      
  39   1              //Create the 16-bit header
  40   1              ControlValue = 0xE000 | (RegisterAddress & 0x03FF);
  41   1              
  42   1              CS=0; //bring CS low
  43   1              //Write out the control word
  44   1              for (i=0; i<=REGISTER_LENGTH; i++)
  45   1              {
  46   2                      CLK=1;
  47   2                      _nop_();
  48   2                      _nop_();
  49   2                      _nop_();
  50   2                      _nop_();
  51   2                      _nop_();
  52   2                      _nop_();
C51 COMPILER V8.01   SPI                                                                   07/27/2009 14:27:52 PAGE 2   

  53   2                      _nop_();
  54   2                      _nop_();
  55   2                      _nop_();
  56   2                      _nop_();
  57   2                      _nop_();
  58   2                      ControlValue=ControlValue<<1;
  59   2                      DOUT=CY; //send the MSB first.
  60   2                      CLK=0;
  61   2                      _nop_();
  62   2                      _nop_();
  63   2                      _nop_();
  64   2                      _nop_();
  65   2                      _nop_();
  66   2                      _nop_();
  67   2                      _nop_();
  68   2                      _nop_();
  69   2                      _nop_();
  70   2                      _nop_();
  71   2                      _nop_();
  72   2              }
  73   1              //And then the data
  74   1              for (RegisterIndex=0; RegisterIndex<NumberOfRegisters; RegisterIndex++)
  75   1              {
  76   2                      ValueToWrite= *(DataBuffer+RegisterIndex+OffsetInBuffer);
  77   2                      for (i=0; i<REGISTER_LENGTH; i++)
  78   2                      {
  79   3                              ValueToWrite=ValueToWrite<<1;
  80   3                              DOUT=CY;//send the MSB first.
  81   3                              CLK=0;
  82   3                              _nop_();
  83   3                              _nop_();
  84   3                              _nop_();
  85   3                              _nop_();
  86   3                              CLK=1;
  87   3                              _nop_();
  88   3                              _nop_();
  89   3                              _nop_();
  90   3                      }
  91   2              }
  92   1              DOUT=1;
  93   1              CLK=1;
  94   1              CS=1; //bring CS high again
  95   1      }
  96          
  97          
  98          //---------------------------------
  99          //ReadRegistersFromAD7147();
 100          //---------------------------------
 101          //This function implements a block read from the AD7142. We first send the 
 102          //control word that includes the start address and then 16 clocks for each 
 103          //registers to read.
 104          //--------------------------------------------------------------------------------
 105          void ReadFromAD7147ViaSpi(const WORD RegisterStartAddress, const BYTE NumberOfRegisters, WORD *DataBuffer,
             - const WORD OffsetInBuffer)
 106          {
 107   1              WORD ControlValue;
 108   1              BYTE i, RegisterIndex;
 109   1              BYTE InputPinValue;
 110   1              WORD InputValue;
 111   1      
 112   1              //Create the 16-bit header
 113   1              ControlValue = 0xE400 | (RegisterStartAddress & 0x03FF);
C51 COMPILER V8.01   SPI                                                                   07/27/2009 14:27:52 PAGE 3   

 114   1              
 115   1              CS=0; //bring CS low
 116   1      
 117   1              //Write out the control word
 118   1              for (i=0; i<=REGISTER_LENGTH; i++)
 119   1              {
 120   2                      CLK=1;
 121   2                      _nop_();
 122   2                      _nop_();
 123   2                      _nop_();
 124   2                      _nop_();
 125   2                      _nop_();
 126   2                      _nop_();
 127   2                      _nop_();
 128   2                      _nop_();
 129   2                      _nop_();
 130   2                      _nop_();
 131   2                      _nop_();
 132   2                      ControlValue=ControlValue<<1;
 133   2                      DOUT=CY;//(OutputValue<<1); //send the MSB first.
 134   2                      CLK=0;
 135   2                      _nop_();
 136   2                      _nop_();
 137   2                      _nop_();
 138   2                      _nop_();
 139   2                      _nop_();
 140   2                      _nop_();
 141   2                      _nop_();
 142   2                      _nop_();
 143   2                      _nop_();
 144   2                      _nop_();
 145   2                      _nop_();
 146   2              }
 147   1              //Copy each register in the buffer contiguously.
 148   1              //Read data in.
 149   1              for (RegisterIndex=0; RegisterIndex<NumberOfRegisters; RegisterIndex++)
 150   1              {
 151   2                      for (i=0; i<16; i++)
 152   2                      {
 153   3                              CLK=0;
 154   3                              _nop_();
 155   3                              InputPinValue=DIN &0x1;
 156   3                              InputValue = InputValue <<1;
 157   3                              InputValue |= InputPinValue;
 158   3                              CLK=1;
 159   3                              _nop_();
 160   3                              _nop_();
 161   3                              _nop_();
 162   3                              _nop_();
 163   3                              _nop_();
 164   3                              _nop_();
 165   3                              _nop_();
 166   3                              _nop_();
 167   3                      }
 168   2                      *(DataBuffer+OffsetInBuffer+RegisterIndex)=(WORD)InputValue;
 169   2              }
 170   1              DOUT=1;
 171   1              CS=1; //bring CS high again
 172   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V8.01   SPI                                                                   07/27/2009 14:27:52 PAGE 4   

   CODE SIZE        =    269    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      20
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
